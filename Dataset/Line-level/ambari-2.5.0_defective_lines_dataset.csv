File,Line_number,SRC
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,157,return Response.ok(viewContext.getUsername()).build();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,326,statementExecutor = getStatementExecutor();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,381,statementExecutor = getStatementExecutor();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,385,private ActorRef getStatementExecutor() {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,47,private final Logger LOG = LoggerFactory.getLogger(getClass());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,56,private boolean hasStartedFetching = false;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,57,private boolean shouldFetchMore = true;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,73,try {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,74,getMoreLogs();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,76,LOG.error("SQL Error while getting logs. Tried writing to: {}. Exception: {}", logFile, e);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,78,LOG.warn("HDFS Error while getting writing logs to {}. Exception: {}", logFile, e);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,86,hasStartedFetching = false;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,87,shouldFetchMore = true;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,92,if (!(moreLogsScheduler == null || moreLogsScheduler.isCancelled())) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,93,moreLogsScheduler.cancel();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,96,Duration.Zero(), Duration.create(AGGREGATION_INTERVAL, TimeUnit.MILLISECONDS),
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,97,this.getSelf(), new GetMoreLogs(), getContext().dispatcher(), null);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,100,private void getMoreLogs() throws SQLException, HdfsApiException {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,101,List<String> logs = statement.getQueryLog();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,102,if (logs.size() > 0 && shouldFetchMore) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,103,allLogs = allLogs + "\n" + Joiner.on("\n").skipNulls().join(logs);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,104,HdfsUtil.putStringToFile(hdfsApi, logFile, allLogs);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,105,if(!statement.hasMoreLogs()) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,106,shouldFetchMore = false;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,110,if(!shouldFetchMore) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,111,moreLogsScheduler.cancel();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/LogAggregator.java,112,parent.tell(new LogAggregationFinished(), ActorRef.noSender());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/StatementExecutor.java,129,private void stopLogAggregation() {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/StatementExecutor.java,130,if (logAggregator != null) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/StatementExecutor.java,131,getContext().stop(logAggregator);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/StatementExecutor.java,133,logAggregator = null;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/StatementExecutor.java,138,stopLogAggregation();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,330,statementExecutor = getStatementExecutor();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,385,statementExecutor = getStatementExecutor();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,389,private ActorRef getStatementExecutor() {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,391,.withDispatcher("akka.actor.result-dispatcher"),
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,26,import org.apache.ambari.view.hive20.actor.message.LogAggregationFinished;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,29,import org.apache.ambari.view.utils.hdfs.HdfsApiException;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,33,import org.slf4j.Logger;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,34,import org.slf4j.LoggerFactory;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,37,import java.sql.SQLException;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,46,private final Logger LOG = LoggerFactory.getLogger(getClass());
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,55,private boolean hasStartedFetching = false;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,56,private boolean shouldFetchMore = true;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,72,try {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,73,getMoreLogs();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,75,LOG.warn("SQL Error while getting logs. Tried writing to: {}. Exception: {}", logFile, e.getMessage());
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,77,LOG.warn("HDFS Error while writing logs to {}. Exception: {}", logFile, e.getMessage());
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,86,hasStartedFetching = false;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,87,shouldFetchMore = true;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,92,if (!(moreLogsScheduler == null || moreLogsScheduler.isCancelled())) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,93,moreLogsScheduler.cancel();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,96,Duration.Zero(), Duration.create(AGGREGATION_INTERVAL, TimeUnit.MILLISECONDS),
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,97,this.getSelf(), new GetMoreLogs(), getContext().dispatcher(), null);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,100,private void getMoreLogs() throws SQLException, HdfsApiException {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,101,List<String> logs = statement.getQueryLog();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,102,if (logs.size() > 0 && shouldFetchMore) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,103,allLogs = allLogs + "\n" + Joiner.on("\n").skipNulls().join(logs);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,104,HdfsUtil.putStringToFile(hdfsApi, logFile, allLogs);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,105,if(!statement.hasMoreLogs()) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,106,shouldFetchMore = false;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,110,if(!shouldFetchMore) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,111,moreLogsScheduler.cancel();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/LogAggregator.java,112,parent.tell(new LogAggregationFinished(), ActorRef.noSender());
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/StatementExecutor.java,129,private void stopLogAggregation() {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/StatementExecutor.java,130,if (logAggregator != null) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/StatementExecutor.java,131,getContext().stop(logAggregator);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/StatementExecutor.java,133,logAggregator = null;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/StatementExecutor.java,138,stopLogAggregation();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,161,return getArchiveClassLoader(viewConfig, archiveDir);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,205,File   libDir  = archiveUtility.getFile(libPath);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,218,urlList.add(archiveDir.toURI().toURL());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,220,return new ViewClassLoader(viewConfig, urlList.toArray(new URL[urlList.size()]));
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1782,ClassLoader cl = extractor.extractViewArchive(viewDefinition, archiveFile, extractedArchiveDirFile);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2090,classLoader = extractor.extractViewArchive(viewDefinition, archiveFile, extractedArchiveDirFile);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,485,ActionExecutionContext actionContext = new ActionExecutionContext(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,486,cluster.getClusterName(), INSTALL_PACKAGES_ACTION,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,487,Collections.singletonList(filter),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,489,actionContext.setTimeout(Short.valueOf(configuration.getDefaultAgentTaskTimeout(true)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,506,Stage stage = stageFactory.createNew(req.getId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,508,cluster.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,509,cluster.getClusterId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,510,caption,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,513,StageUtils.getGson().toJson(hostLevelParams));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,515,long stageId = req.getLastStageId() + 1;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,516,if (0L == stageId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,517,stageId = 1L;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,519,stage.setStageId(stageId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,520,req.addStages(Collections.singletonList(stage));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,522,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,523,actionExecutionHelper.get().addExecutionCommandsToStage(actionContext, stage, null, !forceInstallOnNonMemberHost);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,525,throw new SystemException("Can not modify stage", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,528,if (forceInstallOnNonMemberHost) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,529,addSelectStackStage(desiredRepoVersion, forceInstallOnNonMemberHost, cluster, filter, caption, req,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,530,hostLevelParams, clusterHostInfoJson);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,546,private void addSelectStackStage(String desiredRepoVersion, boolean forceInstallOnNonMemberHost, Cluster cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,547,RequestResourceFilter filter, String caption, RequestStageContainer req, Map<String, String> hostLevelParams, String clusterHostInfoJson) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,548,Stage stage;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,549,long stageId;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,550,ActionExecutionContext actionContext;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,552,commandParams.put("version", desiredRepoVersion);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,554,stage = stageFactory.createNew(req.getId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,560,StageUtils.getGson().toJson(commandParams),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,561,StageUtils.getGson().toJson(hostLevelParams));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,563,stageId = req.getLastStageId() + 1;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,570,actionContext = new ActionExecutionContext(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,571,cluster.getClusterName(), STACK_SELECT_ACTION,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,572,Collections.singletonList(filter),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,573,Collections.<String, String>emptyMap());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,574,actionContext.setTimeout(Short.valueOf(configuration.getDefaultAgentTaskTimeout(true)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,577,actionExecutionHelper.get().addExecutionCommandsToStage(actionContext, stage, null, !forceInstallOnNonMemberHost);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,328,final private static String JDK_RESOURCE_LOCATION =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,478,ServletHolder resources = new ServletHolder(ServletContainer.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,479,resources.setInitParameter("com.sun.jersey.config.property.resourceConfigClass",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,481,resources.setInitParameter("com.sun.jersey.config.property.packages",
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,212,if (m_grouping.parallelScheduler != null && m_grouping.parallelScheduler.maxDegreeOfParallelism > 0) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,213,hostSets = SetUtils.split(tw.getHosts(), m_grouping.parallelScheduler.maxDegreeOfParallelism);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ParallelScheduler.java,27,public static int DEFAULT_MAX_DEGREE_OF_PARALLELISM = 100;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/UploadService.java,458,private PreviewData generatePreview(Boolean isFirstRowHeader, String inputFileType, CSVParams csvParams, InputStream uploadedInputStream) throws Exception {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/UploadService.java,476,DataParser dataParser = new DataParser(new InputStreamReader(uploadedInputStream), parseOptions);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/UploadService.java,522,DataParser dataParser = new DataParser(new InputStreamReader(uploadedInputStream), parseOptions);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,20,package org.apache.ambari.logsearch.solr.metrics;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,22,import org.apache.hadoop.metrics2.sink.timeline.AbstractTimelineMetricsSink;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,23,import org.apache.hadoop.metrics2.sink.timeline.TimelineMetrics;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,25,import java.util.Collection;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,28,public class SolrAmsClient extends AbstractTimelineMetricsSink {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,29,private final String collectorHost;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,31,public SolrAmsClient(String collectorHost) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,32,this.collectorHost = collectorHost;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,36,public String getCollectorUri(String host) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,37,return collectorHost;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,41,protected int getTimeoutSeconds() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,42,return 10;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,46,protected String getZookeeperQuorum() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,47,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,51,protected Collection<String> getConfiguredCollectorHosts() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,52,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,56,protected String getHostname() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,57,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,61,protected boolean emitMetrics(TimelineMetrics metrics) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,62,return super.emitMetrics(metrics);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,66,protected String getCollectorProtocol() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,67,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,71,protected String getCollectorPort() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/solr/metrics/SolrAmsClient.java,72,return null;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,33,import org.codehaus.jackson.JsonParseException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,34,import org.codehaus.jackson.map.JsonMappingException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,35,import org.codehaus.jackson.map.ObjectMapper;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/util/JSONUtil.java,36,import org.codehaus.jackson.type.TypeReference;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,1176,String metricRegEx;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,1180,if (metricNameEntry.contains("*") || metricNameEntry.contains("__%")) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,1181,String metricNameWithEscSeq = metricNameEntry.replace("*", "\\*").replace("__%", "..%");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,1182,metricRegEx = metricNameWithEscSeq.replace("%", ".*");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,1184,metricRegEx = metricNameEntry.replace("%", ".*");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,432,LOG.debug("Downsampler Query issued...");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,436,LOG.info(rows + " row(s) updated in downsampling.");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/DownSamplerUtils.java,27,import java.util.Arrays;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/DownSamplerUtils.java,41,public static final String topNDownSampler = "topn";
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/DownSamplerUtils.java,111,if (StringUtils.isNotEmpty(type) && type.equalsIgnoreCase(topNDownSampler)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricReadHelper.java,75,value = rs.getDouble("METRIC_SUM") / rs.getInt("METRIC_COUNT");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TopNDownSampler.java,42,String metricPatterns = conf.get(DownSamplerUtils.downSamplerConfigPrefix + "topn." +
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,390,AmbariPath.getPath("/usr/lib/python2.6/site-packages/ambari_server/setupAgent.py"));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/DefaultServiceCalculatedState.java,120,if (isInMaintenance & !componentInfo.isClient()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,809,int retriesRemaining = 100;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,810,do {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,811,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,812,stageContainer = updateHostComponents(stages, requests, request.getRequestInfoProperties(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,813,runSmokeTest);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,815,if (--retriesRemaining == 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,816,LOG.info("Caught an exception while updating host components, will not try again: {}", e.getMessage(), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,818,if (IllegalArgumentException.class.isInstance(e)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,819,throw (IllegalArgumentException) e;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,821,throw new RuntimeException("Update Host request submission failed: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,824,LOG.info("Caught an exception while updating host components, retrying : " + e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,825,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,826,Thread.sleep(250);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,828,Thread.currentThread().interrupt();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,829,throw new RuntimeException("Update Host request submission failed: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,26,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,125,protected static final String EXLUSIVE_ID = "exclusive";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,126,private static Set<String> pkPropertyIds =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,127,new HashSet<String>(Arrays.asList(new String[]{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,128,REQUEST_ID_PROPERTY_ID}));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,383,return pkPropertyIds;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,440,if (requestInfoProperties.containsKey(EXLUSIVE_ID)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,441,exclusive = Boolean.valueOf(requestInfoProperties.get(EXLUSIVE_ID).trim());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,715,setResourceProperty(resource, REQUEST_CONTEXT_ID, entity.getRequestContext(), requestedPropertyIds);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyHostRequestEntity.java,23,import javax.persistence.GeneratedValue;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyHostRequestEntity.java,24,import javax.persistence.GenerationType;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyHostRequestEntity.java,30,import javax.persistence.TableGenerator;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyHostRequestEntity.java,31,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostOfferResponse.java,25,import org.apache.ambari.server.topology.tasks.TopologyTask;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostOfferResponse.java,43,private final List<TopologyTask> tasks;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostOfferResponse.java,45,static HostOfferResponse createAcceptedResponse(long hostRequestId, String hostGroupName, List<TopologyTask> tasks) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostOfferResponse.java,53,private HostOfferResponse(Answer answer, long hostRequestId, String hostGroupName, List<TopologyTask> tasks) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostOfferResponse.java,81,for (TopologyTask task : tasks) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostOfferResponse.java,82,LOG.info("Running task for accepted host offer for hostname = {}, task = {}", hostName, task.getType());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostOfferResponse.java,83,task.run();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,80,private List<TopologyTask> topologyTasks = new ArrayList<TopologyTask>();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,310,public List<TopologyTask> getTopologyTasks() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,45,import org.apache.ambari.server.controller.ShortTaskStatus;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,956,LOG.info("TopologyManager.replayRequests: no config with TOPOLOGY_RESOLVED found, adding cluster config request");
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,957,addClusterConfigRequest(topology, new ClusterConfigurationRequest(
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,958,ambariContext, topology, false, stackAdvisorBlueprintProcessor));
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,969,if(logicalRequest != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,970,boolean completed = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,971,for(ShortTaskStatus ts : logicalRequest.getRequestStatus().getTasks()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,972,if(!HostRoleStatus.valueOf(ts.getStatus()).isCompletedState()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,973,completed = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,976,return completed;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,978,return false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,987,if(logicalRequest != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,988,for(ShortTaskStatus ts : logicalRequest.getRequestStatus().getTasks()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,989,if(HostRoleStatus.valueOf(ts.getStatus()) != HostRoleStatus.COMPLETED) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,990,return false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,994,return true;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1025,private void addClusterConfigRequest(ClusterTopology topology, ClusterConfigurationRequest configurationRequest) {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/TopologyTask.java,29,public enum Type {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/TopologyTask.java,33,START
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/TopologyTask.java,41,public Type getType();
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3130,properties.load(inputStream);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1101,long clusterId = cluster.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1119,Map<String, Service> clusterServiceMap = cluster.getServices();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1120,Set<String> clusterServiceNames = clusterServiceMap.keySet();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1174,List<AlertDefinition> agentDefinitions = ambariServiceAlertDefinitions.getAgentDefinitions();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1175,for (AlertDefinition agentDefinition : agentDefinitions) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1176,AlertDefinitionEntity entity = mappedEntities.get(agentDefinition.getName());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1179,if (null == entity) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1180,entity = alertDefinitionFactory.coerce(clusterId, agentDefinition);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1181,persist.add(entity);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1186,List<AlertDefinition> serverDefinitions = ambariServiceAlertDefinitions.getServerDefinitions();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1187,for (AlertDefinition serverDefinition : serverDefinitions) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1188,AlertDefinitionEntity entity = mappedEntities.get(serverDefinition.getName());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1191,if (null == entity) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1192,entity = alertDefinitionFactory.coerce(clusterId, serverDefinition);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1193,persist.add(entity);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1234,LOG.info(
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1236,serviceName, stackId, definition.getDefinitionName());
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1240,&& !stackComponentMap.containsKey(componentName)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1241,LOG.info(
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1243,serviceName, componentName, stackId,
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1244,definition.getDefinitionName());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3481,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3486,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3491,return null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,148,if (newDescriptor == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,192,private StackId getStackIdFromCommandParams(String commandParamKey) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,193,String stackId = getCommandParameterValue(commandParamKey);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,194,if (stackId == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,195,return null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,197,return new StackId(stackId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,96,import org.apache.ambari.server.state.ServiceInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1820,public static ConfigUpgradePack build(UpgradePack upgradePack, StackId sourceStackId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1823,sourceStackId.getStackName(), sourceStackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1833,sourceStackId.getStackName(), intermediateStack.version);
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,163,private Map<String, VersionDefinitionXml> versionDefinitions = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1405,for (VersionDefinitionXml definition : stack.getVersionDefinitions()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1406,versionDefinitions.put(String.format("%s-%s-%s", stack.getName(),
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1407,stack.getVersion(), definition.release.version), definition);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,22,import java.text.SimpleDateFormat;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,36,private SimpleDateFormat targetDateFormatter = null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,38,private SimpleDateFormat srcDateFormatter=null;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,63,targetDateFormatter = new SimpleDateFormat(targetDateFormat);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,65,srcDateFormatter = new SimpleDateFormat(srcDateFormat);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/mapper/MapperDate.java,87,if (!srcDateFormatter.toPattern().contains("yy")) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/Filter.java,39,public abstract class Filter extends ConfigBlock {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,170,if (!"{}".equals(jsonStr)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterGrok.java,212,if ("{}".equals(jsonStr)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4397,RepositoryInfo repositoryInfo = ambariMetaInfo.getRepository(request.getStackName(), request.getStackVersion(), request.getOsType(), request.getRepoId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4398,String repoName = repositoryInfo.getRepoName();
ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryRequest.java,28,public RepositoryRequest(String stackName, String stackVersion, String osType, String repoId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryRequest.java,93,+ getStackName() + "]";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java,231,(String) properties.get(REPOSITORY_REPO_ID_PROPERTY_ID));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,1034,private String getHostNameFromProperties(Map<String, Object> properties) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,129,String hostName = getHostNameFromProperties(properties);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,228,private String getHostNameFromProperties(Map<String, Object> properties) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,233,return hostName;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,133,return nv.split(splitPattern);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/filter/FilterKeyValue.java,140,input.getShortDescription() + ". First upto 100 characters=" + StringUtils.abbreviate(inputStr, 100), null, LOG,
ambari-server/src/main/java/org/apache/ambari/server/stack/ExtensionHelper.java,65,public static void validateCreateLink(StackInfo stack, ExtensionInfo extension) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/stack/ExtensionHelper.java,67,validateServiceDuplication(stack, extension);
ambari-server/src/main/java/org/apache/ambari/server/stack/ExtensionHelper.java,91,private static void validateServiceDuplication(StackInfo stack, ExtensionInfo extension) throws AmbariException {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,42,FSDataOutputStream stream;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,79,import org.apache.ambari.server.orm.entities.OperatingSystemEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,80,import org.apache.ambari.server.orm.entities.RepositoryEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,81,import org.apache.ambari.server.orm.entities.RepositoryVersionEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,94,import org.apache.ambari.server.state.RepositoryInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,112,import com.google.gson.JsonArray;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,113,import com.google.gson.JsonElement;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,114,import com.google.gson.JsonObject;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,21,import com.google.common.base.Preconditions;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,22,import com.google.common.base.Strings;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,23,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,24,import org.apache.ambari.server.orm.entities.BlueprintSettingEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,25,import org.apache.ambari.server.utils.SecretReference;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,48,import org.apache.ambari.server.state.StackInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,56,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,57,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,58,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,59,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,60,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,61,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,62,import java.util.LinkedHashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,63,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,64,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,65,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,21,import org.apache.ambari.server.controller.internal.Stack;
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,22,import org.apache.ambari.server.orm.entities.BlueprintEntity;
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,37,public String getName();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,43,public Map<String, HostGroup> getHostGroups();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,52,public HostGroup getHostGroup(String name);
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,62,public Configuration getConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,71,public Setting getSetting();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,78,public Collection<String> getServices();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,87,public Collection<String> getComponents(String service);
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,97,public String getRecoveryEnabled(String serviceName, String componentName);
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,106,public String getCredentialStoreEnabled(String serviceName);
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,112,public boolean shouldSkipFailure();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,119,public Stack getStack();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,129,public Collection<HostGroup> getHostGroupsForService(String service);
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,138,public Collection<HostGroup> getHostGroupsForComponent(String component);
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,140,public SecurityConfiguration getSecurity();
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,147,public void validateTopology() throws InvalidTopologyException;
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,154,public void validateRequiredProperties() throws InvalidTopologyException;
ambari-server/src/main/java/org/apache/ambari/server/topology/Blueprint.java,161,public BlueprintEntity toEntity();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,22,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,38,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,39,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,40,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,41,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,42,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,43,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,353,public void validateRequiredProperties() throws InvalidTopologyException {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidator.java,32,public void validateTopology() throws InvalidTopologyException;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidator.java,40,public void validateRequiredProperties() throws InvalidTopologyException;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,83,public void validateRequiredProperties() throws InvalidTopologyException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/metrics/MetricsManager.java,50,amsClient = new LogFeederAMSClient();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,25,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.REPO_INFO;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,28,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.STACK_NAME;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,29,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.STACK_VERSION;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,53,import org.apache.ambari.server.orm.entities.RepositoryEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,66,import com.google.gson.JsonArray;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,67,import com.google.gson.JsonObject;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,416,commandParams.put(SCRIPT, actionName + ".py");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,522,return;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,525,JsonObject rootJsonObject = new JsonObject();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,526,JsonArray repositories = new JsonArray();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,548,hostLevelParams.put(REPO_INFO, rootJsonObject.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1165,Map<String, List<RepositoryInfo>> repos = ambariMetaInfo.getRepository(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1166,stackId.getStackName(), stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1169,if (null == family) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1181,LOG.warn("Could not retrieve repo information for host"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1182,+ ", hostname=" + hostName
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1184,+ ", stackInfo=" + stackId.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,107,updateMaintenanceState(currentAlert, newMaintenanceState);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,114,updateMaintenanceState(currentAlert, newMaintenanceState);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,126,updateMaintenanceState(currentAlert, newMaintenanceState);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,148,private void updateMaintenanceState(AlertCurrentEntity currentAlert,
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,149,MaintenanceState maintenanceState) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,156,return;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertMaintenanceModeListener.java,161,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,84,if (jsonObj.get("type") == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,85,jsonObj.put("type", input.getStringValue("type"));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,87,if (jsonObj.get("path") == null && input.getFilePath() != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,88,jsonObj.put("path", input.getFilePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,90,if (jsonObj.get("path") == null && input.getStringValue("path") != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,91,jsonObj.put("path", input.getStringValue("path"));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,93,if (jsonObj.get("host") == null && LogFeederUtil.hostName != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,94,jsonObj.put("host", LogFeederUtil.hostName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,96,if (jsonObj.get("ip") == null && LogFeederUtil.ipAddress != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,97,jsonObj.put("ip", LogFeederUtil.ipAddress);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,43,import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/authenticate/LogsearchLogoutSuccessHandler.java,39,response.sendRedirect("/index.html");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchAuthenticationEntryPoint.java,47,response.sendRedirect(this.getLoginFormUrl() + ((request.getQueryString() != null) ? "?" + request.getQueryString() : ""));
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,331,return serviceType;
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,335,this.serviceType = serviceType;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,801,if (pack.getType() == UpgradeType.ROLLING) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,90,import org.apache.commons.lang.math.NumberUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,946,private static int compareVersions(String version1, String version2) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,948,if (StringUtils.equals(version1, version2)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,949,return 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,952,int compare = VersionUtils.compareVersions(version1, version2);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,953,if (0 != compare) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,954,return compare;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,957,int v1 = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,958,int v2 = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,959,if (version1.indexOf('-') > -1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,960,v1 = NumberUtils.toInt(version1.substring(version1.indexOf('-')), 0);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,963,if (version2.indexOf('-') > -1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,964,v2 = NumberUtils.toInt(version2.substring(version2.indexOf('-')), 0);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,967,compare = v2 - v1;
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,89,List<Integer> stack1Parts = new ArrayList<Integer>();
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,90,List<Integer> stack2Parts = new ArrayList<Integer>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4314,repo.getBaseUrl(), repo.getLatestUri());
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryEntity.java,76,public boolean isUnique() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryEntity.java,77,return unique;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryEntity.java,80,public void setUnique(boolean unique) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryEntity.java,81,this.unique = unique;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1134,Set<RepositoryInfo> serviceRepos = getUniqueServiceRepos(stackRepos);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1153,private Set<RepositoryInfo> getUniqueServiceRepos(List<RepositoryInfo> stackRepos) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1158,Set<RepositoryInfo> uniqueServiceRepos = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1185,uniqueServiceRepos.add(repo);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1189,return uniqueServiceRepos;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1226,repos.addAll(serviceRepoXml.getRepositories());
ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java,186,return new RepositoryResponse(getBaseUrl(), getOsType(), getRepoId(),
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,862,String query = dbmsHelper.getDropTableStatement(tableName);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,863,executeQuery(query);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,24,import javax.persistence.Basic;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,30,import javax.persistence.FetchType;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,151,return new ArrayList<String>(prerequisiteChecks.checks);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,182,prerequisiteChecks.checks = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,197,prerequisiteChecks.configuration.globalProperties = new ArrayList<PrerequisiteProperty>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,200,prerequisiteChecks.configuration.prerequisiteCheckProperties = new ArrayList<PrerequisiteCheckProperties>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,288,List<Grouping> list = new ArrayList<Grouping>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,304,List<Grouping> checked = new ArrayList<Grouping>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,364,List<Grouping> reverse = new ArrayList<Grouping>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,400,List<Grouping> list = new ArrayList<Grouping>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,441,m_process = new LinkedHashMap<String, Map<String, ProcessingComponent>>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,443,if (null == processing || processing.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,452,componentMap = new LinkedHashMap<String, ProcessingComponent>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,593,public List<String> checks = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,626,Map<String, String> result = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/UpgradePack.java,676,Map<String, String> result = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,117,Config createConfig(Cluster cluster, String type, Map<String, String> properties,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,933,Config config = createConfig(cluster, request.getType(), requestProperties,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,945,public Config createConfig(Cluster cluster, String type, Map<String, String> properties,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,948,Config config = configFactory.createNew(cluster, type, versionTag, properties,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigFactory.java,41,Config createNew(Cluster cluster, @Assisted("type") String type, @Assisted("tag") String tag,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1127,return controller.createConfig(cluster, type, properties, tag, propertyAttributes);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,133,entity.setStack(clusterEntity.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,142,stackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,281,: new HashMap<String, Map<String, String>>(propertiesAttributes);
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,150,m_configurations = new ConcurrentHashMap<String, Config>();
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,151,m_hosts = new ConcurrentHashMap<Long, Host>();
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,420,config = configFactory.createNew(cluster, config.getType(), config.getTag(),
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,421,config.getProperties(), config.getPropertiesAttributes());
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,481,Set<Map<String, Object>> hostnames = new HashSet<Map<String, Object>>();
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,483,Map<String, Object> hostMap = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,488,Set<Map<String, Object>> configObjMap = new HashSet<Map<String, Object>>();
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,491,Map<String, Object> configMap = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,592,controller.createConfig(cluster, configType, mergedProperties, newTag, propertiesAttributes);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,21,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,490,for (ServiceComponentHost serviceComponentHost : serviceComponent.getServiceComponentHosts().values()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,491,ComponentInfo componentInfo = ambariMetaInfo.getComponent(targetStackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,492,targetStackId.getStackVersion(), service.getName(), serviceComponent.getName());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,494,if (!componentInfo.isVersionAdvertised()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,491,hostResource.setProperty(HostResourceProvider.HOST_NAME_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1345,hostname.equals(ambariServerHostname) ? null : hostname,
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,77,public DDLProxy(ViewContext context, TableMetaParserImpl tableMetaParser) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,132,JobResourceManager resourceManager) throws ServiceException {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,134,columnName);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,137,if(q.isPresent()) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,224,if(createTableQuery.isPresent()) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,246,if(deleteTableQuery.isPresent()) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,268,if(alterQuery.isPresent()){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,277,throws ServiceException {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,279,newDatabaseName, newTableName);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,281,if(renameTable.isPresent()) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,284,newTableName;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,288,oldTableName);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,295,if(deleteDatabase.isPresent()) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,297,return createJob(databaseName, deleteQuery, "Delete database " + databaseName , resourceManager);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,305,Optional<String> deleteDatabase = queryGenerator.getQuery();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,306,if(deleteDatabase.isPresent()) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,307,String deleteQuery = deleteDatabase.get();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,308,return createJob("default", deleteQuery, "CREATE DATABASE " + databaseName , resourceManager);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,315,throws ServiceException {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,316,LOG.info("Creating job for : {}", deleteQuery );
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,319,jobInfo.put("forcedContent", deleteQuery);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,330,LOG.error("Exception occurred while {} : {}", jobTitle, deleteQuery, e);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,341,if(analyzeTable.isPresent()) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,352,if(results.getHasResults()){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,353,List<String[]> rows = results.getRows();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,354,Map<Integer, String> headerMap = new HashMap<>();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,355,boolean header = true;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,356,for(String[] row : rows){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,357,if(header){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,358,for(int i = 0 ; i < row.length; i++){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,359,if(!Strings.isNullOrEmpty(row[i])){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,365,else if(row.length > 0 ){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,366,if(columnName.equals(row[0])){ // the first column of the row contains column name
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,392,if(null == row){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,396,for(int i = 0 ; i < row.length; i++){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,397,switch(headerMap.get(i)){
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,45,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,46,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,56,private static final Logger LOG = LoggerFactory.getLogger(AbstractCheckDescriptor.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1323,private static class SingleHostTopologyUpdater implements PropertyUpdater {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1355,Matcher m = HOSTGROUP_REGEX.matcher(origValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1356,if (m.find()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1357,String hostGroupName = m.group(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1359,HostGroupInfo groupInfo = topology.getHostGroupInfo().get(hostGroupName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1360,if (groupInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1362,throw new RuntimeException(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1364,+ hostGroupName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1368,return origValue.replace(m.group(0), groupInfo.getHostNames().iterator().next());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1478,Matcher m = HOSTGROUP_REGEX.matcher(origValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1479,if (m.find()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1480,String hostGroupName = m.group(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1481,return Collections.singleton(hostGroupName);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,88,final SavedQuery savedQuery = getResourceManager().read(queryId);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,89,if(operation.equals("download")) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,90,StreamingOutput stream = new StreamingOutput() {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,92,public void write(OutputStream os) throws IOException, WebApplicationException {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,93,Writer writer = new BufferedWriter(new OutputStreamWriter(os));
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,94,try {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,96,String line;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,97,line=br.readLine();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,98,while (line != null){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,99,writer.write(line+"\n");
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,100,line = br.readLine();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,104,e.printStackTrace();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,106,writer.close();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,110,return Response.ok(stream).
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,112,build();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryService.java,115,JSONObject object = new JSONObject();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,215,private static final String REQUEST_PROGRESS_PERCENT_ID = "Upgrade/progress_percent";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,462,setResourceProperty(r, REQUEST_PROGRESS_PERCENT_ID, calc.getPercent(), requestPropertyIds);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryResourceManager.java,118,public SavedQuery update(SavedQuery newObject, String id) throws ItemNotFound {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryResourceManager.java,119,SavedQuery savedQuery = super.update(newObject, id);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryResourceManager.java,122,emptyShortQueryField(savedQuery);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/savedQueries/SavedQueryResourceManager.java,123,return savedQuery;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,81,private static final Set<String> PK_PROPERTY_IDS = new HashSet<String>(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,87,private static final Set<String> PROPERTY_IDS = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,92,private static final Map<Resource.Type, String> KEY_PROPERTY_IDS = new HashMap<Resource.Type, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,159,Set<Resource> results = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,221,Set<Long> targetIds = new HashSet<Long>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,313,alertStateSet = new HashSet<AlertState>(alertStates.size());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,335,Set<AlertGroupEntity> groups = new HashSet<AlertGroupEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,336,List<Long> ids = new ArrayList<Long>(groupIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,422,alertStateSet = new HashSet<AlertState>(alertStates.size());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,433,Set<AlertGroupEntity> groups = new HashSet<AlertGroupEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,434,List<Long> ids = new ArrayList<Long>(groupIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,442,Set<AlertGroupEntity> groups = new HashSet<AlertGroupEntity>(s_dao.findAllGroups());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,489,List<AlertGroup> groups = new ArrayList<AlertGroup>(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,518,Map<String, Object> normalizedMap = new HashMap<String, Object>(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,110,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,129,new HashSet<String>(Arrays.asList(new String[]{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,171,Set<Resource> resources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,173,final Set<ServiceComponentHostRequest> requests = new HashSet<ServiceComponentHostRequest>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,206,Map<String,List<ServiceComponentHostResponse>> serviceToComponentMap = new HashMap<String,List<ServiceComponentHostResponse>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,268,Map<String, Map<String, String>> configurations = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,269,Map<String, Long> configVersions = new TreeMap<String, Long>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,271,Map<String, Map<String, Map<String, String>>> configurationAttributes = new TreeMap<String, Map<String, Map<String, String>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,283,Map<String, String> props = new HashMap<String, String>(clusterConfig.getProperties());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,290,Map<String, Map<String, String>> configTags = new HashMap<String,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,291,Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,312,Map<String, Map<String, String>> attrs = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,359,TreeMap<String, String> hostLevelParams = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,385,new ArrayList<ServiceOsSpecific.Package>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,415,Map<String, Object> commandParams = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,416,List<Map<String, String>> xmlConfigs = new LinkedList<Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,417,List<Map<String, String>> envConfigs = new LinkedList<Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,418,List<Map<String, String>> propertiesConfigs = new LinkedList<Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,422,Map<String, String> fileDict = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,438,Map<String, Object> jsonContent = new TreeMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,919,List<ServiceOsSpecific> foundedOSSpecifics = new ArrayList<ServiceOsSpecific>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,69,case ViewInstance:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,70,return new ViewInstanceResourceProvider();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,97,case AlertTarget:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,98,return new AlertTargetResourceProvider();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,21,import com.google.common.base.Strings;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,22,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,47,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,48,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,49,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,50,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,51,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,52,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,53,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,93,private static Map<Resource.Type, String> keyPropertyIds = new HashMap<Resource.Type, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,103,private static Set<String> propertyIds = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,158,Set<Resource> resources    = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,228,return new HashSet<String>(keyPropertyIds.values());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,264,Map<String, String> applicationData = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,368,Map<String, String> instanceProperties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,403,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,404,ViewRegistry       viewRegistry   = ViewRegistry.getInstance();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,405,ViewInstanceEntity instanceEntity = toEntity(properties, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,407,ViewEntity viewEntity = instanceEntity.getViewEntity();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,408,String     viewName   = viewEntity.getCommonName();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,409,String     version    = viewEntity.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,410,ViewEntity view       = viewRegistry.getDefinition(viewName, version);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,412,if ( view == null ) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,413,throw new IllegalStateException("The view " + viewName + " is not registered.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,417,if (!view.isDeployed()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,418,throw new IllegalStateException("The view " + viewName + " is not loaded.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,421,if (viewRegistry.instanceExists(instanceEntity)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,422,throw new DuplicateResourceException("The instance " + instanceEntity.getName() + " already exists.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,424,viewRegistry.installViewInstance(instanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,426,throw new AmbariException("Caught exception trying to create view instance.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,429,throw new IllegalArgumentException(e.getMessage(), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,442,ViewInstanceEntity instance = toEntity(properties, true);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,443,ViewEntity         view     = instance.getViewEntity();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,445,if (includeInstance(view.getCommonName(), view.getVersion(), instance.getInstanceName(), false)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,446,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,447,ViewRegistry.getInstance().updateViewInstance(instance);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,448,ViewRegistry.getInstance().updateView(instance);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,450,throw new AmbariException("Caught exception trying to update view instance.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,453,throw new IllegalArgumentException(e.getMessage(), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,466,Set<String>  requestedIds = getRequestPropertyIds(PropertyHelper.getReadRequest(), predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,467,ViewRegistry viewRegistry = ViewRegistry.getInstance();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,469,Set<ViewInstanceEntity> viewInstanceEntities = new HashSet<ViewInstanceEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,471,for (ViewEntity viewEntity : viewRegistry.getDefinitions()){
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,473,if (viewEntity.isDeployed()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,474,for (ViewInstanceEntity viewInstanceEntity : viewRegistry.getInstanceDefinitions(viewEntity)){
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,475,Resource resource = toResource(viewInstanceEntity, requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,476,if (predicate == null || predicate.evaluate(resource)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,477,if (includeInstance(viewInstanceEntity, false)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,478,viewInstanceEntities.add(viewInstanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,484,for (ViewInstanceEntity viewInstanceEntity : viewInstanceEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,485,viewRegistry.uninstallViewInstance(viewInstanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewInstanceResourceProvider.java,487,return null;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,292,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,293,if (this == o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,294,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,296,if (o == null || getClass() != o.getClass()) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,297,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,300,RepositoryVersionEntity that = (RepositoryVersionEntity) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,302,if (id != null ? !id.equals(that.id) : that.id != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,303,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,305,if (stack != null ? !stack.equals(that.stack) : that.stack != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,306,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,308,if (version != null ? !version.equals(that.version) : that.version != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,309,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,311,if (displayName != null ? !displayName.equals(that.displayName) : that.displayName != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,312,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,315,if (operatingSystems != null ? !operatingSystems.equals(that.operatingSystems) : that.operatingSystems != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,316,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,319,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,384,int result = id != null ? id.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,385,result = 31 * result + (stack != null ? stack.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,386,result = 31 * result + (version != null ? version.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,387,result = 31 * result + (displayName != null ? displayName.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,388,result = 31 * result + (operatingSystems != null ? operatingSystems.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,389,return result;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,19,package org.apache.ambari.server.state.svccomphost;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,22,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,23,import org.apache.ambari.server.api.services.AmbariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,24,import org.apache.ambari.server.orm.entities.HostComponentStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,25,import org.apache.ambari.server.orm.entities.HostEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,27,import org.apache.ambari.server.state.ComponentInfo;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,29,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,30,import org.apache.ambari.server.state.UpgradeState;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,40,public class ServiceComponentHostSummary {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,42,private Collection<HostComponentStateEntity> allHostComponents;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,43,private Collection<HostComponentStateEntity> haveAdvertisedVersion;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,44,private Collection<HostComponentStateEntity> waitingToAdvertiseVersion;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,45,private Collection<HostComponentStateEntity> noVersionToAdvertise;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,49,allHostComponents = host.getHostComponentStateEntities();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,50,haveAdvertisedVersion = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,51,waitingToAdvertiseVersion = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,52,noVersionToAdvertise = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,55,for (HostComponentStateEntity hostComponentStateEntity : allHostComponents) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,56,ComponentInfo compInfo = ambariMetaInfo.getComponent(
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,57,stackName, stackVersion, hostComponentStateEntity.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,58,hostComponentStateEntity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,60,if (!compInfo.isVersionAdvertised()) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,62,noVersionToAdvertise.add(hostComponentStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostSummary.java,121,return true;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,21,import java.util.Calendar;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,22,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,23,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,54,private final long delay;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,56,private T serviceResult;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,58,private final Set<Exception> errors = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,60,public AsyncCallableService(Callable<T> task, long timeout, long delay,
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,61,ScheduledExecutorService executorService) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,65,this.delay = delay;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,69,public T call() {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,71,long startTimeInMillis = Calendar.getInstance().getTimeInMillis();
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,72,LOG.info("Task execution started at: {}", startTimeInMillis);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,75,Future future = executorService.submit(task);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,77,while (!taskCompleted(future)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,78,if (!timeoutExceeded(startTimeInMillis)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,79,LOG.debug("Retrying task execution in [ {} ] milliseconds.", delay);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,80,future = executorService.schedule(task, delay, TimeUnit.MILLISECONDS);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,82,LOG.debug("Timout exceeded, cancelling task ... ");
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,84,if (!future.isDone()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,85,boolean cancelled = future.cancel(true);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,86,LOG.debug("Task cancelled: {}", cancelled);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,88,LOG.debug("Task already done.");
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,90,LOG.info("Timeout exceeded, task execution won't be retried!");
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,92,break;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,96,LOG.info("Exiting Async task execution with the result: [ {} ]", serviceResult);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,97,return serviceResult;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,100,private boolean taskCompleted(Future<T> future) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,101,boolean completed = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,102,try {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,103,LOG.debug("Retrieving task execution result ...");
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,106,T taskResult = future.get(timeout, TimeUnit.MILLISECONDS);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,109,LOG.debug("Task successfully executed: {}", taskResult);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,110,setServiceResult(taskResult);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,111,errors.clear();
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,112,completed = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,115,LOG.info("Exception during task execution: ", e);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,116,errors.add(e);
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,118,return completed;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,121,private boolean timeoutExceeded(long startTimeInMillis) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,122,return timeout < Calendar.getInstance().getTimeInMillis() - startTimeInMillis;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,125,private void setServiceResult(T serviceResult) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,126,this.serviceResult = serviceResult;
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,129,public Set<Exception> getErrors() {
ambari-server/src/main/java/org/apache/ambari/server/topology/AsyncCallableService.java,130,return errors;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,99,private static final String CLUSTER_ENV_CONFIG_TYPE_NAME = "cluster-env";
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,100,private static final String CLUSTER_CONFIG_TASK_MAX_TIME_IN_MILLIS_PROPERTY_NAME = "cluster_configure_task_timeout";
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1027,String timeoutStr = topology.getConfiguration().getPropertyValue(CLUSTER_ENV_CONFIG_TYPE_NAME,
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1028,CLUSTER_CONFIG_TASK_MAX_TIME_IN_MILLIS_PROPERTY_NAME);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1030,long timeout = 1000 * 60 * 30; // 30 minutes
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1031,long delay = 1000; //ms
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1033,if (timeoutStr != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1034,timeout = Long.parseLong(timeoutStr);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1035,LOG.debug("ConfigureClusterTask timeout set to: {}", timeout);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1037,LOG.debug("No timeout constraints found in configuration. Wired defaults will be applied.");
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1040,ConfigureClusterTask configureClusterTask = configureClusterTaskFactory.createConfigureClusterTask(topology,
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1043,AsyncCallableService<Boolean> asyncCallableService = new AsyncCallableService<>(configureClusterTask, timeout, delay,
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1044,Executors.newScheduledThreadPool(1));
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1046,executor.submit(asyncCallableService);
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,38,private static Logger LOG = LoggerFactory.getLogger(ConfigureClusterTask.class);
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,40,private ClusterConfigurationRequest configRequest;
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,41,private ClusterTopology topology;
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,52,LOG.info("TopologyManager.ConfigureClusterTask: Entering");
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,56,if (!areRequiredHostGroupsResolved(requiredHostGroups)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,57,LOG.debug("TopologyManager.ConfigureClusterTask - prerequisites for config request processing not yet " +
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,59,throw new IllegalArgumentException("TopologyManager.ConfigureClusterTask - prerequisites for config " +
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,63,try {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,64,LOG.info("TopologyManager.ConfigureClusterTask: All Required host groups are completed, Cluster " +
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,66,configRequest.process();
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,68,LOG.error("TopologyManager.ConfigureClusterTask: " +
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,72,throw new Exception(e);
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,75,LOG.info("TopologyManager.ConfigureClusterTask: Exiting");
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,85,Collection<String> requiredHostGroups;
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,87,requiredHostGroups = configRequest.getRequiredHostGroups();
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,90,LOG.error("TopologyManager.ConfigureClusterTask: An exception occurred while attempting to determine required" +
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,92,requiredHostGroups = Collections.emptyList();
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,94,return requiredHostGroups;
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,103,private boolean areRequiredHostGroupsResolved(Collection<String> requiredHostGroups) {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,104,boolean configTopologyResolved = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,108,if (groupInfo == null || groupInfo.getHostNames().size() < groupInfo.getRequestedHostCount()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,109,configTopologyResolved = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,110,if (groupInfo != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,111,LOG.info("TopologyManager.ConfigureClusterTask areHostGroupsResolved: host group name = {} requires {} hosts to be mapped, but only {} are available.",
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,112,groupInfo.getHostGroupName(), groupInfo.getRequestedHostCount(), groupInfo.getHostNames().size());
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,114,break;
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,116,LOG.info("TopologyManager.ConfigureClusterTask areHostGroupsResolved: host group name = {} has been fully resolved, as all {} required hosts are mapped to {} physical hosts.",
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,117,groupInfo.getHostGroupName(), groupInfo.getRequestedHostCount(), groupInfo.getHostNames().size());
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,120,return configTopologyResolved;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,213,List<StatusCommand> cmds = new ArrayList<StatusCommand>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,252,Map<String, Map<String, String>> configurations = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,253,Map<String, Map<String,  Map<String, String>>> configurationAttributes = new TreeMap<String, Map<String, Map<String, String>>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/StatusCommand.java,20,import com.google.gson.annotations.SerializedName;
ambari-server/src/main/java/org/apache/ambari/server/agent/StatusCommand.java,21,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/agent/StatusCommand.java,51,private Map<String, String> commandParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/agent/StatusCommand.java,54,private Map<String, String> hostLevelParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1397,private void ensureVersionDefinitions() {
ambari-server/src/main/java/org/apache/ambari/server/events/ClusterConfigFinishedEvent.java,29,public ClusterConfigFinishedEvent(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,32,import java.util.concurrent.Executor;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,104,private final Executor taskExecutor; // executes TopologyTasks
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,105,private final boolean parallelTaskCreationEnabled;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,156,parallelTaskCreationEnabled = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,157,taskExecutor = executor;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,162,int threadPoolSize = configuration.getParallelTopologyTaskCreationThreadPoolSize();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,163,parallelTaskCreationEnabled = configuration.isParallelTopologyTaskCreationEnabled() && threadPoolSize > 1;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,164,taskExecutor = parallelTaskCreationEnabled
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,166,: executor;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,320,executor.submit(new Callable<Boolean>() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,322,public Boolean call() throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,323,ambariEventPublisher.publish(new ClusterConfigFinishedEvent(clusterName));
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,324,return Boolean.TRUE;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,875,if (parallelTaskCreationEnabled) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,876,executor.execute(new Runnable() { // do not start until cluster config done
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,878,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,879,queueHostTasks(topology, response, hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,883,queueHostTasks(topology, response, hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,895,response.executeTasks(taskExecutor, hostName, topology, ambariContext);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,1041,configurationRequest);
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTask.java,44,public ConfigureClusterTask(@Assisted ClusterTopology topology, @Assisted ClusterConfigurationRequest configRequest) {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/ConfigureClusterTaskFactory.java,28,configRequest);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractControllerResourceProvider.java,163,return new ClusterStackVersionResourceProvider(managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,600,private ActionExecutionContext getHostVersionInstallCommand(RepositoryVersionEntity repoVersion,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,109,case ClusterStackVersion:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/DefaultProviderModule.java,110,return new ClusterStackVersionResourceProvider(managementController);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,187,cnfe.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,189,return executionCommand;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,194,return executionCommand;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2226,ExecutionCommand execCmd = stage.getExecutionCommandWrapper(scHost.getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2227,scHost.getServiceComponentName()).getExecutionCommand();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2477,if ((execCmd != null) && (execCmd.getConfigurationTags().containsKey("cluster-env"))) {
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,819,if (identity.getReference() != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,820,referencedIdentity = getReferencedIdentityDescriptor(identity.getReference());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,823,referencedIdentity = getReferencedIdentityDescriptor(identity.getName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,229,String hostName = (String) properties.get(HostResourceProvider.HOST_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryVersionResourceProvider.java,126,REPOSITORY_VERSION_STACK_SERVICES);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackServiceDirectory.java,102,return stackName + versionString + serviceName + "ServiceAdvisor";
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4285,final RepositoryResponse response = new RepositoryResponse(repository.getBaseUrl(), osType, repository.getRepositoryId(), repository.getName(), "", "", "");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4313,repo.getRepoId(), repo.getRepoName(), repo.getMirrorsList(),
ambari-server/src/main/java/org/apache/ambari/server/controller/RepositoryResponse.java,38,String repoName, String mirrorsList, String defaultBaseUrl, String latestBaseUrl) {
ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java,181,return Objects.hashCode(baseUrl, osType, repoId, repoName, mirrorsList, defaultBaseUrl, latestBaseUrl, ambariManagedRepositories);
ambari-server/src/main/java/org/apache/ambari/server/state/RepositoryInfo.java,187,getRepoName(), getMirrorsList(), getDefaultBaseUrl(), getLatestBaseUrl());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,22,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,30,import org.apache.ambari.server.Role;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,31,import org.apache.ambari.server.RoleCommand;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,33,import org.apache.ambari.server.controller.internal.PageRequestImpl;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,34,import org.apache.ambari.server.controller.internal.RequestImpl;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,35,import org.apache.ambari.server.controller.internal.SortRequestImpl;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,36,import org.apache.ambari.server.controller.internal.TaskResourceProvider;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,37,import org.apache.ambari.server.controller.spi.PageRequest;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,38,import org.apache.ambari.server.controller.spi.Predicate;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,39,import org.apache.ambari.server.controller.spi.SortRequest;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,40,import org.apache.ambari.server.controller.spi.SortRequestProperty;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,41,import org.apache.ambari.server.controller.utilities.PredicateBuilder;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,44,import org.apache.ambari.server.orm.entities.HostRoleCommandEntity;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,75,private static List<SortRequestProperty> sortRequestProperties =
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,76,Collections.singletonList(new SortRequestProperty(TaskResourceProvider.TASK_START_TIME_PROPERTY_ID, SortRequest.Order.DESC));
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,77,private static SortRequest sortRequest = new SortRequestImpl(sortRequestProperties);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,78,private static final PageRequestImpl PAGE_REQUEST = new PageRequestImpl(PageRequest.StartingPoint.End, 1000, 0, null, null);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,79,private static final RequestImpl REQUEST = new RequestImpl(null, null, null, null, sortRequest, PAGE_REQUEST);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,123,List<HostRoleCommandEntity> commands = hostRoleCommandDAO.findAll(REQUEST, PREDICATE);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,126,Map<Role, HostRoleCommandEntity> latestTimestamps = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,127,for (HostRoleCommandEntity command : commands) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,128,Role role = command.getRole();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,131,if (!latestTimestamps.containsKey(role)) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,132,latestTimestamps.put(role, command);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,137,for (Map.Entry<String, Long> serviceEntry : lastServiceConfigUpdates.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,138,String serviceName = serviceEntry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,139,Long configTimestamp = serviceEntry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,141,boolean serviceCheckWasExecuted = false;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,142,for (HostRoleCommandEntity command : latestTimestamps.values()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,144,serviceCheckWasExecuted = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,145,Long serviceCheckTimestamp = command.getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,147,if (serviceCheckTimestamp < configTimestamp) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,148,failedServiceNames.add(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,149,LOG.info("Service {} latest config change is {}, latest service check executed at {}",
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,150,serviceName,
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,151,DATE_FORMAT.format(new Date(configTimestamp)),
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,152,DATE_FORMAT.format(new Date(serviceCheckTimestamp)));
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,157,if (!serviceCheckWasExecuted) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,159,LOG.info("Service {} service check has never been executed", serviceName);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,225,Map<Long, HostRoleCommandStatusSummaryDTO> map = new HashMap<Long, HostRoleCommandStatusSummaryDTO>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,283,List<HostRoleCommandEntity> result = new ArrayList<HostRoleCommandEntity>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,285,List<List<Long>> lists = Lists.partition(new ArrayList<Long>(taskIds), configuration.getTaskIdListLimit());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,353,List<Long> result = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,355,List<List<Long>> lists = Lists.partition(new ArrayList<Long>(taskIds), configuration.getTaskIdListLimit());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,413,Map<String, List<HostRoleCommandEntity>> hostCommands = new HashMap<String, List<HostRoleCommandEntity>>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,652,List<HostRoleCommandEntity> managedList = new ArrayList<HostRoleCommandEntity>(entities.size());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,838,JpaSortBuilder<HostRoleCommandEntity> sortBuilder = new JpaSortBuilder<HostRoleCommandEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,106,private Collection<String> hostsToIgnore = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,107,private final List<HostImpl> availableHosts = new LinkedList<HostImpl>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,108,private final Map<String, LogicalRequest> reservedHosts = new HashMap<String, LogicalRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,109,private final Map<Long, LogicalRequest> allRequests = new HashMap<Long, LogicalRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,111,private final Collection<LogicalRequest> outstandingRequests = new ArrayList<LogicalRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,113,private Map<Long, ClusterTopology> clusterTopologyMap = new HashMap<Long, ClusterTopology>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,642,Collection<LogicalRequest> matchingRequests = new ArrayList<LogicalRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,659,Collection<StageEntity> stages = new ArrayList<StageEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,674,Collection<HostRoleCommand> tasks = new ArrayList<HostRoleCommand>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,697,List<RequestStatusResponse> requestStatusResponses = new ArrayList<RequestStatusResponse>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,723,Map<String, Collection<String>> hostComponentMap = new HashMap<String, Collection<String>>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,743,hostComponents = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,320,private String getMinimalUpgradeCatalogVersion(){
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,328,return candidateCatalogs.iterator().next().getTargetVersion();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,411,String minimalRequiredUpgradeVersion = schemaUpgradeHelper.getMinimalUpgradeCatalogVersion();
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,622,throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,625,String statement = dbmsHelper.getAlterColumnStatement(tableName,
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,626,columnInfo);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,21,import org.apache.ambari.server.api.services.AmbariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,22,import org.apache.ambari.server.metadata.ActionMetadata;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,23,import org.apache.ambari.server.orm.dao.MetainfoDAO;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,24,import org.apache.ambari.server.orm.entities.MetainfoEntity;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,25,import org.apache.ambari.server.state.stack.LatestRepoCallable;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,26,import org.apache.ambari.server.state.stack.OsFamily;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,28,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,53,private OsFamily osFamily;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,58,private LatestRepoQueryExecutor repoUpdateExecutor = new LatestRepoQueryExecutor();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,76,this.osFamily = osFamily;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,112,public void registerRepoUpdateTask(String url, StackModule stack) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,113,repoUpdateExecutor.addTask(new LatestRepoCallable(url,
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,114,new File(stack.getStackDirectory().getRepoDir()), stack.getModuleInfo(), osFamily));
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,142,private Collection<LatestRepoCallable> tasks = new ArrayList<LatestRepoCallable>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,147,Collection<Future<Void>> futures = new ArrayList<Future<Void>>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,151,private ExecutorService executor = Executors.newSingleThreadExecutor(new ThreadFactory() {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,164,public void addTask(LatestRepoCallable task) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,165,tasks.add(task);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,172,for (LatestRepoCallable task : tasks) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,173,futures.add(executor.submit(task));
ambari-server/src/main/java/org/apache/ambari/server/stack/StackContext.java,184,for (Future<Void> f : futures) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,105,private Map<String, ConfigurationModule> configurationModules = new HashMap<String, ConfigurationModule>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,110,private Map<String, ServiceModule> serviceModules = new HashMap<String, ServiceModule>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,115,private Map<String, ExtensionModule> extensionModules = new HashMap<String, ExtensionModule>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,320,List<String> removedServices = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,615,Collection<ServiceModule> serviceModules = new ArrayList<ServiceModule>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,767,new HashMap<PropertyDependencyInfo, Set<PropertyDependencyInfo>>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,783,new HashSet<PropertyDependencyInfo>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,981,tmp = new ArrayList<Grouping>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1138,stackContext.registerRepoUpdateTask(rxml.getLatestURI(), this);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,1294,private Set<String> errorSet = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,18,package org.apache.ambari.server.state.stack;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,20,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,21,import java.io.FileReader;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,22,import java.io.InputStreamReader;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,23,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,24,import java.net.URI;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,25,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,27,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,28,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,29,import java.util.concurrent.Callable;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,31,import org.apache.ambari.server.controller.internal.URLStreamProvider;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,32,import org.apache.ambari.server.state.RepositoryInfo;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,33,import org.apache.ambari.server.state.StackId;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,34,import org.apache.ambari.server.state.StackInfo;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,35,import org.apache.ambari.server.state.repository.VersionDefinitionXml;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,36,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,37,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,38,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,40,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,41,import com.google.gson.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,47,public class LatestRepoCallable implements Callable<Void> {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,48,private static final int LOOKUP_CONNECTION_TIMEOUT = 2000;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,51,private final static Logger LOG = LoggerFactory.getLogger(LatestRepoCallable.class);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,53,private String sourceUri = null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,54,private File stackRepoFolder = null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,55,private StackInfo stack = null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,56,private OsFamily os_family;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,58,public LatestRepoCallable(String latestSourceUri, File stackRepoFolder, StackInfo stack, OsFamily os_family) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,59,this.sourceUri = latestSourceUri;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,60,this.stackRepoFolder = stackRepoFolder;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,61,this.stack = stack;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,62,this.os_family = os_family;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,66,public Void call() throws Exception {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,68,Type type = new TypeToken<Map<String, Map<String, Object>>>(){}.getType();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,69,Gson gson = new Gson();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,71,Map<String, Map<String, Object>> latestUrlMap = null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,73,try {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,74,if (sourceUri.startsWith("http")) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,76,URLStreamProvider streamProvider = new URLStreamProvider(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,77,LOOKUP_CONNECTION_TIMEOUT, LOOKUP_READ_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,78,null, null, null);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,80,LOG.info("Loading latest URL info for stack {}-{} from {}", stack.getName(),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,81,stack.getVersion(), sourceUri);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,82,latestUrlMap = gson.fromJson(new InputStreamReader(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,83,streamProvider.readFrom(sourceUri)), type);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,85,File jsonFile = null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,86,if (sourceUri.charAt(0) == '.') {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,87,jsonFile = new File(stackRepoFolder, sourceUri);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,89,jsonFile = new File(sourceUri);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,92,if (jsonFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,94,stack.getVersion(), jsonFile);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,95,latestUrlMap = gson.fromJson(new FileReader(jsonFile), type);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,99,LOG.info("Could not load the URI for stack {}-{} from {}, ({}).  Using default repository values",
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,100,stack.getName(), stack.getVersion(), sourceUri, e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,101,throw e;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,105,if (null != latestUrlMap) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,106,for (RepositoryInfo ri : stack.getRepositories()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,107,if (latestUrlMap.containsKey(ri.getRepoId())) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,109,Map<String, Object> valueMap = latestUrlMap.get(ri.getRepoId());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,111,if (valueMap.containsKey("latest")) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,114,Map<String, String> osMap = (Map<String, String>) valueMap.get("latest");
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,116,String baseUrl = resolveOsUrl(ri.getOsType(), osMap);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,117,if (null != baseUrl) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,121,String repo_file_format;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,123,if(os_family.isUbuntuFamily(ri.getOsType())) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,124,repo_file_format = "list";
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,126,repo_file_format = "repo";
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,129,String repoFileName = stack.getName().toLowerCase() + "." + repo_file_format;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,130,int idx = baseUrl.toLowerCase().indexOf(repoFileName);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,132,if (-1 != idx && baseUrl.toLowerCase().endsWith(repoFileName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,133,baseUrl = baseUrl.substring(0, idx);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,136,if ('/' == baseUrl.charAt(baseUrl.length()-1)) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,137,baseUrl = baseUrl.substring(0, baseUrl.length()-1);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,140,ri.setLatestBaseUrl(baseUrl);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,141,if (ri.getBaseUrl() != null && !ri.isBaseUrlFromSaved()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,143,ri.setBaseUrl(baseUrl);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,151,StackId stackId = new StackId(stack);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,152,if (!latestUrlMap.containsKey(stackId.toString())) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,153,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,156,Map<String, Object> map = latestUrlMap.get(stackId.toString());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,158,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,183,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,196,Set<String> oses = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,197,for (RepositoryInfo ri : stack.getRepositories()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,198,if (null != os_family.find(ri.getOsType())) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,199,oses.add(os_family.find(ri.getOsType()));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,203,VersionDefinitionXml.Merger merger = new VersionDefinitionXml.Merger();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,205,for (Entry<String, String> versionEntry : osMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,207,String osFamily = os_family.find(versionEntry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,210,if (null == osFamily) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,211,String alias = os_family.getAliases().get(versionEntry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,212,if (null != alias) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,213,osFamily = os_family.find(alias);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,218,if (null == osFamily || !oses.contains(osFamily)) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,219,LOG.info("Stack {} cannot resolve OS {} to the supported ones: {}. Family: {}",
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,220,stackId, versionEntry.getKey(), StringUtils.join(oses, ','), osFamily);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,221,continue;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,224,String uriString = versionEntry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,226,if ('.' == uriString.charAt(0)) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,227,uriString = new File(stackRepoFolder, uriString).toURI().toString();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,230,try {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,231,URI uri = new URI(uriString);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,235,merger.add(version, xml);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,237,LOG.warn("Could not load version definition for {} identified by {}. {}",
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,238,stackId, uriString, e.getMessage(), e);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,242,return merger.merge();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,253,private String resolveOsUrl(String os, Map<String, String> osMap) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,257,return osMap.get(os);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,260,Set<String> possibleTypes = os_family.findTypes(os);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,262,for (String type : possibleTypes) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,264,return osMap.get(type);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,267,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2714,atlasPropsMap.put("atlas.graph.storage.hostname", new MultipleHostTopologyUpdater("HBASE_MASTER"));
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,123,List<AlertDefinitionEntity> entities = m_dao.findByServiceComponent(
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,124,cluster.getClusterId(), Services.AMBARI.name(),
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,125,Components.AMBARI_SERVER.name());
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,127,for (AlertDefinitionEntity entity : entities) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,133,SourceType sourceType = entity.getSourceType();
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,134,if (sourceType != SourceType.SERVER) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,135,continue;
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,156,List<AlertDefinitionEntity> entities = m_dao.findByServiceComponent(
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,157,cluster.getClusterId(), Services.AMBARI.name(),
ambari-server/src/main/java/org/apache/ambari/server/state/services/AmbariServerAlertService.java,158,Components.AMBARI_SERVER.name());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2604,for (ClusterConfigEntity configEntity : serviceConfigEntity.getClusterConfigEntities()) {
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,69,public Response listdir(@QueryParam("path") String path) {
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,72,response.put("files", getApi().fileStatusToJSON(getApi().listdir(path)));
contrib/views/commons/src/main/java/org/apache/ambari/view/commons/hdfs/FileOperationService.java,73,response.put("meta", getApi().fileStatusToJSON(getApi().getFileStatus(path)));
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,54,private final Map<String, String> authParams;
ambari-server/src/main/java/org/apache/ambari/server/controller/ConfigGroupRequest.java,37,String tag, String description, Set<String> hosts,
ambari-server/src/main/java/org/apache/ambari/server/controller/ConfigGroupRequest.java,38,Map<String, Config> configs) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,498,private synchronized Set<ConfigGroupResponse> createConfigGroups
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,499,(Set<ConfigGroupRequest> requests) throws AmbariException, AuthorizationException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,506,Set<ConfigGroupResponse> configGroupResponses = new
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,507,HashSet<ConfigGroupResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,511,.getConfigGroupFactory();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,554,String serviceName = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,555,if (request.getConfigs() != null && !request.getConfigs().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,641,ConfigGroupRequest request = new ConfigGroupRequest(
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,642,null, clusterName, absoluteGroupName, service, "Host Group Configuration",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,54,import org.apache.ambari.server.controller.spi.Request;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,86,private static final String CLUSTER_NAME_PROPERTY_ID                  = PropertyHelper.getPropertyId("Clusters", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,87,private static final String HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID   = PropertyHelper.getPropertyId("HostRoles", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,88,private static final String HOST_COMPONENT_HOST_NAME_PROPERTY_ID      = PropertyHelper.getPropertyId("HostRoles", "host_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,89,private static final String HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID = PropertyHelper.getPropertyId("HostRoles", "component_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,259,private final Map<String, ConcurrentMap<String, ConcurrentMap<String, String>> >jmxPortMap =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,260,Collections.synchronizedMap(new HashMap<String, ConcurrentMap<String, ConcurrentMap<String, String>>>());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,497,ConcurrentMap<String, ConcurrentMap<String, String>> clusterJmxPorts = jmxPortMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,498,if (clusterJmxPorts == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,500,clusterJmxPorts = jmxPortMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,501,if (clusterJmxPorts == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,502,clusterJmxPorts = new ConcurrentHashMap<String, ConcurrentMap<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,831,ResourceProvider provider = getResourceProvider(Resource.Type.Cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,833,Set<String> propertyIds = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,834,propertyIds.add(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,836,Map<String, String> requestInfoProperties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,837,requestInfoProperties.put(ClusterResourceProvider.GET_IGNORE_PERMISSIONS_PROPERTY_ID, "true");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,839,Request request = PropertyHelper.getReadRequest(propertyIds,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,840,requestInfoProperties, null, null, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,842,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,843,jmxPortMap.clear();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,844,Set<Resource> clusters = provider.getResources(request, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,846,clusterHostComponentMap = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,847,clusterGangliaCollectorMap = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,849,for (Resource cluster : clusters) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,851,String clusterName = (String) cluster.getPropertyValue(CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,854,provider = getResourceProvider(Resource.Type.HostComponent);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,856,request = PropertyHelper.getReadRequest(HOST_COMPONENT_HOST_NAME_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,857,HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,859,Predicate predicate = new PredicateBuilder().property(HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID).
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,860,equals(clusterName).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,862,Set<Resource> hostComponents = provider.getResources(request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,863,Map<String, String> hostComponentMap = clusterHostComponentMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,865,if (hostComponentMap == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,866,hostComponentMap = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,867,clusterHostComponentMap.put(clusterName, hostComponentMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,870,for (Resource hostComponent : hostComponents) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,871,String componentName = (String) hostComponent.getPropertyValue(HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,872,String hostName = (String) hostComponent.getPropertyValue(HOST_COMPONENT_HOST_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,888,if (LOG.isErrorEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,889,LOG.error("Caught UnsupportedPropertyException while trying to get the host mappings.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,891,throw new SystemException("An exception occurred while initializing the host mappings: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,893,if (LOG.isErrorEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,894,LOG.error("Caught NoSuchResourceException exception while trying to get the host mappings.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,896,throw new SystemException("An exception occurred while initializing the host mappings: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,898,if (LOG.isErrorEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,899,LOG.error("Caught NoSuchParentResourceException exception while trying to get the host mappings.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,901,throw new SystemException("An exception occurred while initializing the host mappings: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,599,return serviceComponentHosts.get(serviceName).get(serviceComponentName).get(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,600,hostname);
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/InstallHostTask.java,54,List<ShortTaskStatus> underlyingTasks = response.getTasks();
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/InstallHostTask.java,55,for (ShortTaskStatus task : underlyingTasks) {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/InstallHostTask.java,57,String component = task.getRole();
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/InstallHostTask.java,58,Long logicalInstallTaskId = hostRequest.getLogicalTasksForTopologyTask(this).get(component);
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/InstallHostTask.java,59,if(logicalInstallTaskId == null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/InstallHostTask.java,60,LOG.info("Skipping physical install task registering, because component {} cannot be found", task.getRole());
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/InstallHostTask.java,61,continue;
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/InstallHostTask.java,64,long taskId = task.getTaskId();
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/InstallHostTask.java,65,hostRequest.registerPhysicalTaskId(logicalInstallTaskId, taskId);
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/StartHostTask.java,52,List<ShortTaskStatus> underlyingTasks = response.getTasks();
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/StartHostTask.java,53,for (ShortTaskStatus task : underlyingTasks) {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/StartHostTask.java,55,String component = task.getRole();
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/StartHostTask.java,56,Long logicalStartTaskId = hostRequest.getLogicalTasksForTopologyTask(this).get(component);
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/StartHostTask.java,57,if(logicalStartTaskId == null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/StartHostTask.java,58,LOG.info("Skipping physical start task registering, because component {} cannot be found", task.getRole());
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/StartHostTask.java,59,continue;
ambari-server/src/main/java/org/apache/ambari/server/topology/tasks/StartHostTask.java,62,hostRequest.registerPhysicalTaskId(logicalStartTaskId, task.getTaskId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,575,cluster, managementController, ami, stackId, serviceNames, perOsRepos, stage, host);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,606,final List<RepositoryEntity> repoInfo = perOsRepos.get(osFamily);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,607,if (repoInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,608,throw new SystemException(String.format("Repositories for os type %s are " +
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,610,osFamily, repoVersion.getVersion(), stackId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,58,import org.apache.ambari.server.orm.entities.RepositoryEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,387,List<OperatingSystemEntity> operatingSystems = repoVersionEnt.getOperatingSystems();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,388,Map<String, List<RepositoryEntity>> perOsRepos = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,389,for (OperatingSystemEntity operatingSystem : operatingSystems) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,390,perOsRepos.put(operatingSystem.getOsType(), operatingSystem.getRepositories());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,395,final List<RepositoryEntity> repoInfo = perOsRepos.get(osFamily);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,396,if (repoInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,242,if (!AuthorizationHelper.isAuthorized(resourceType, resourceId, permissions)) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,174,checkForNotMappedConfigsToCluster();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,228,static void checkForNotMappedConfigsToCluster() {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,229,LOG.info("Checking for configs not mapped to any cluster");
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,231,String GET_NOT_MAPPED_CONFIGS_QUERY = "select type_name from clusterconfig where type_name not in (select type_name from clusterconfigmapping)";
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,232,Set<String> nonSelectedConfigs = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,233,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,234,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,236,ensureConnection();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,238,try {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,239,statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,240,rs = statement.executeQuery(GET_NOT_MAPPED_CONFIGS_QUERY);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,241,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,242,while (rs.next()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,243,nonSelectedConfigs.add(rs.getString("type_name"));
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,246,if (!nonSelectedConfigs.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,247,warning("You have config(s): {} that is(are) not mapped (in clusterconfigmapping table) to any cluster!",
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,248,nonSelectedConfigs);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,251,LOG.error("Exception occurred during check for not mapped configs to cluster procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,253,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,254,try {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,255,rs.close();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,257,LOG.error("Exception occurred during result set closing procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,261,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,262,try {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,263,statement.close();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,265,LOG.error("Exception occurred during statement closing procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,280,String GET_CONFIGS_SELECTED_MORE_THAN_ONCE_QUERY = "select c.cluster_name, ccm.type_name from clusterconfigmapping ccm " +
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,299,error("You have config(s), in cluster {}, that is(are) selected more than once in clusterconfigmapping table: {}",
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,305,LOG.error("Exception occurred during check for config selected more than ones procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,354,LOG.error("Exception occurred during check for host without state procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,499,LOG.error("Exception occurred during check for same count of host component states and host component desired states: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,732,LOG.error("Exception occurred during checking MySQL engine to be innodb: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,940,LOG.info("Getting services which has mapped configs which are not selected in clusterconfigmapping");
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,971,LOG.error("Exception occurred during complex service check procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,973,LOG.error("Exception occurred during complex service check procedure: ", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,260,null, null, null, null, requestStageContainer, handler);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,584,request.getTag(), request.getDescription(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,587,configGroup.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2085,private void deleteService(Service service) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1083,if(conf == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1084,LOG.error("Config inconsistency exists:"+
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,403,if (!ex.getMessage().contains("Cannot obtain block length for")) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,41,public static void putStringToFile(HdfsApi hdfs, String filePath, String content) throws HdfsApiException {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,43,try {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,45,stream = hdfs.create(filePath, true);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,46,stream.write(content.getBytes());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsUtil.java,47,stream.close();
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,136,StackId stackId = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,269,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/metadata/RoleCommandOrder.java,270,LOG.debug("Adding dependency for " + restartPair + ", " +
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,237,public void resubmitTasks(List<Long> taskIds);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,807,public void resubmitTasks(List<Long> taskIds) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,145,List<CommandReport> reportsToProcess = new ArrayList<CommandReport>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,257,public void resubmitTasks(List<Long> taskIds) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,258,db.resubmitTasks(taskIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1722,actionManager.resubmitTasks(taskIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,431,List<RepositoryVersionEntity> entities = s_repoVersionDAO.findByStack(entity.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DeconstructedPrincipal.java,38,class DeconstructedPrincipal {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,44,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.VERSION;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,431,throw new IllegalArgumentException("Cluster name should be provided" +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,436,LOG.debug("Received a createCluster request"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,438,+ ", request=" + request);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,443,throw new IllegalArgumentException("Stack information should be"
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,444,+ " provided when creating a cluster");
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,58,private String repositoryVersion = null;
ambari-server/src/main/java/org/apache/ambari/server/api/predicate/QueryParser.java,110,expression.setRightOperand(expression.getRightOperand().toString().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/api/predicate/operators/InOperator.java,50,throw new InvalidQueryException("IN operator is missing a required right operand.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,110,List<String> hosts = (List<String>) getRequestProperty(request, HOST_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,111,List<String> services = (List<String>) getRequestProperty(request, SERVICES_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,21,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,63,private Set<Rule> setRules = new TreeSet<Rule>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,108,: Collections.unmodifiableSet(new HashSet<String>(additionalRealms));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,118,copy.setRules = new TreeSet<Rule>(setRules);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,129,public void addRules(String authToLocalRules) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,136,setRules.add(rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,160,public void addRule(String principal, String localUsername) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,265,return new Rule(principal, componentCount, 1, String.format(
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,267,principal.getComponent(1), principal.getRealm(), localUser));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,278,String caseSensitivityRule = caseInsensitive ? "/L" : "";
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,280,return new Rule(new Principal(String.format(".*@%s", realm)),
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,281,1, 1, String.format("RULE:[1:$1@$0](.*@%s)s/@.*//" + caseSensitivityRule, realm));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,291,return new Rule(rule.startsWith("RULE:") ? rule : String.format("RULE:%s", rule));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,304,collection = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,326,Pattern.compile("RULE:\\s*\\[\\s*(\\d)\\s*:\\s*(.+?)(?:@(.+?))??\\s*\\]\\s*\\((.+?)\\)\\s*s/(.*?)/(.*?)/([a-zA-Z]*)(?:.|\n)*");
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,331,private Principal principal;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,336,private String rule;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,341,private int expectedComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,346,private int matchComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,356,public Rule(Principal principal, int expectedComponentCount, int matchComponentCount, String rule) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,357,this.principal = principal;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,358,this.expectedComponentCount = expectedComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,359,this.matchComponentCount = matchComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,360,this.rule = rule;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,368,public Rule(String rule) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,374,expectedComponentCount = Integer.valueOf(m.group(1));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,377,matchComponentCount = (matchPattern.startsWith("$") ?
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,378,matchPattern.substring(1) :
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,379,matchPattern).
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,380,split("\\$").length;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,381,String patternRealm = m.group(3);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,382,principal = new Principal(m.group(4));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,386,if (patternRealm != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,387,this.rule = String.format("RULE:[%d:%s@%s](%s)s/%s/%s/%s",
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,388,expectedComponentCount, matchPattern, patternRealm,
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,389,principal.toString(), replacementPattern, replacementReplacement, replacementModifier);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,391,this.rule = String.format("RULE:[%d:%s](%s)s/%s/%s/%s",
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,392,expectedComponentCount, matchPattern,
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,393,principal.toString(), replacementPattern, replacementReplacement, replacementModifier);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,402,public Principal getPrincipal() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,403,return principal;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,412,public int getExpectedComponentCount() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,413,return expectedComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,422,public int getMatchComponentCount() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,423,return matchComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,433,public String toString() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,434,return rule;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,453,int retVal = expectedComponentCount - other.getExpectedComponentCount();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,456,retVal = other.getMatchComponentCount() - matchComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,459,Principal otherPrincipal = other.getPrincipal();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,460,if (principal.equals(otherPrincipal)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,461,retVal = rule.compareTo(other.rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,464,String realm = principal.getRealm();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,465,String otherRealm = otherPrincipal.getRealm();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,469,for (int i = 1; i <= matchComponentCount; i++) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,471,String component1 = principal.getComponent(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,472,String otherComponent1 = otherPrincipal.getComponent(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,488,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,489,return this == o || o instanceof Rule && rule.equals(((Rule) o).rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,493,public int hashCode() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,494,return rule.hashCode();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,885,final String rmHostPropertyName = "yarn.resourcemanager.hostname." + resourceManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,886,yarnSiteUpdatersForAvailability.put(rmHostPropertyName, new SingleHostTopologyUpdater("RESOURCEMANAGER"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,888,final String rmHTTPAddress = "yarn.resourcemanager.webapp.address." + resourceManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,889,yarnSiteUpdatersForAvailability.put(rmHTTPAddress, new SingleHostTopologyUpdater("RESOURCEMANAGER"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,891,final String rmHTTPSAddress = "yarn.resourcemanager.webapp.https.address." + resourceManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,892,yarnSiteUpdatersForAvailability.put(rmHTTPSAddress, new SingleHostTopologyUpdater("RESOURCEMANAGER"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1327,private String component;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,441,for (RepositoryVersionEntity candidate : entities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,442,String baseVersion = candidate.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,449,matching.add(candidate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,453,matching.add(candidate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,464,Set<String> versions= new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,465,for (RepositoryVersionEntity match : matching) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,466,versions.add(match.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,469,throw new IllegalArgumentException(String.format("More than one repository matches patch %s: %s",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,473,RepositoryVersionEntity parent = matching.get(0);
ambari-server/src/main/java/org/apache/ambari/server/metadata/CachedRoleCommandOrderProvider.java,21,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/metadata/CachedRoleCommandOrderProvider.java,49,private Map<Integer, RoleCommandOrder> rcoMap = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,471,groups.add(groupHolder);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,61,private Set<String> priorityServices = new LinkedHashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,68,private Set<String> excludeServices = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,128,List<StageWrapper> result = new ArrayList<StageWrapper>(stageWrappers);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,135,Set<String> clusterServices = new LinkedHashSet<String>(serviceMap.keySet());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,140,StageWrapper wrapper = new StageWrapper(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,141,StageWrapper.Type.SERVICE_CHECK,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,143,new TaskWrapper(service, "", Collections.<String>emptySet(),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,144,new ServiceCheckTask()));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,159,StageWrapper wrapper = new StageWrapper(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,160,StageWrapper.Type.SERVICE_CHECK,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,162,new TaskWrapper(service, "", Collections.<String>emptySet(),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,163,new ServiceCheckTask()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,77,import com.google.common.collect.ListMultimap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,350,Set<Resource> results = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,427,if (entity.getType() != RepositoryType.PATCH) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,19,package org.apache.ambari.server.controller.utilities;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,21,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,22,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,23,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,24,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,25,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,27,import java.util.Scanner;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,29,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,30,import org.apache.ambari.server.api.services.AmbariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,31,import org.apache.ambari.server.configuration.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,32,import org.apache.ambari.server.orm.dao.ClusterDAO;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,33,import org.apache.ambari.server.orm.dao.MetainfoDAO;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,34,import org.apache.ambari.server.orm.entities.ClusterConfigEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,35,import org.apache.ambari.server.orm.entities.ClusterConfigMappingEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,36,import org.apache.ambari.server.orm.entities.ClusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,37,import org.apache.ambari.server.orm.entities.ClusterServiceEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,38,import org.apache.ambari.server.orm.entities.ClusterStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,39,import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,40,import org.apache.ambari.server.orm.entities.HostComponentStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,41,import org.apache.ambari.server.orm.entities.MetainfoEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,42,import org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,43,import org.apache.ambari.server.orm.entities.ServiceDesiredStateEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,44,import org.apache.ambari.server.orm.entities.StackEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,45,import org.apache.ambari.server.state.ComponentInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,46,import org.apache.ambari.server.state.ServiceInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,47,import org.apache.ambari.server.state.StackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,48,import org.apache.ambari.server.state.StackInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,49,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,50,import org.apache.ambari.server.utils.VersionUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,51,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,52,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,54,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,55,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,60,public class DatabaseChecker {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,62,static Logger LOG = LoggerFactory.getLogger(DatabaseChecker.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,65,static Injector injector;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,66,static AmbariMetaInfo ambariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,67,static MetainfoDAO metainfoDAO;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,69,public static void checkDBConsistency() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,70,LOG.info("Checking DB consistency");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,72,boolean checkPassed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,73,if (ambariMetaInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,74,ambariMetaInfo = injector.getInstance(AmbariMetaInfo.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,77,ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,78,List<ClusterEntity> clusters = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,79,for (ClusterEntity clusterEntity: clusters) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,80,StackId stackId = new StackId(clusterEntity.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,82,Collection<ClusterServiceEntity> serviceEntities =
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,83,clusterEntity.getClusterServiceEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,84,for (ClusterServiceEntity clusterServiceEntity : serviceEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,86,ServiceDesiredStateEntity serviceDesiredStateEntity =
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,87,clusterServiceEntity.getServiceDesiredStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,88,if (serviceDesiredStateEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,89,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,90,LOG.error(String.format("ServiceDesiredStateEntity is null for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,92,clusterEntity.getClusterName(), clusterServiceEntity.getServiceName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,94,Collection<ServiceComponentDesiredStateEntity> scDesiredStateEntities =
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,95,clusterServiceEntity.getServiceComponentDesiredStateEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,96,if (scDesiredStateEntities == null ||
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,97,scDesiredStateEntities.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,98,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,99,LOG.error(String.format("serviceComponentDesiredStateEntities is null or empty for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,101,clusterEntity.getClusterName(), clusterServiceEntity.getServiceName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,103,for (ServiceComponentDesiredStateEntity scDesiredStateEnity : scDesiredStateEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,105,Collection<HostComponentDesiredStateEntity> schDesiredStateEntities =
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,106,scDesiredStateEnity.getHostComponentDesiredStateEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,107,Collection<HostComponentStateEntity> schStateEntities =
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,108,scDesiredStateEnity.getHostComponentStateEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,110,ComponentInfo componentInfo = ambariMetaInfo.getComponent(
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,111,stackId.getStackName(), stackId.getStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,112,scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,114,boolean zeroCardinality = componentInfo.getCardinality() == null
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,116,|| scDesiredStateEnity.getComponentName().equals("SECONDARY_NAMENODE"); // cardinality 0 for NameNode HA
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,118,boolean componentCheckFailed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,120,if (schDesiredStateEntities == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,121,componentCheckFailed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,122,LOG.error(String.format("hostComponentDesiredStateEntities is null for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,124,clusterEntity.getClusterName(), scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,126,componentCheckFailed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,127,LOG.error(String.format("hostComponentDesiredStateEntities is empty for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,129,clusterEntity.getClusterName(), scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,132,if (schStateEntities == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,133,componentCheckFailed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,134,LOG.error(String.format("hostComponentStateEntities is null for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,136,clusterEntity.getClusterName(), scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,138,componentCheckFailed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,139,LOG.error(String.format("hostComponentStateEntities is empty for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,141,clusterEntity.getClusterName(), scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,144,if (!componentCheckFailed &&
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,145,schDesiredStateEntities.size() != schStateEntities.size()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,146,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,147,LOG.error(String.format("HostComponentStateEntities and HostComponentDesiredStateEntities " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,150,scDesiredStateEnity.getServiceName(), scDesiredStateEnity.getComponentName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,152,checkPassed = checkPassed && !componentCheckFailed;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,157,if (checkPassed) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,158,LOG.info("DB consistency check passed.");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,160,String errorMessage = "DB consistency check failed. Run \"ambari-server start --skip-database-validation\" to skip validation.";
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,161,LOG.error(errorMessage);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,162,throw new AmbariException(errorMessage);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,166,private static boolean clusterConfigsContainTypeAndTag(Collection<ClusterConfigEntity> clusterConfigEntities,
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,167,String typeName, String tag) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,168,for (ClusterConfigEntity clusterConfigEntity : clusterConfigEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,169,if (typeName.equals(clusterConfigEntity.getType()) && tag.equals(clusterConfigEntity.getTag())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,170,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,173,return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,183,public static void checkDBConfigsConsistency() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,184,LOG.info("Checking DB configs consistency");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,186,boolean checkPassed = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,188,if (ambariMetaInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,189,ambariMetaInfo = injector.getInstance(AmbariMetaInfo.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,192,ClusterDAO clusterDAO = injector.getInstance(ClusterDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,193,List<ClusterEntity> clusters = clusterDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,194,if (clusters != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,195,for (ClusterEntity clusterEntity : clusters) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,196,Collection<ClusterConfigMappingEntity> configMappingEntities = clusterEntity.getConfigMappingEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,197,Collection<ClusterConfigEntity> clusterConfigEntities = clusterEntity.getClusterConfigEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,199,if (configMappingEntities != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,200,Map<String, Integer> selectedCountForType = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,201,for (ClusterConfigMappingEntity clusterConfigMappingEntity : configMappingEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,202,String typeName = clusterConfigMappingEntity.getType();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,203,if (clusterConfigMappingEntity.isSelected() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,204,int selectedCount = selectedCountForType.get(typeName) != null ? selectedCountForType.get(typeName) : 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,205,selectedCountForType.put(typeName, selectedCount + 1);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,208,if (!clusterConfigsContainTypeAndTag(clusterConfigEntities, typeName, clusterConfigMappingEntity.getTag())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,209,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,210,LOG.error("ClusterConfig does not contain mapping for type_name=" + typeName + " tag="
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,211,+ clusterConfigMappingEntity.getTag());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,214,if (!selectedCountForType.containsKey(typeName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,215,selectedCountForType.put(typeName, 0);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,221,Collection<ClusterServiceEntity> clusterServiceEntities = clusterEntity.getClusterServiceEntities();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,222,ClusterStateEntity clusterStateEntity = clusterEntity.getClusterStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,223,if (clusterStateEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,224,StackEntity currentStack = clusterStateEntity.getCurrentStack();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,225,StackInfo stack = ambariMetaInfo.getStack(currentStack.getStackName(), currentStack.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,227,for (ClusterServiceEntity clusterServiceEntity : clusterServiceEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,228,if (!State.INIT.equals(clusterServiceEntity.getServiceDesiredStateEntity().getDesiredState())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,229,String serviceName = clusterServiceEntity.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,230,ServiceInfo serviceInfo = ambariMetaInfo.getService(stack.getName(), stack.getVersion(), serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,231,for (String configTypeName : serviceInfo.getConfigTypeAttributes().keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,232,if (selectedCountForType.get(configTypeName) == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,233,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,234,LOG.error("ClusterConfigMapping does not contain mapping for service=" + serviceName + " type_name="
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,235,+ configTypeName);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,238,if (selectedCountForType.get(configTypeName) == 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,239,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,240,LOG.error("ClusterConfigMapping selected count is 0 for service=" + serviceName + " type_name="
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,241,+ configTypeName);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,243,checkPassed = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,244,LOG.error("ClusterConfigMapping selected count is more than 1 for service=" + serviceName
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,245,+ " type_name=" + configTypeName);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,256,if (checkPassed) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,257,LOG.info("DB configs consistency check passed.");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,259,String errorMessage = "DB configs consistency check failed. Run \"ambari-server start --skip-database-validation\" to skip validation.";
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,260,LOG.error(errorMessage);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,261,throw new AmbariException(errorMessage);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,265,public static void checkDBVersion() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,267,LOG.info("Checking DB store version");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,268,if (metainfoDAO == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,269,metainfoDAO = injector.getInstance(MetainfoDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,272,MetainfoEntity schemaVersionEntity = metainfoDAO.findByKey(Configuration.SERVER_VERSION_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,273,String schemaVersion = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,275,if (schemaVersionEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,276,schemaVersion = schemaVersionEntity.getMetainfoValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,279,Configuration conf = injector.getInstance(Configuration.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,280,File versionFile = new File(conf.getServerVersionFilePath());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,281,if (!versionFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,282,throw new AmbariException("Server version file does not exist.");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,284,String serverVersion = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,285,try (Scanner scanner = new Scanner(versionFile)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,286,serverVersion = scanner.useDelimiter("\\Z").next();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,289,throw new AmbariException("Unable to read server version file.");
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,292,if (schemaVersionEntity==null || VersionUtils.compareVersions(schemaVersion, serverVersion, 3) != 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,293,String error = "Current database store version is not compatible with " +
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,295,+ ", serverVersion=" + serverVersion
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,296,+ ", schemaVersion=" + schemaVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,297,LOG.warn(error);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,298,throw new AmbariException(error);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,301,LOG.info("DB store version is compatible");
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,28,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,50,import com.google.gson.JsonArray;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,51,import com.google.gson.JsonObject;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,52,import com.google.gson.JsonPrimitive;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,324,private void fillHostDetails(ManualTask mt, Map<String, List<String>> hostToComponents) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,325,JsonArray arr = new JsonArray();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,326,for (Entry<String, List<String>> entry : hostToComponents.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,327,JsonObject hostObj = new JsonObject();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,328,hostObj.addProperty("host", entry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,330,JsonArray componentArr = new JsonArray();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,331,for (String comp : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,332,componentArr.add(new JsonPrimitive(comp));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,334,hostObj.add("components", componentArr);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,336,arr.add(hostObj);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,339,JsonObject obj = new JsonObject();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,340,obj.add("unhealthy", arr);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,342,mt.structuredOut = obj.toString();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,22,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,37,import org.apache.ambari.server.metadata.RoleCommandOrder;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,93,private Map<Role, Float> successFactors = new HashMap<Role, Float>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,97,new TreeMap<String, Map<String, HostRoleCommand>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,99,new TreeMap<String, List<ExecutionCommandWrapper>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,200,stageEntity.setHostParamsStage(hostParamsStage);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,236,List<HostRoleCommand> commands = new ArrayList<HostRoleCommand>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,473,Map<String, String> cmdParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,482,Map<String, Map<String, String>> configurations = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,485,Map<String, Map<String, Map<String, String>>> configurationAttributes = new TreeMap<String, Map<String, Map<String, String>>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,489,configTags = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,493,Map<String, String> roleParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,521,Map<String, String> roleParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,532,List<String> hlist = new ArrayList<String>();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/availability/MetricCollectorHAController.java,126,admin.addCluster(clusterName, false);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/availability/MetricCollectorHAController.java,129,List<String> nodes = Collections.EMPTY_LIST;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/availability/MetricCollectorHAController.java,130,try {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/availability/MetricCollectorHAController.java,131,nodes =  admin.getInstancesInCluster(clusterName);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/availability/MetricCollectorHAController.java,133,LOG.warn("Child znode under /" + CLUSTER_NAME + " not found.Recreating the cluster.");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/availability/MetricCollectorHAController.java,134,admin.addCluster(clusterName, true);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/availability/MetricCollectorHAController.java,137,if (CollectionUtils.isEmpty(nodes) || !nodes.contains(instanceConfig.getInstanceName())) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/availability/MetricCollectorHAController.java,138,LOG.info("Adding participant instance " + instanceConfig);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/availability/MetricCollectorHAController.java,139,admin.addInstance(clusterName, instanceConfig);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,497,perOsRepos.put(operatingSystem.getOsType(), operatingSystem.getRepositories());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,499,perOsRepos.put(operatingSystem.getOsType(), Collections.<RepositoryEntity> emptyList());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,166,import org.apache.ambari.server.state.HostComponentAdminState;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3475,deleteHostComponent(entry.getKey(), componentHost);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3476,deleteStatusMetaData.addDeletedKey(componentHost.getHostName() + "/" + componentHost.getServiceComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3505,private void deleteHostComponent(ServiceComponent serviceComponent, ServiceComponentHost componentHost) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3507,String serviceName = serviceComponent.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3508,String master_component_name = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3509,String slave_component_name = componentHost.getServiceComponentName();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3510,HostComponentAdminState desiredAdminState = componentHost.getComponentAdminState();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3511,State slaveState = componentHost.getState();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3513,serviceComponent.deleteServiceComponentHosts(componentHost.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3520,if (entrySet.getValue().equals(slave_component_name)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3521,master_component_name = entrySet.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3547,Cluster cluster = clusters.getCluster(serviceComponent.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3548,Service service = cluster.getService(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3549,ServiceComponent sc = service.getServiceComponent(master_component_name);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3551,if (sc != null && sc.isMasterComponent()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3552,for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3553,sch.setRestartRequired(true);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariPamAuthenticationProvider.java,83,pam = new PAM(pamConfig);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,431,Map<String, String> params = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1199,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1200,LOG.info("Merging Alert Definition {} into the database",
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1201,entity.getDefinitionName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,22,import javax.crypto.BadPaddingException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,23,import javax.servlet.DispatcherType;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,105,import org.apache.ambari.server.security.authorization.AmbariPamAuthenticationProvider;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,523,ambariMetaInfo.reconcileAlertDefinitions(clusters);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionFactory.java,252,entity.setHash(UUID.randomUUID().toString());
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionFactory.java,266,Source source = definition.getSource();
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionFactory.java,273,LOG.error(
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionFactory.java,275,exception);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,22,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,30,import org.apache.ambari.server.state.PropertyInfo;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,31,import org.apache.ambari.server.state.ConfigHelper;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,32,import org.apache.ambari.server.utils.VersionUtils;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,36,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,37,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,38,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,39,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,44,public class FinalUpgradeCatalog extends AbstractUpgradeCatalog {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,57,protected void executeDDLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,62,protected void executePreDMLUpdates() throws AmbariException, SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,108,public String getTargetVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,109,return getFinalVersion();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,113,public boolean isFinal() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,114,return true;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,117,private String getFinalVersion() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/FinalUpgradeCatalog.java,118,return VersionUtils.getVersionSubstring(configuration.getServerVersion());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,48,import org.springframework.jdbc.support.JdbcUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3199,changedComps.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,226,if (fail.contains("{{version}}") && null != request.getRepositoryVersion()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,227,fail = fail.replace("{{version}}", request.getRepositoryVersion());
ambari-server/src/main/java/org/apache/ambari/server/checks/ConfigurationMergeCheck.java,68,RepositoryVersionEntity rve = repositoryVersionDaoProvider.get().findByStackNameAndVersion(stackName, request.getRepositoryVersion());
ambari-server/src/main/java/org/apache/ambari/server/checks/HostsMasterMaintenanceCheck.java,62,return super.isApplicable(request) && request.getRepositoryVersion() != null;
ambari-server/src/main/java/org/apache/ambari/server/checks/HostsMasterMaintenanceCheck.java,73,final String upgradePackName = repositoryVersionHelper.get().getUpgradePackageName(stackId.getStackName(), stackId.getStackVersion(), request.getRepositoryVersion(), null);
ambari-server/src/main/java/org/apache/ambari/server/checks/HostsRepositoryVersionCheck.java,61,return super.isApplicable(request) && request.getRepositoryVersion() != null;
ambari-server/src/main/java/org/apache/ambari/server/checks/HostsRepositoryVersionCheck.java,79,if (null != request.getRepositoryVersion()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/HostsRepositoryVersionCheck.java,95,stackId, request.getRepositoryVersion());
ambari-server/src/main/java/org/apache/ambari/server/checks/InstallPackagesCheck.java,65,final String repoVersion = request.getRepositoryVersion();
ambari-server/src/main/java/org/apache/ambari/server/checks/InstallPackagesCheck.java,67,final RepositoryVersionEntity rve = repositoryVersionDaoProvider.get().findByStackNameAndVersion(stackName, request.getRepositoryVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,67,public String getRepositoryVersion() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,131,super(propertyIds, keyPropertyIds, managementController);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,189,throw new SystemException(String.format("Upgrade pack not found for the target repository version %s",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,190,upgradeCheckRequest.getRepositoryVersion()));
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,34,private String m_repositoryVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,36,private StackId m_targetStackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,68,return m_repositoryVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,71,public void setRepositoryVersion(String repositoryVersion) {
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,72,m_repositoryVersion = repositoryVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,118,return m_targetStackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,127,public void setTargetStackId(StackId targetStackId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/PrereqCheckRequest.java,128,m_targetStackId = targetStackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,71,public static final String UPGRADE_CHECK_ID_PROPERTY_ID                 = PropertyHelper.getPropertyId("UpgradeChecks", "id");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,72,public static final String UPGRADE_CHECK_CHECK_PROPERTY_ID              = PropertyHelper.getPropertyId("UpgradeChecks", "check");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,73,public static final String UPGRADE_CHECK_STATUS_PROPERTY_ID             = PropertyHelper.getPropertyId("UpgradeChecks", "status");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,74,public static final String UPGRADE_CHECK_REASON_PROPERTY_ID             = PropertyHelper.getPropertyId("UpgradeChecks", "reason");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,75,public static final String UPGRADE_CHECK_FAILED_ON_PROPERTY_ID          = PropertyHelper.getPropertyId("UpgradeChecks", "failed_on");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,76,public static final String UPGRADE_CHECK_FAILED_DETAIL_PROPERTY_ID      = PropertyHelper.getPropertyId("UpgradeChecks", "failed_detail");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,77,public static final String UPGRADE_CHECK_CHECK_TYPE_PROPERTY_ID         = PropertyHelper.getPropertyId("UpgradeChecks", "check_type");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,78,public static final String UPGRADE_CHECK_CLUSTER_NAME_PROPERTY_ID       = PropertyHelper.getPropertyId("UpgradeChecks", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,79,public static final String UPGRADE_CHECK_UPGRADE_TYPE_PROPERTY_ID       = PropertyHelper.getPropertyId("UpgradeChecks", "upgrade_type");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,84,public static final String UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID = PropertyHelper.getPropertyId("UpgradeChecks", "repository_version");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,161,String stackName = cluster.getCurrentStackVersion().getStackName();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,162,String sourceStackVersion = cluster.getCurrentStackVersion().getStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,164,final PrereqCheckRequest upgradeCheckRequest = new PrereqCheckRequest(clusterName, upgradeType);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,167,if (propertyMap.containsKey(UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,168,String repositoryVersionId = propertyMap.get(UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID).toString();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,171,upgradeCheckRequest.setRepositoryVersion(repositoryVersionId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,172,upgradeCheckRequest.setTargetStackId(repositoryVersionEntity.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,182,upgradePack = upgradeHelper.get().suggestUpgradePack(clusterName, sourceStackVersion,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,199,Map<String, ServiceInfo> services = getManagementController().getAmbariMetaInfo().getServices(stackName, sourceStackVersion);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,203,LOG.error("Invalid stack version: " + stackName + "-" + sourceStackVersion, parentNotFoundException);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,221,if (upgradeCheckRequest.getRepositoryVersion() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,222,setResourceProperty(resource, UPGRADE_CHECK_REPOSITORY_VERSION_PROPERTY_ID, upgradeCheckRequest.getRepositoryVersion(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,49,import org.apache.ambari.server.orm.dao.RepositoryVersionDAO;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,200,public UpgradePack suggestUpgradePack(String clusterName, String upgradeFromVersion, String upgradeToVersion,
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,207,String repoVersion = upgradeToVersion;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,210,if (direction.isDowngrade() && null != upgradeFromVersion) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,211,repoVersion = upgradeFromVersion;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,216,if (versionEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,226,String repoStackId = versionEntity.getStackId().getStackId();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,228,if (null != upgradePack.getTargetStack() && upgradePack.getTargetStack().equals(repoStackId) &&
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,229,upgradeType == upgradePack.getType()) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,235,String.format("Unable to perform %s. Found multiple upgrade packs for type %s and target version %s",
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,236,direction.getText(false), upgradeType.toString(), repoVersion));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,30,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.HOOKS_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,43,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SERVICE_PACKAGE_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,776,commandParams.put(SERVICE_PACKAGE_FOLDER, serviceInfo.getServicePackageFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,777,commandParams.put(HOOKS_FOLDER, stackInfo.getStackHooksFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpPropertyProvider.java,117,populateResource(httpPropertyRequest, resource, cluster, hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpPropertyProvider.java,131,Cluster cluster, String hostName) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,682,result.put(stackProperty, actualConfigs.get(stackPropertyConfigType).getProperties().get(stackProperty.getName()));
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,748,result.add(actualConfigs.get(stackPropertyConfigType).getProperties().get(stackProperty.getName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,427,Set<String> notManagedHdfsPathSet = configHelper.getPropertyValuesWithPropertyType(stackId, PropertyType.NOT_MANAGED_HDFS_PATH, cluster, desiredConfigs);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1343,Set<String> notManagedHdfsPathSet = configHelper.getPropertyValuesWithPropertyType(stackId, PropertyType.NOT_MANAGED_HDFS_PATH, cluster, desiredConfigs);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2421,Set<String> notManagedHdfsPathSet = configHelper.getPropertyValuesWithPropertyType(PropertyType.NOT_MANAGED_HDFS_PATH, cluster, clusterDesiredConfigs, servicesMap, stackProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,410,Set<String> notManagedHdfsPathSet = configHelper.getPropertyValuesWithPropertyType(stackId, PropertyType.NOT_MANAGED_HDFS_PATH, cluster, desiredClusterConfigs);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,459,if (!dbAccessor.tableHasColumn(UPGRADE_TABLE, UPGRADE_PACKAGE_COL)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,460,LOG.info("Adding upgrade_package column to upgrade table.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,461,dbAccessor.addColumn(UPGRADE_TABLE, new DBColumnInfo(UPGRADE_PACKAGE_COL, String.class, 255, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,463,if (!dbAccessor.tableHasColumn(UPGRADE_TABLE, UPGRADE_TYPE_COL)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,464,LOG.info("Adding upgrade_type column to upgrade table.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,465,dbAccessor.addColumn(UPGRADE_TABLE, new DBColumnInfo(UPGRADE_TYPE_COL, String.class, 32, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,469,boolean success = populateUpgradeTable();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,471,if (!success) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,472,throw new AmbariException("Errors found while populating the upgrade table with values for columns upgrade_type and upgrade_package.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,509,private boolean populateUpgradeTable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,510,boolean success = true;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,511,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,512,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,513,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,514,statement = dbAccessor.getConnection().createStatement();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,515,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,517,rs = statement.executeQuery("SELECT upgrade_id, cluster_id, from_version, to_version, direction, upgrade_package, upgrade_type FROM upgrade");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,518,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,519,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,520,while (rs.next()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,521,final long upgradeId = rs.getLong("upgrade_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,522,final long clusterId = rs.getLong("cluster_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,523,final String fromVersion = rs.getString("from_version");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,524,final String toVersion = rs.getString("to_version");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,525,final Direction direction = Direction.valueOf(rs.getString("direction"));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,527,String upgradePackage = rs.getString("upgrade_package");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,528,String upgradeType = rs.getString("upgrade_type");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,530,LOG.info(MessageFormat.format("Populating rows for the upgrade table record with " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,532,upgradeId, clusterId, fromVersion, toVersion, direction));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,535,if (StringUtils.isEmpty(upgradeType)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,536,LOG.info("Updating the record's upgrade_type to " + UpgradeType.ROLLING);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,537,dbAccessor.executeQuery("UPDATE upgrade SET upgrade_type = '" + UpgradeType.ROLLING + "' WHERE upgrade_id = " + upgradeId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,540,if (StringUtils.isEmpty(upgradePackage)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,541,String version = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,542,StackEntity stack = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,544,if (direction == Direction.UPGRADE) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,545,version = toVersion;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,554,version = fromVersion;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,557,ClusterEntity cluster = clusterDAO.findById(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,559,if (null != cluster) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,560,stack = cluster.getDesiredStack();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,561,upgradePackage = calculateUpgradePackage(stack, version);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,563,LOG.error("Could not find a cluster with cluster_id " + clusterId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,566,if (!StringUtils.isEmpty(upgradePackage)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,567,LOG.info("Updating the record's upgrade_package to " + upgradePackage);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,568,dbAccessor.executeQuery("UPDATE upgrade SET upgrade_package = '" + upgradePackage + "' WHERE upgrade_id = " + upgradeId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,570,success = false;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,571,LOG.error("Unable to populate column upgrade_package for record in table upgrade with id " + upgradeId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,576,success = false;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,577,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,578,LOG.error("Unable to populate the upgrade_type and upgrade_package columns of the upgrade table. " + e);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,583,success = false;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,584,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,585,LOG.error("Failed to retrieve records from the upgrade table to populate the upgrade_type and upgrade_package columns. Exception: " + e);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,587,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,588,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,589,rs.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,591,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,592,statement.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,595,;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,598,return success;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,631,private String calculateUpgradePackage(StackEntity stack, String version) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,632,String upgradePackage = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,634,if (null != version && null != stack) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,635,RepositoryVersionEntity repoVersion = repositoryVersionDAO.findByStackNameAndVersion(stack.getStackName(), version);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,639,if( null == repoVersion ){
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,640,List<RepositoryVersionEntity> bestMatches = repositoryVersionDAO.findByStack(new StackId(stack));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,641,if (!bestMatches.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,642,repoVersion = bestMatches.get(0);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,647,if( null == repoVersion ) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,648,return null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,651,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,652,ResultSet rs = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,653,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,654,statement = dbAccessor.getConnection().createStatement();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,655,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,657,rs = statement.executeQuery("SELECT upgrade_package FROM repo_version WHERE repo_version_id = " + repoVersion.getId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,658,if (rs != null && rs.next()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,659,upgradePackage = rs.getString("upgrade_package");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,663,LOG.error("Failed to retrieve upgrade_package for repo_version record with id " + repoVersion.getId() + ". Exception: " + e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,665,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,666,if (rs != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,667,rs.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,669,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,670,statement.close();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,673,;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog220.java,677,return upgradePackage;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,142,public final static String UPDATE_EXCLUDE_FILE_ONLY = "update_exclude_file_only";
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,878,.get(UPDATE_EXCLUDE_FILE_ONLY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,953,LOG.info("Decommissioning " + slaveCompType + " and marking Maintenance=ON on " + sch.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,960,LOG.info("Recommissioning " + slaveCompType + " and marking Maintenance=OFF on " + sch.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1012,commandParams.put(UPDATE_EXCLUDE_FILE_ONLY, "false");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3506,String included_hostname = componentHost.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3517,&& slaveState.equals(State.INSTALLED)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3519,for (Entry<String, String> entrySet : AmbariCustomCommandExecutionHelper.masterToSlaveMappingForDecom.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3525,if (!serviceName.equals(Service.Type.HBASE.toString())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3526,HashMap<String, String> requestProperties = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3527,requestProperties.put("context", "Remove host " +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3528,included_hostname + " from exclude file");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3529,requestProperties.put("exclusive", "true");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3530,HashMap<String, String> params = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3531,params.put("included_hosts", included_hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3532,params.put("slave_type", slave_component_name);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3533,params.put(AmbariCustomCommandExecutionHelper.UPDATE_EXCLUDE_FILE_ONLY, "true");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3536,RequestResourceFilter resourceFilter
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3537,= new RequestResourceFilter(serviceName, master_component_name, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3539,ExecuteActionRequest actionRequest = new ExecuteActionRequest(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3540,serviceComponent.getClusterName(), AmbariCustomCommandExecutionHelper.DECOMMISSION_COMMAND_NAME, null,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3541,Collections.singletonList(resourceFilter), null, params, true);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3543,createAction(actionRequest, requestProperties);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosDescriptorUpdateHelper.java,360,KerberosPrincipalDescriptor oldValuePrincipal = previousStackIdentity.getPrincipalDescriptor();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosDescriptorUpdateHelper.java,383,KerberosKeytabDescriptor oldValueKeytab = previousStackIdentity.getKeytabDescriptor();
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,382,cacheSanitizedTimelineMetric(currentTimeMillis, sanitizedName, "", Double.parseDouble(String.valueOf(gauge.value())));
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,383,populateMetricsList(context, MetricType.GAUGE, sanitizedName);
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,70,private Map<String, String> hostLevelParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,80,new HashMap<String, Set<String>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,95,private Map<String, String> commandParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,107,private List<Map<String, String>> kerberosCommandParams = new ArrayList<Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,110,private Set<String> localComponents = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java,152,return this.configurationCredentials;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1283,Map<String, String> params = getNewParameterMap(request, context);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1386,Map<String, String> commandParams = getNewParameterMap(request, context);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1445,Map<String, String> commandParams = getNewParameterMap(request, context);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1480,Map<String, String> requestParams = getNewParameterMap(request, context);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1507,Map<String, String> commandParams = getNewParameterMap(request, context);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1643,UpgradeContext context) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,77,public static final String VERSION_KEY = "version";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,87,public static final String ORIGINAL_STACK_KEY = "original_stack";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,94,public static final String TARGET_STACK_KEY = "target_stack";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,40,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,41,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,42,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,43,import java.util.concurrent.ConcurrentMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,67,private static final String ORIGINAL_STACK_KEY = "original_stack";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,76,private static final String TARGET_STACK_KEY = "target_stack";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,107,List<String> messages = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,108,List<String> errorMessages = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,113,TreeMap<String, String> foreignKeys = new TreeMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,120,StackId originalStackId = getStackIdFromCommandParams(ORIGINAL_STACK_KEY);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpgradeUserKerberosDescriptor.java,121,StackId targetStackId = getStackIdFromCommandParams(TARGET_STACK_KEY);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,66,public static final String COMMAND_DOWNGRADE_FROM_VERSION = "downgrade_from_version";
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,73,public static final String COMMAND_PARAM_ORIGINAL_STACK = "original_stack";
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,80,public static final String COMMAND_PARAM_TARGET_STACK = "target_stack";
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,646,parameters.put(COMMAND_PARAM_DIRECTION, getDirection().name().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/stack/StackManager.java,455,String msg = String.format("File %s didn't pass the validation. Error message is : %s", file.getAbsolutePath(), e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,172,createAmbariServiceAndComponentResources(topology, clusterName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,199,public void createAmbariServiceAndComponentResources(ClusterTopology topology, String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,208,Set<ServiceRequest> serviceRequests = new HashSet<ServiceRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,209,Set<ServiceComponentRequest> componentRequests = new HashSet<ServiceComponentRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,212,serviceRequests.add(new ServiceRequest(clusterName, service, null, credentialStoreEnabled));
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,226,Map<String, Object> installProps = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,229,Map<String, Object> startProps = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,232,Predicate predicate = new EqualsPredicate<String>(
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,233,ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID, clusterName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,265,Map<String, Object> properties = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,267,properties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,278,final Set<ServiceComponentHostRequest> requests = new HashSet<ServiceComponentHostRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,335,return addHostToExistingConfigGroups(hostName, topology, groupName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,549,private boolean addHostToExistingConfigGroups(String hostName, ClusterTopology topology, String groupName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,563,String qualifiedGroupName = getConfigurationGroupName(topology.getBlueprint().getName(), groupName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,565,if (group.getName().equals(qualifiedGroupName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,589,Map<String, Map<String, Config>> groupConfigs = new HashMap<String, Map<String, Config>>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,608,serviceConfigs = new HashMap<String, Config>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,460,addRepoInfoToHostLevelParams(cluster, hostLevelParams, hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,520,private void addRepoInfoToHostLevelParams(Cluster cluster, Map<String, String> hostLevelParams, String hostName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,550,StackId stackId = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,551,hostLevelParams.put(STACK_NAME, stackId.getStackName());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,552,hostLevelParams.put(STACK_VERSION, stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,87,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,93,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,99,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,105,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,111,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,120,new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,126,new ArrayList<Map<String, Map<String, PropertyUpdater>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,155,new HashSet<String>(Arrays.asList("fs.defaultFS", "hbase.rootdir", "instance.volumes", "policymgr_external_url", "xasecure.audit.destination.hdfs.dir"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,235,Map<String, PropertyUpdater> oozieEnvOriginalValueMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,236,Map<String, PropertyUpdater> oozieSiteOriginalValueMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,249,Map<String, PropertyUpdater> hiveEnvOriginalValueMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,285,Collection<String> requiredHostGroups = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,324,Set<String> configTypesUpdated = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,484,Collection<Configuration> allConfigs = new ArrayList<Configuration>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,695,new LinkedList<Map<String, Map<String, PropertyUpdater>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,722,new LinkedList<Map<String, Map<String, PropertyUpdater>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,748,new LinkedList<Map<String, Map<String, PropertyUpdater>>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,847,Map<String, Map<String, PropertyUpdater>> highAvailabilityUpdaters = new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,848,Map<String, PropertyUpdater> hdfsSiteUpdatersForAvailability = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,878,Map<String, Map<String, PropertyUpdater>> highAvailabilityUpdaters = new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,879,Map<String, PropertyUpdater> yarnSiteUpdatersForAvailability = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,905,Map<String, Map<String, PropertyUpdater>> highAvailabilityUpdaters = new HashMap<String, Map<String, PropertyUpdater>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,906,Map<String, PropertyUpdater> oozieSiteUpdatersForAvailability = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1180,Collection<String> addedGroups = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1222,Collection<String> hosts = new LinkedHashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1254,List<String> namesWithoutWhitespace = new LinkedList<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1486,return new HashSet<String>(matchingGroups);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1898,Set<String> hostStrings = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1940,Set<String> temp = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1975,Collection<String> requiredHostGroups = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2222,new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2287,Collection<String> requiredGroups = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2334,Map<String, PropertyUpdater> amsSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2335,Map<String, PropertyUpdater> hdfsSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2336,Map<String, PropertyUpdater> mapredSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2337,Map<String, PropertyUpdater> coreSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2338,Map<String, PropertyUpdater> hbaseSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2339,Map<String, PropertyUpdater> yarnSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2340,Map<String, PropertyUpdater> hiveSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2341,Map<String, PropertyUpdater> hiveSiteNonTopologyMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2342,Map<String, PropertyUpdater> oozieSiteOriginalValueMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2343,Map<String, PropertyUpdater> oozieSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2344,Map<String, PropertyUpdater> stormSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2345,Map<String, PropertyUpdater> stormSiteNonTopologyMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2346,Map<String, PropertyUpdater> accumuloSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2347,Map<String, PropertyUpdater> falconStartupPropertiesMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2348,Map<String, PropertyUpdater> kafkaBrokerMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2349,Map<String, PropertyUpdater> kafkaBrokerNonTopologyMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2350,Map<String, PropertyUpdater> atlasPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2351,Map<String, PropertyUpdater> mapredEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2352,Map<String, PropertyUpdater> mHadoopEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2353,Map<String, PropertyUpdater> shHadoopEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2354,Map<String, PropertyUpdater> hbaseEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2355,Map<String, PropertyUpdater> hiveEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2356,Map<String, PropertyUpdater> hiveInteractiveEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2357,Map<String, PropertyUpdater> hiveInteractiveSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2358,Map<String, PropertyUpdater> oozieEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2359,Map<String, PropertyUpdater> oozieEnvHeapSizeMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2360,Map<String, PropertyUpdater> multiWebhcatSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2361,Map<String, PropertyUpdater> multiHbaseSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2362,Map<String, PropertyUpdater> multiStormSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2363,Map<String, PropertyUpdater> multiCoreSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2364,Map<String, PropertyUpdater> multiHdfsSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2365,Map<String, PropertyUpdater> multiHiveSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2366,Map<String, PropertyUpdater> multiKafkaBrokerMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2367,Map<String, PropertyUpdater> multiSliderClientMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2368,Map<String, PropertyUpdater> multiYarnSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2369,Map<String, PropertyUpdater> multiOozieSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2370,Map<String, PropertyUpdater> multiAccumuloSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2371,Map<String, PropertyUpdater> multiRangerKmsSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2372,Map<String, PropertyUpdater> dbHiveSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2373,Map<String, PropertyUpdater> rangerAdminPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2374,Map<String, PropertyUpdater> rangerEnvPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2375,Map<String, PropertyUpdater> rangerYarnAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2376,Map<String, PropertyUpdater> rangerHdfsAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2377,Map<String, PropertyUpdater> rangerHbaseAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2378,Map<String, PropertyUpdater> rangerHiveAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2379,Map<String, PropertyUpdater> rangerKnoxAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2380,Map<String, PropertyUpdater> rangerKafkaAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2381,Map<String, PropertyUpdater> rangerStormAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2382,Map<String, PropertyUpdater> rangerAtlasAuditPropsMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2383,Map<String, PropertyUpdater> hawqSiteMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2384,Map<String, PropertyUpdater> zookeeperEnvMap = new HashMap<String, PropertyUpdater>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2523,List<String> hiveHooksClean = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2781,final Map<String , String> userProps = new HashMap<String , String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,3040,return !(this.propertyConfigType.equals(configType) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,3196,Collections.unmodifiableSet( new HashSet<String>(Arrays.asList("dfs.namenode.http-address", "dfs.namenode.https-address", "dfs.namenode.rpc-address")));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,3266,Collections.unmodifiableSet( new HashSet<String>(Arrays.asList(HAWQ_SITE_HAWQ_STANDBY_ADDRESS_HOST)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,691,ActionExecutionContext actionContext = new ActionExecutionContext(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,692,cluster.getClusterName(), INSTALL_PACKAGES_ACTION,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,693,Collections.singletonList(filter),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,694,params);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,910,public Set<PropertyInfo> getStackProperties(Cluster cluster) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,911,StackId stackId = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,218,final Set<Resource> resources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,222,List<ClusterVersionEntity> requestedEntities = new ArrayList<ClusterVersionEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,246,final Map<String, List<String>> hostStates = new HashMap<String, List<String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,297,String stackName;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,298,String stackVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,302,Set<String> requiredProperties = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,337,final StackId stackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,338,if (propertyMap.containsKey(CLUSTER_STACK_VERSION_STACK_PROPERTY_ID) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,339,propertyMap.containsKey(CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,340,stackName = (String) propertyMap.get(CLUSTER_STACK_VERSION_STACK_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,341,stackVersion = (String) propertyMap.get(CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,342,stackId = new StackId(stackName, stackVersion);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,343,if (! ami.isSupportedStack(stackName, stackVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,344,throw new NoSuchParentResourceException(String.format("Stack %s is not supported",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,345,stackId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,348,StackId currentStackVersion = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,349,stackId = currentStackVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,493,Map<String, List<RepositoryEntity>> perOsRepos = new HashMap<String, List<RepositoryEntity>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,506,Map<String, String> hostLevelParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,537,ArrayList<Stage> stages = new ArrayList<Stage>(batchCount);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,615,List<ServiceOsSpecific.Package> packages = new ArrayList<ServiceOsSpecific.Package>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,616,Set<String> servicesOnHost = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,667,Map<String, String> params = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,784,Set<String> requiredProperties = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,823,Map<String, String> args = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,838,ArrayList<Host> hosts = new ArrayList<Host>(cluster.getHosts());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,34,import com.google.common.base.Objects;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,655,Set<PropertyInfo> serviceProperties = new HashSet<PropertyInfo>(servicesMap.get(service.getName()).getProperties());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1101,private boolean isNonRollingUpgradePastUpgradingStack(UpgradeEntity upgrade) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1109,command.getCustomCommandName().equalsIgnoreCase(UpgradeResourceProvider.CONST_CUSTOM_COMMAND_NAME) &&
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1110,command.getStatus() == HostRoleStatus.COMPLETED) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1111,return true;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1115,return false;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1118,return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,169,RepositoryVersionEntity repositoryVersionEntity = repositoryVersionDAO.findByStackNameAndVersion(stackName, repositoryVersionId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,183,upgradeCheckRequest.getRepositoryVersion(), Direction.UPGRADE, upgradeType, preferredUpgradePackName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,635,versionForUpgradePack, version, direction, upgradeType, preferredUpgradePackName);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,201,Direction direction, UpgradeType upgradeType, String preferredUpgradePackName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,205,StackId stack =  cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,214,RepositoryVersionEntity versionEntity = s_repoVersionDAO.get().findByStackNameAndVersion(stack.getStackName(), repoVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,217,throw new AmbariException(String.format("Repository version %s was not found", repoVersion));
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,220,Map<String, UpgradePack> packs = m_ambariMetaInfo.get().getUpgradePacks(stack.getStackName(), stack.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,221,UpgradePack pack = null;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,223,if (StringUtils.isNotEmpty(preferredUpgradePackName) && packs.containsKey(preferredUpgradePackName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,224,pack = packs.get(preferredUpgradePackName);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,243,throw new AmbariException(String.format("Unable to perform %s. Could not locate %s upgrade pack for version %s",
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,244,direction.getText(false), upgradeType.toString(), repoVersion));
ambari-server/src/main/java/org/apache/ambari/server/state/ClientConfigFileDefinition.java,76,append(dictionaryName, rhs.dictionaryName).isEquals();
ambari-server/src/main/java/org/apache/ambari/server/state/ClientConfigFileDefinition.java,84,append(dictionaryName).toHashCode();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,403,String.format("Downgrade version %s is not the current cluster version of %s",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,827,StackId componentStack = upgradeContext.getDirection() == Direction.UPGRADE ?
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,828,upgradeContext.getTargetStackId() : upgradeContext.getOriginalStackId();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,868,makeServerSideStage(upgradeContext, req, itemEntity, (ServerSideActionTask) task,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,869,skippable, supportsAutoSkipOnFailure, allowRetry, pack, configUpgradePack);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,882,createStage(upgradeContext, req, itemEntity, wrapper, skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1226,UpgradeItemEntity entity, StageWrapper wrapper, boolean skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1228,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1235,makeCommandStage(context, request, entity, wrapper, skippable, supportsAutoSkipOnFailure,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1239,makeActionStage(context, request, entity, wrapper, skippable, supportsAutoSkipOnFailure,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1243,makeServiceCheckStage(context, request, entity, wrapper, skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1267,UpgradeItemEntity entity, StageWrapper wrapper, boolean skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1269,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1318,cluster, context.getEffectiveStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1359,UpgradeItemEntity entity, StageWrapper wrapper, boolean skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1361,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1401,cluster, context.getEffectiveStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1433,UpgradeItemEntity entity, StageWrapper wrapper, boolean skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1435,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1462,cluster, context.getEffectiveStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1500,UpgradeItemEntity entity, ServerSideActionTask task, boolean skippable,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1501,boolean supportsAutoSkipOnFailure, boolean allowRetry,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1593,cluster, context.getEffectiveStackId());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,372,if (!currentRepoStackId.equals(originalStackId)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,375,clusterName, currentRepoStackId.getStackId(), originalStackId.getStackId(), PREVIOUS_UPGRADE_NOT_COMPLETED_MSG);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,378,throw new AmbariException("The source target stack doesn't match the cluster's CURRENT repo version's stack.");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,382,if (!originalStackId.equals(targetStackId)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,383,out.append(String.format("Will remove configs since the original stack %s differs from the target stack %s " +
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,385,cluster.removeConfigurations(targetStackId);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,389,out.append(String.format("Searching for current version for %s\n",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,390,clusterName));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,434,clusterName, targetStackId, badVersion);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpdateDesiredStackAction.java,161,if (!currentClusterStackId.equals(originalStackId)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpdateDesiredStackAction.java,171,if (currentClusterStackId.equals(targetStackId)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1081,if (effectiveVersion == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1086,Collection<ClusterVersionEntity> clusterVersionEntities = getClusterEntity().getClusterVersionEntities();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1087,for (ClusterVersionEntity clusterVersionEntity : clusterVersionEntities) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1088,if (clusterVersionEntity.getRepositoryVersion().getVersion().equals(effectiveVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1089,return clusterVersionEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1093,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderGrouping.java,228,StackId stackId = upgradeContext.getEffectiveStackId();
ambari-server/src/main/java/org/apache/ambari/annotations/ExperimentalFeature.java,43,PATCH_UPGRADES
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/UploadService.java,330,Job job = createJob(insertQuery, "default");
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/UploadService.java,351,Job job = createJob(deleteQuery, "default");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,327,StackInfo stackInfo = ambariMetaInfo.getStack
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,328,(stackId.getStackName(), stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,467,commandParams.put(SERVICE_PACKAGE_FOLDER, serviceInfo.getServicePackageFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,468,commandParams.put(HOOKS_FOLDER, stackInfo.getStackHooksFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,20,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.HOOKS_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,21,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SERVICE_PACKAGE_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,98,import org.apache.ambari.server.state.StackInfo;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1292,AmbariMetaInfo ambariMetaInfo = s_metaProvider.get();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1293,StackId stackId = context.getEffectiveStackId();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1295,StackInfo stackInfo = ambariMetaInfo.getStack(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1296,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1298,if (wrapper.getTasks() != null && wrapper.getTasks().size() > 0
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1299,&& wrapper.getTasks().get(0).getService() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1300,String serviceName = wrapper.getTasks().get(0).getService();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1301,ServiceInfo serviceInfo = ambariMetaInfo.getService(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1302,stackId.getStackVersion(), serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1303,params.put(SERVICE_PACKAGE_FOLDER, serviceInfo.getServicePackageFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1304,params.put(HOOKS_FOLDER, stackInfo.getStackHooksFolder());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,20,import java.util.concurrent.locks.Lock;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,21,import java.util.concurrent.locks.ReentrantLock;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,25,import org.apache.ambari.server.api.services.AmbariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,31,import org.apache.ambari.server.state.ComponentInfo;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,40,import com.google.common.eventbus.AllowConcurrentEvents;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,43,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,67,private Lock m_stackVersionLock = new ReentrantLock();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,73,Provider<AmbariMetaInfo> ambariMetaInfo;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,99,m_stackVersionLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,119,AmbariMetaInfo metaInfo = ambariMetaInfo.get();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,120,ComponentInfo componentInfo = metaInfo.getComponent(cluster.getDesiredStackVersion().getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,121,cluster.getDesiredStackVersion().getStackVersion(), sch.getServiceName(), sch.getServiceComponentName());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,122,ServiceComponent sc = cluster.getService(sch.getServiceName()).getServiceComponent(sch.getServiceComponentName());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,124,&& !UNKNOWN_VERSION.equalsIgnoreCase(newVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,125,processComponentAdvertisedVersion(cluster, sch, newVersion, sc);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,127,&& !UNKNOWN_VERSION.equalsIgnoreCase(newVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,130,sc.getName(), sch.getServiceComponentName(), sch.getHostName(), newVersion);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,132,if (UNKNOWN_VERSION.equals(sc.getDesiredVersion())) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,133,processUnknownDesiredVersion(cluster, sc, sch, newVersion);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,135,processComponentAdvertisedVersion(cluster, sch, newVersion, sc);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,143,m_stackVersionLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,157,private void processComponentAdvertisedVersion(Cluster cluster, ServiceComponentHost sch, String newVersion, ServiceComponent sc) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,162,if (previousVersion == null || UNKNOWN_VERSION.equalsIgnoreCase(previousVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,165,sch.setUpgradeState(UpgradeState.NONE);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,167,bootstrapVersion(cluster, sch);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,169,processComponentVersionChange(cluster, sc, sch, newVersion);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,179,private void bootstrapVersion(Cluster cluster, ServiceComponentHost sch) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,180,RepositoryVersionEntity repoVersion = sch.recalculateHostVersionState();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,181,if (null != repoVersion) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,182,cluster.recalculateClusterVersionState(repoVersion);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,200,bootstrapVersion(cluster, sch);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,210,private void processComponentVersionChange(Cluster cluster, ServiceComponent sc,
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,211,ServiceComponentHost sch,
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,212,String newVersion) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,213,String desiredVersion = sc.getDesiredVersion();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,214,UpgradeState upgradeState = sch.getUpgradeState();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,215,if (upgradeState == UpgradeState.IN_PROGRESS) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,217,if (desiredVersion.equals(newVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,218,sch.setUpgradeState(UpgradeState.COMPLETE);  // Component upgrade confirmed
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,219,sch.setStackVersion(cluster.getDesiredStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,223,sch.setUpgradeState(UpgradeState.VERSION_MISMATCH);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,227,sch.setUpgradeState(UpgradeState.COMPLETE);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,229,sch.setUpgradeState(UpgradeState.NONE);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,232,sch.setUpgradeState(UpgradeState.VERSION_MISMATCH);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,234,sch.setVersion(newVersion);
ambari-server/src/main/java/org/apache/ambari/server/agent/AlertDefinitionCommand.java,69,public AlertDefinitionCommand(String clusterName, String hostName,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,611,hostname, hash, definitions);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,530,Map<String, String[]> componentPortsProperties = new HashMap<String, String[]>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,555,initRpcSuffixes(clusterName, componentName, configType, currVersion, hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,586,String[] getPortProperties(Service.Type service, String componentName, String hostName, Map<String, Object> properties, boolean httpsEnabled) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,590,return getNamenodeHaProperty(properties, serviceDesiredProperties.get(service).get(componentName), hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,595,private String[] getNamenodeHaProperty(Map<String, Object> properties, String pattern[], String hostName) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,607,if (propertyValue.split(":")[0].equals(hostName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,1214,keys.put(tag, getNamenodeHaProperty(configProperties, stringMap.get(tag), hostName));
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,468,enqueueAgentCommands(clusterName, hostNames);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,492,Cluster cluster = m_clusters.get().getClusterById(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,498,enqueueAgentCommands(clusterName, hosts);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,515,private void enqueueAgentCommands(String clusterName, Collection<String> hosts) {
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,534,clusterName, hostName, hash, definitions);
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,537,Cluster cluster = m_clusters.get().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,804,final RequestResourceFilter resourceFilter, Stage stage) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1080,Stage stage, Map<String, String> requestParams) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1094,addDecommissionAction(actionExecutionContext, resourceFilter, stage);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4043,requestProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2957,requestParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3022,customCommandExecutionHelper.addExecutionCommandsToStage(exec, stage, Collections.<String, String>emptyMap());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3056,customCommandExecutionHelper.addExecutionCommandsToStage(exec, stage, Collections.<String, String>emptyMap());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3097,requestParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1428,s_commandExecutionHelper.get().addExecutionCommandsToStage(actionContext, stage, requestParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1481,s_commandExecutionHelper.get().addExecutionCommandsToStage(actionContext, stage, requestParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2941,scHost.setState(State.INSTALLED);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,143,public static final String UPGRADE_VERSION = "Upgrade/repository_version";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,279,PROPERTY_IDS.add(UPGRADE_VERSION);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,373,final String version = (String) requestMap.get(UPGRADE_VERSION);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,376,direction, version, requestMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,631,String version = (String) requestMap.get(UPGRADE_VERSION);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1944,String version = (String) requestMap.get(UPGRADE_VERSION);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1952,throw new AmbariException(String.format("%s is required", UPGRADE_VERSION));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1976,String version = (String) requestMap.get(UPGRADE_VERSION);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,45,import javax.persistence.PreUpdate;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,46,import javax.persistence.PrePersist;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,61,import static java.util.Arrays.asList;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,243,String connectUrl = getCollectorUri(collectorHost);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,244,String jsonData = null;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,245,LOG.debug("EmitMetrics connectUrl = "  + connectUrl);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,246,try {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,247,jsonData = mapper.writeValueAsString(metrics);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,249,LOG.error("Unable to parse metrics", e);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,251,if (jsonData != null) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,252,return emitMetricsJson(connectUrl, jsonData);
ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/DatabaseMetricsSource.java,63,LOG.info("DatabaseMetricsSource initialized.");
ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/DatabaseMetricsSource.java,87,LOG.info("Starting Database Metrics source...");
ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/JvmMetricsSource.java,63,LOG.info("JVM Metrics source initialized.");
ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/JvmMetricsSource.java,68,LOG.info("Starting JVM Metrics source...");
ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/JvmMetricsSource.java,73,sink.publish(getMetrics());
ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/JvmMetricsSource.java,74,LOG.debug("********* Published JVM metrics to sink **********");
ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/MetricsServiceImpl.java,64,LOG.info("Checking for metrics sink initialization");
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,281,response.header("Content-Disposition", "inline; filename=\"concatResult.txt\"").type(MediaType.APPLICATION_OCTET_STREAM);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,612,default: {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/Precision.java,38,if (precision == null ) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,94,setupSecurity();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,183,CloudSolrClient solrClient = new CloudSolrClient(zkConnectString);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/configurer/SolrCollectionConfigurer.java,122,CloudSolrClient cloudSolrClient = new CloudSolrClient(zookeeperConnectString);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrSchemaFieldDao.java,27,import org.apache.http.impl.client.CloseableHttpClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrSchemaFieldDao.java,141,try (CloseableHttpClient httpClient = HttpClientUtil.createClient(null)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrSchemaFieldDao.java,144,NamedList<Object> lukeData = (NamedList<Object>) new JavaBinCodec(null, null).unmarshal(response.getEntity().getContent());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/CreateCollectionHandler.java,173,CloseableHttpClient httpClient = HttpClientUtil.createClient(null);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,22,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,56,if (! missingGroupDependencies.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,72,component, cardinality, autoDeploy));
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,77,if (! missingDependencies.isEmpty() || ! cardinalityFailures.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,85,Map<String, Map<String, Collection<String>>> missingProperties =
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,86,new HashMap<String, Map<String, Collection<String>>>();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,92,if(clusterConfigurations != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,103,errorMessage.append("  Config:" + configType + " Property:" + propertyName+"\n");
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,110,if(containsSecretReferences) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,128,&& hiveEnvConfig.get("hive_database").startsWith("Existing")) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,136,if (hiveEnvConfig != null && !hiveEnvConfig.isEmpty() && hiveEnvConfig.get("hive_database") !=null
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,138,&& VersionUtils.compareVersions(stack.getVersion(), "2.3.0.0") < 0
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,139,&& stack.getName().equalsIgnoreCase("HDP")) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,147,if (oozieEnvConfig != null && !oozieEnvConfig.isEmpty() && oozieEnvConfig.get("oozie_database") !=null
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,149,&& VersionUtils.compareVersions(stack.getVersion(), "2.3.0.0") < 0
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,150,&& stack.getName().equalsIgnoreCase("HDP")) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,157,if (! component.equals("AMBARI_SERVER")) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,158,String serviceName = stack.getServiceForComponent(component);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,159,if (processedServices.add(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,160,Collection<Stack.ConfigProperty> requiredServiceConfigs =
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,161,stack.getRequiredConfigurationProperties(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,163,for (Stack.ConfigProperty requiredConfig : requiredServiceConfigs) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,164,String configCategory = requiredConfig.getType();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,165,String propertyName = requiredConfig.getName();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,166,if (! stack.isPasswordProperty(serviceName, configCategory, propertyName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,167,Collection<String> typeRequirements = allRequiredProperties.get(configCategory);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,168,if (typeRequirements == null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,169,typeRequirements = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,170,allRequiredProperties.put(configCategory, typeRequirements);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,172,typeRequirements.add(propertyName);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,178,for (Map.Entry<String, Collection<String>> requiredTypeProperties : allRequiredProperties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,179,String requiredCategory = requiredTypeProperties.getKey();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,180,Collection<String> requiredProperties = requiredTypeProperties.getValue();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,181,Collection<String> operationalTypeProps = operationalConfiguration.containsKey(requiredCategory) ?
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,182,operationalConfiguration.get(requiredCategory).keySet() :
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,183,Collections.<String>emptyList();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,185,requiredProperties.removeAll(operationalTypeProps);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,186,if (! requiredProperties.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,187,String hostGroupName = hostGroup.getName();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,188,Map<String, Collection<String>> hostGroupMissingProps = missingProperties.get(hostGroupName);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,189,if (hostGroupMissingProps == null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,190,hostGroupMissingProps = new HashMap<String, Collection<String>>();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,191,missingProperties.put(hostGroupName, hostGroupMissingProps);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,193,hostGroupMissingProps.put(requiredCategory, requiredProperties);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,198,if (! missingProperties.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,199,throw new InvalidTopologyException("Missing required properties.  Specify a value for these " +
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyValidator.java,25,public void validate(ClusterTopology topology) throws InvalidTopologyException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ExternalServerClient.java,29,import org.apache.commons.httpclient.auth.InvalidCredentialsException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/common/ExternalServerClient.java,73,throw new InvalidCredentialsException(String.format("External auth failed with status code: %d, response: %s",
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,310,String targetType = target.getNotificationType();
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,311,NotificationDispatcher dispatcher = m_dispatchFactory.getDispatcher(targetType);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,314,if (dispatcher.isDigestSupported()) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,315,AlertNotification notification = buildNotificationFromTarget(target);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,316,notification.CallbackIds = new ArrayList<String>(notices.size());
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,317,List<AlertHistoryEntity> histories = new ArrayList<AlertHistoryEntity>(
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,318,notices.size());
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,322,for (AlertNoticeEntity notice : notices) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,323,AlertHistoryEntity history = notice.getAlertHistory();
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,324,histories.add(history);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,326,notification.CallbackIds.add(notice.getUuid());
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,331,try {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,332,renderDigestNotificationContent(dispatcher, notification, histories, target);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,335,DispatchRunnable runnable = new DispatchRunnable(dispatcher, notification);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,336,m_executor.execute(runnable);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,338,LOG.error("Unable to create notification for alerts", exception);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,343,notification.Callback.onFailure(notification.CallbackIds);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,348,for (AlertNoticeEntity notice : notices) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,349,AlertNotification notification = buildNotificationFromTarget(target);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,350,AlertHistoryEntity history = notice.getAlertHistory();
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,351,notification.CallbackIds = Collections.singletonList(notice.getUuid());
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,356,renderNotificationContent(dispatcher, notification, history, target);
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,362,LOG.error("Unable to create notification for alert", exception);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,58,import org.apache.ambari.server.orm.dao.TopologyHostRequestDAO;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,60,import org.apache.ambari.server.orm.dao.TopologyRequestDAO;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,70,import org.apache.ambari.server.orm.entities.TopologyHostRequestEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,71,import org.apache.ambari.server.orm.entities.TopologyLogicalRequestEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,73,import org.apache.ambari.server.orm.entities.TopologyRequestEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,144,private TopologyHostRequestDAO topologyHostRequestDAO;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,146,private TopologyRequestDAO topologyRequestDAO;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,801,for (Long clusterId : clusterIds) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,802,for (TopologyRequestEntity topologyRequestEntity : topologyRequestDAO.findByClusterId(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,803,clusterId)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,804,TopologyLogicalRequestEntity topologyLogicalRequestEntity = topologyRequestEntity.getTopologyLogicalRequestEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,806,for (TopologyHostRequestEntity topologyHostRequestEntity : topologyLogicalRequestEntity.getTopologyHostRequestEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,807,if (hostname.equals(topologyHostRequestEntity.getHostName())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,808,topologyHostRequestDAO.remove(topologyHostRequestEntity);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,43,import org.apache.ambari.server.state.host.HostImpl;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,138,public synchronized HostOfferResponse offer(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,304,private void setHostOnTasks(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,396,public boolean matchesHost(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,459,public HostResourceAdapter(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,488,private void buildPropertyMap(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,47,import org.apache.ambari.server.state.host.HostImpl;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,98,public HostOfferResponse offer(HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,340,public void removeHostRequestByHostName(String hostName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,347,if (Objects.equals(hostRequestIterator.next().getHostName(), hostName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,354,Iterator<HostRequest> allHostRequesIterator = allHostRequests.iterator();
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,355,while (allHostRequesIterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,356,if (Objects.equals(allHostRequesIterator.next().getHostName(), hostName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,357,allHostRequesIterator.remove();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedState.java,25,import org.apache.ambari.server.controller.internal.ProvisionClusterRequest;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,664,SPACES;
ambari-agent/src/main/java/org/apache/ambari/tools/zk/ZkMigrator.java,40,if (cli.hasOption("connection-string") && cli.hasOption("acl") && cli.hasOption("znode")) {
ambari-agent/src/main/java/org/apache/ambari/tools/zk/ZkMigrator.java,41,setAcls(cli.getOptionValue("connection-string"), cli.getOptionValue("znode"), ZkAcl.parse(cli.getOptionValue("acl")));
ambari-agent/src/main/java/org/apache/ambari/tools/zk/ZkMigrator.java,85,System.out.println("Usage zkmigrator -connection-string <host:port> -acl <scheme:id:permission> -znode /path/to/znode");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1278,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1279,return addAdditionalConfigurations(cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1280,calculateExistingConfigurations(cluster, hostname),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1281,hostname, kerberosDescriptorProperties);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/VariableReplacementHelper.java,45,private static final Pattern PATTERN_VARIABLE = Pattern.compile("\\$\\{(?:([\\w\\-\\.]+)/)?([\\w\\-\\.]+)(?:\\s*\\|\\s*(.+?))?\\}");
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RequestDAO.java,42,public class RequestDAO {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ExecutionCommandEntity.java,21,import javax.persistence.*;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyHostTaskEntity.java,70,return topologyHostRequestEntity != null ? topologyHostRequestEntity.getId() : null;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyLogicalTaskEntity.java,61,public Long getHostTaskId() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyLogicalTaskEntity.java,62,return topologyHostTaskEntity != null ? topologyHostTaskEntity.getId() : null;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1695,configs.add(cluster.getConfig(configType, cr.getVersionTag()));
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,563,nonMappedConfigs.add(clusterConfigEntity.getType() + '-' + clusterConfigEntity.getTag());
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,565,if (!notMappedClasterConfigs.isEmpty()){
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,563,if (!Configuration.AMBARISERVER_METRICS_DISABLE.equals(true)) {
ambari-server/src/main/java/org/apache/ambari/server/stack/QuickLinksConfigurationModule.java,132,errors.addAll(errors);
ambari-server/src/main/java/org/apache/ambari/server/stack/ThemeModule.java,132,errors.addAll(errors);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2535,List<ServiceOsSpecific> foundedOSSpecifics = new ArrayList<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2537,if (osSpecific.getKey().contains(osFamily)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2538,foundedOSSpecifics.add(osSpecific.getValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2541,return foundedOSSpecifics;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog250.java,817,if (content != null && !content.contains("ulimit")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog250.java,818,content += "\n" +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog250.java,827,prop.put("content", content);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog250.java,828,updateConfigurationPropertiesForCluster(cluster, "hadoop-env",
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,310,public boolean isStackUpgradeAllowedToBypassPreChecks() {
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,311,return config.isUpgradePrecheckBypass();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,81,.equals(RoleCommand.SERVICE_CHECK.name()).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServiceCheckValidityCheck.java,143,if (command.getCommandDetail().contains(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,210,for (PrerequisiteCheck prerequisiteCheck : checkHelper.performChecks(upgradeCheckRequest, upgradeChecksToRun)) {
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,89,List<AbstractCheckDescriptor> checksRegistry) {
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,92,final List<PrerequisiteCheck> prerequisiteCheckResults = new ArrayList<PrerequisiteCheck>();
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,101,boolean canBypassPreChecks = checkDescriptor.isStackUpgradeAllowedToBypassPreChecks();
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,103,if (prerequisiteCheck.getStatus() == PrereqCheckStatus.FAIL && canBypassPreChecks) {
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,104,LOG.error("Check {} failed but stack upgrade is allowed to bypass failures. Error to bypass: {}. Failed on: {}",
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,105,checkDescriptor.getDescription().name(),
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,106,prerequisiteCheck.getFailReason(),
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,107,StringUtils.join(prerequisiteCheck.getFailedOn(), ", "));
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,108,prerequisiteCheck.setStatus(PrereqCheckStatus.BYPASS);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,110,prerequisiteCheckResults.add(prerequisiteCheck);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,112,request.addResult(checkDescriptor.getDescription(), prerequisiteCheck.getStatus());
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,114,prerequisiteCheck.setStatus(PrereqCheckStatus.FAIL);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,116,prerequisiteCheckResults.add(prerequisiteCheck);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,118,request.addResult(checkDescriptor.getDescription(), prerequisiteCheck.getStatus());
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,121,prerequisiteCheck.setStatus(PrereqCheckStatus.FAIL);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,123,prerequisiteCheckResults.add(prerequisiteCheck);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,125,request.addResult(checkDescriptor.getDescription(), prerequisiteCheck.getStatus());
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,264,byte[] chunk = new byte[1024];
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,265,while (in.read(chunk) != -1) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,266,output.write(chunk);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,268,LOG.info("concated file : {}", path);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/DeathWatch.java,45,if(message instanceof Terminated){
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/client/NonPersistentCursor.java,123,Inbox inbox = Inbox.create(system);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/DeathWatch.java,45,if(message instanceof Terminated){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/DeathWatch.java,48,LOG.info("Received terminate for actor "+ actor);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/NonPersistentCursor.java,123,Inbox inbox = Inbox.create(system);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1701,Logger logger = LoggerFactory.getLogger("configchange");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1703,logger.info("cluster '" + request.getClusterName() + "' "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1704,+ "changed by: '" + authName + "'; "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1705,+ "type='" + config.getType() + "' "
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1706,+ "tag='" + config.getTag() + "'");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,456,configLogger.info("User {} is deleting configuration group {} for tag {} in cluster {}",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,457,getManagementController().getAuthName(), request.getGroupName(), request.getTag(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,458,cluster.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,576,configLogger.info("User {} is creating new configuration group {} for tag {} in cluster {}",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,577,getManagementController().getAuthName(), request.getGroupName(), request.getTag(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,578,cluster.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,640,configLogger.info("User {} is updating configuration group {} for tag {} in cluster {}",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,641,getManagementController().getAuthName(), request.getGroupName(), request.getTag(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,642,cluster.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,657,if (serviceName != null && requestServiceName !=null && !StringUtils.equals(serviceName, requestServiceName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,793,logger.info("cluster '" + cluster.getClusterName() + "', "
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2342,configChangeLog.info("Cluster '{}' changed by: '{}'; service_name='{}' config_group='{}' config_group_id='{}' " +
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2344,configGroup == null ? ServiceConfigVersionResponse.DEFAULT_CONFIG_GROUP_NAME : configGroup.getName(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2345,configGroup == null ? "-1" : configGroup.getId(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2346,serviceConfigEntity.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2348,String configGroupName = configGroup != null ? configGroup.getName() : ServiceConfigVersionResponse.DEFAULT_CONFIG_GROUP_NAME;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,19,package org.apache.ambari.server.serveraction.kerberos;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,21,import javax.net.SocketFactory;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,22,import javax.net.ssl.SSLContext;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,23,import javax.net.ssl.SSLSocketFactory;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,24,import javax.net.ssl.TrustManager;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,25,import javax.net.ssl.X509TrustManager;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,29,import java.net.UnknownHostException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,34,public class TrustingSSLSocketFactory extends SSLSocketFactory {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,37,public TrustingSSLSocketFactory() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,39,SSLContext ctx = SSLContext.getInstance("TLS");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,40,ctx.init(null, new TrustManager[]{new LenientTrustManager()}, new SecureRandom());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,47,public static SocketFactory getDefault() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,48,return new TrustingSSLSocketFactory();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,67,public Socket createSocket(String string, int i) throws IOException, UnknownHostException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,72,public Socket createSocket(String string, int i, InetAddress ia, int i1) throws IOException, UnknownHostException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/TrustingSSLSocketFactory.java,97,return new java.security.cert.X509Certificate[0];
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,22,import com.google.common.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,23,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,24,import org.apache.ambari.server.security.credential.PrincipalKeyCredential;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,25,import org.apache.commons.codec.digest.DigestUtils;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,26,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,27,import org.apache.commons.logging.Log;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,28,import org.apache.commons.logging.LogFactory;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,29,import org.apache.velocity.VelocityContext;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,30,import org.apache.velocity.app.Velocity;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,31,import org.apache.velocity.exception.MethodInvocationException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,32,import org.apache.velocity.exception.ParseErrorException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,33,import org.apache.velocity.exception.ResourceNotFoundException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,54,import java.io.StringWriter;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,55,import java.io.UnsupportedEncodingException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,56,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,57,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,58,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,59,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,60,import java.util.Properties;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,108,private Gson gson = new Gson();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,176,this.gson = new Gson();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,190,this.gson = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,448,properties.put("java.naming.ldap.factory.socket", TrustingSSLSocketFactory.class.getName());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,455,throw new KerberosKDCConnectionException(message, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,214,Map<Long, Map<Long, HostRoleCommandStatusSummaryDTO>> cache =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,215,new HashMap<Long, Map<Long, HostRoleCommandStatusSummaryDTO>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,236,Resource stageResource = toResource(entity, propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,245,Resource stageResource = toResource(entity, propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,364,private Resource toResource(StageEntity entity, Set<String> requestedIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,366,Resource resource = new ResourceImpl(Resource.Type.Stage);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,368,Long clusterId = entity.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,369,if (clusterId != null && !clusterId.equals(Long.valueOf(-1L))) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,370,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,371,Cluster cluster = clustersProvider.get().getClusterById(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,373,setResourceProperty(resource, STAGE_CLUSTER_NAME, cluster.getClusterName(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,375,LOG.error("Can not get information for cluster " + clusterId + ".", e );
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,379,Map<Long, HostRoleCommandStatusSummaryDTO> summary =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,380,topologyManager.getStageSummaries(entity.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,382,setResourceProperty(resource, STAGE_STAGE_ID, entity.getStageId(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,383,setResourceProperty(resource, STAGE_REQUEST_ID, entity.getRequestId(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,384,setResourceProperty(resource, STAGE_CONTEXT, entity.getRequestContext(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,392,if (isPropertyRequested(STAGE_COMMAND_PARAMS, requestedIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,393,resource.setProperty(STAGE_COMMAND_PARAMS, entity.getCommandParamsStage());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,397,if (isPropertyRequested(STAGE_HOST_PARAMS, requestedIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,398,resource.setProperty(STAGE_HOST_PARAMS, entity.getHostParamsStage());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,401,setResourceProperty(resource, STAGE_SKIPPABLE, entity.isSkippable(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,403,Long startTime = Long.MAX_VALUE;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,404,Long endTime = 0L;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,405,if (summary.containsKey(entity.getStageId())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,406,startTime = summary.get(entity.getStageId()).getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,407,endTime = summary.get(entity.getStageId()).getEndTime();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,410,setResourceProperty(resource, STAGE_START_TIME, startTime, requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,411,setResourceProperty(resource, STAGE_END_TIME, endTime, requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,413,CalculatedStatus status = CalculatedStatus.statusFromStageSummary(summary, Collections.singleton(entity.getStageId()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,415,setResourceProperty(resource, STAGE_PROGRESS_PERCENT, status.getPercent(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,416,setResourceProperty(resource, STAGE_STATUS, status.getStatus(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,417,setResourceProperty(resource, STAGE_DISPLAY_STATUS, status.getDisplayStatus(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,419,return resource;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,785,RequestStageContainer req = createRequest(direction, version);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1215,private RequestStageContainer createRequest(Direction direction, String version) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/files/FileService.java,188,FSDataOutputStream output = getSharedObjectsFactory().getHdfsApi().create(filePath, true);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/files/FileService.java,189,output.writeBytes(request.file.getFileContent());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/files/FileService.java,190,output.close();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/files/FileService.java,212,output.writeBytes(request.file.getFileContent());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,226,if (fileName == null || fileName.isEmpty()) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,227,fileName = "results.csv";
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/jobs/JobService.java,231,header("Content-Disposition", String.format("attachment; filename=\"%s\"", fileName)).
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/jobs/JobService.java,231,if (fileName == null || fileName.isEmpty()) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/jobs/JobService.java,232,fileName = "results.csv";
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/jobs/JobService.java,235,return Response.ok(stream).
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/jobs/JobService.java,236,header("Content-Disposition", String.format("attachment; filename=\"%s\"", fileName)).
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/jobs/JobService.java,237,build();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog250.java,195,updateTablesForZeppelinViewRemoval();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog250.java,679,protected void updateTablesForZeppelinViewRemoval() throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog250.java,680,dbAccessor.executeQuery("DELETE from viewinstance WHERE view_name='ZEPPELIN{1.0.0}'", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog250.java,681,dbAccessor.executeQuery("DELETE from viewmain WHERE view_name='ZEPPELIN{1.0.0}'", true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog250.java,682,dbAccessor.executeQuery("DELETE from viewparameter WHERE view_name='ZEPPELIN{1.0.0}'", true);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,658,ViewEntity viewEntity = getDefinition(instanceEntity.getViewName());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,660,if (viewEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,661,String instanceName = instanceEntity.getName();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,662,String viewName = viewEntity.getCommonName();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,663,String version = viewEntity.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,665,if (getInstanceDefinition(viewName, version, instanceName) != null) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,666,if (instanceEntity.isXmlDriven()) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,667,throw new IllegalStateException("View instances defined via xml can't be deleted through api requests");
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,669,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,670,LOG.debug("Deleting view instance " + viewName + "/" +
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,671,version + "/" + instanceName);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,673,List<PrivilegeEntity> instancePrivileges = privilegeDAO.findByResourceId(instanceEntity.getResource().getId());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,674,for (PrivilegeEntity privilegeEntity : instancePrivileges) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,675,removePrivilegeEntity(privilegeEntity);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,677,instanceDAO.remove(instanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,678,viewEntity.removeInstanceDefinition(instanceName);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,679,removeInstanceDefinition(viewEntity, instanceName);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,682,handlerList.removeViewInstance(instanceEntity);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1580,private void removePrivilegeEntity(PrivilegeEntity privilegeEntity) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1582,PrincipalEntity principalEntity = privilegeEntity.getPrincipal();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1583,if (principalEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1584,principalEntity.removePrivilege(privilegeEntity);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1587,privilegeDAO.remove(privilegeEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,80,public void sendActions(List<Stage> stages, ExecuteActionRequest actionRequest) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,81,Request request = requestFactory.createNewFromStages(stages, actionRequest);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,453,processHostRole(stage, cmd, commandsToStart, commandsToUpdate);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1086,private void processHostRole(Stage s, ExecutionCommand cmd, List<ExecutionCommand> commandsToStart,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1103,cmd.setHostname(hostsMap.getHostMap(hostname));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1108,Map<String, Set<String>> clusterHostInfo = clusterHostInfoCache.getIfPresent(stagePk);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1112,clusterHostInfo = StageUtils.getGson().fromJson(s.getClusterHostInfo(), type);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,1113,clusterHostInfoCache.put(stagePk, clusterHostInfo);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,112,public Request(@Assisted Collection<Stage> stages, Clusters clusters){
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,145,public Request(@Assisted Collection<Stage> stages, @Assisted ExecuteActionRequest actionRequest,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,147,this(stages, clusters);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/RequestFactory.java,32,Request createNewFromStages(Collection<Stage> stages);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/RequestFactory.java,34,Request createNewFromStages(Collection<Stage> stages, ExecuteActionRequest actionRequest);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,79,private String clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,123,this.clusterHostInfo = clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,158,clusterHostInfo = stageEntity.getClusterHostInfo();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,198,stageEntity.setClusterHostInfo(clusterHostInfo);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,263,public String getClusterHostInfo() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,264,return clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,267,public void setClusterHostInfo(String clusterHostInfo) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,268,this.clusterHostInfo = clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,917,builder.append("clusterHostInfo="+clusterHostInfo+"\n");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/StageFactoryImpl.java,60,return new Stage(requestId, logDir, clusterName, clusterId, requestContext, clusterHostInfo, commandParamsStage, hostParamsStage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,999,stage.setClusterHostInfo(clusterHostInfoJson);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1044,String requestContext, String clusterHostInfo,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1051,requestContext, clusterHostInfo, commandParamsStage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2633,requestStages.getId(), requestProperties.get(REQUEST_CONTEXT_PROPERTY),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2634,clusterHostInfoJson, "{}", hostParamsJson);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3069,Stage stage = createNewStage(0, cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3070,1, "",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3071,clusterHostInfoJson, "{}", "");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4039,jsons.getClusterHostInfo(), commandParamsForStage, jsons.getHostParamsForStage());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2239,String requestContext, String clusterHostInfo,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2240,String commandParams, String hostParams) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2246,clusterHostInfo,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2274,String requestContext, String clusterHostInfo,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2281,Stage stage = createNewStage(id, cluster, requestId, requestContext, clusterHostInfo, commandParams, hostParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2773,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2796,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2819,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2842,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2865,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2888,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2911,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2937,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3003,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3046,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3075,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3115,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3149,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3171,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,549,cluster.getClusterId(), stageName, clusterHostInfoJson, "{}", hostParamsJson);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,511,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,559,clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestStageContainer.java,206,: requestFactory.createNewFromStages(stages, actionRequest);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,94,public static final String STAGE_CLUSTER_HOST_INFO = "Stage/cluster_host_info";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,122,PROPERTY_IDS.add(STAGE_CLUSTER_HOST_INFO);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,305,if (isPropertyRequested(STAGE_CLUSTER_HOST_INFO, requestedIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,306,resource.setProperty(STAGE_CLUSTER_HOST_INFO, entity.getClusterHostInfo());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,387,if (isPropertyRequested(STAGE_CLUSTER_HOST_INFO, requestedIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,388,resource.setProperty(STAGE_CLUSTER_HOST_INFO, entity.getClusterHostInfo());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1321,cluster.getClusterName(), cluster.getClusterId(), entity.getText(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1322,jsons.getClusterHostInfo(), jsons.getCommandParamsForStage(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1404,cluster.getClusterName(), cluster.getClusterId(), entity.getText(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1405,jsons.getClusterHostInfo(), jsons.getCommandParamsForStage(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1465,cluster.getClusterName(), cluster.getClusterId(), entity.getText(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1466,jsons.getClusterHostInfo(), jsons.getCommandParamsForStage(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1596,cluster.getClusterName(), cluster.getClusterId(), stageText, jsons.getClusterHostInfo(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1597,jsons.getCommandParamsForStage(), jsons.getHostParamsForStage());
ambari-server/src/main/java/org/apache/ambari/server/hooks/users/UserHookService.java,142,clsData.getClusterId(), stageContextText, "{}", "{}", "{}");
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,97,private byte[] clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,160,public String getClusterHostInfo() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,161,return clusterHostInfo == null ? new String() : new String(clusterHostInfo);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,164,public void setClusterHostInfo(String clusterHostInfo) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,165,this.clusterHostInfo = clusterHostInfo.getBytes();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity_.java,43,public static volatile SingularAttribute<StageEntity, byte[]> clusterHostInfo;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity_.java,76,mapping.put(StageResourceProvider.STAGE_CLUSTER_HOST_INFO,
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity_.java,77,Collections.singletonList(clusterHostInfo));
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,286,origStage.getRequestContext(), origStage.getClusterHostInfo(),
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,197,public static Stage getATestStage(long requestId, long stageId, String clusterHostInfo, String commandParamsStage, String hostParamsStage) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,204,return getATestStage(requestId, stageId, hostname, clusterHostInfo, commandParamsStage, hostParamsStage);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,209,public static Stage getATestStage(long requestId, long stageId, String hostname, String clusterHostInfo, String commandParamsStage, String hostParamsStage) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,210,Stage s = stageFactory.createNew(requestId, "/tmp", "cluster1", 1L, "context", clusterHostInfo, commandParamsStage, hostParamsStage);
contrib/views/storm/src/main/java/org/apache/ambari/storm/ProxyServlet.java,53,String urlToRead = URLDecoder.decode(request.getParameter("url"));
contrib/views/storm/src/main/java/org/apache/ambari/storm/ProxyServlet.java,62,String urlToRead = URLDecoder.decode(request.getParameter("url"));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,449,viewDirectoryWatcher.start();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1769,private void readViewArchive(ViewEntity viewDefinition,
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariPamAuthenticationProvider.java,20,import java.security.Principal;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariPamAuthenticationProvider.java,43,import org.springframework.security.core.context.SecurityContextHolder;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariPamAuthenticationProvider.java,128,Principal principal = new Principal() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariPamAuthenticationProvider.java,130,public String getName() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariPamAuthenticationProvider.java,131,return user.getUserName();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariPamAuthenticationProvider.java,135,UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(principal, null, userAuthorities);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariPamAuthenticationProvider.java,136,SecurityContextHolder.getContext().setAuthentication(token);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariPamAuthenticationProvider.java,137,return token;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/system/ranger/RangerService.java,122,throw new RangerException((String)obj.get("msgDesc"), "RANGER_ERROR", ((Long)obj.get("statusCode")).intValue());
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/system/ranger/RangerService.java,146,for(Object item: policyItems) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/system/ranger/RangerService.java,242,context.getProperties().get("hive.ranger.password"));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigUpgradeChangeDefinition.java,250,String message = "";
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigUpgradeChangeDefinition.java,251,message = "ConfigUpgradeChangeDefinition: getRegexReplacements : Error while fetching config properties ";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,269,return namenodeIDs != null;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,188,ScheduledFuture<?> handle = scheduler.scheduleWithFixedDelay(statusCollector,
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,189,0, 10, TimeUnit.SECONDS);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,357,handle.cancel(true);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/configurer/SolrCollectionConfigurer.java,57,public SolrCollectionConfigurer(final SolrDaoBase solrDaoBase) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/configurer/SolrCollectionConfigurer.java,102,boolean reloadCollectionNeeded = new UploadConfigurationHandler(configSetFolder).handle(cloudSolrClient, solrPropsConfig);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,72,new SolrCollectionConfigurer(this).start();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,68,new SolrCollectionConfigurer(this).start();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/UserConfigSolrDao.java,101,new SolrCollectionConfigurer(this).start();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,49,public UploadConfigurationHandler(File configSetFolder) {
ambari-server/src/main/java/org/apache/ambari/server/api/resources/BaseResourceDefinition.java,135,throw new IllegalArgumentException("Invalid renderer name: " + name +
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,184,BlueprintConfigurations blueprintConfig = filterBlueprintConfig(configType, configEntry.getValue(),
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,186,topology.getAdvisedConfigurations().put(configType, new AdvisedConfiguration(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,414,setMissingConfigurations(clusterConfig, configTypesUpdated);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2779,void setMissingConfigurations(Configuration configuration, Set<String> configTypesUpdated) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2783,setRetryConfiguration(configuration, configTypesUpdated);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2788,if (services.contains("OOZIE")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2789,userProps.put("oozie_user", "oozie-env");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2792,if (services.contains("HIVE")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2793,userProps.put("hive_user", "hive-env");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2794,userProps.put("hcat_user", "hive-env");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2797,if (services.contains("HBASE")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2798,userProps.put("hbase_user", "hbase-env");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2801,if (services.contains("FALCON")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2802,userProps.put("falcon_user", "falcon-env");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2805,String proxyUserHosts  = "hadoop.proxyuser.%s.hosts";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2806,String proxyUserGroups = "hadoop.proxyuser.%s.groups";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2808,Map<String, Map<String, String>> existingProperties = configuration.getFullProperties();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2809,for (String property : userProps.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2810,String configType = userProps.get(property);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2811,Map<String, String> configs = existingProperties.get(configType);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2812,if (configs != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2813,String user = configs.get(property);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2814,if (user != null && !user.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2815,ensureProperty(configuration, "core-site", String.format(proxyUserHosts, user), "*", configTypesUpdated);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2816,ensureProperty(configuration, "core-site", String.format(proxyUserGroups, user), "*", configTypesUpdated);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2819,LOG.debug("setMissingConfigurations: no user configuration found for type = " + configType +
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2825,addExcludedConfigProperties(configuration, configTypesUpdated, services, clusterTopology.getBlueprint().getStack());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2839,private void addExcludedConfigProperties(Configuration configuration, Set<String> configTypesUpdated, Collection<String> blueprintServices, Stack stack) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,106,private void removeOrphanConfigTypes(Configuration configuration) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,107,Blueprint blueprint = clusterTopology.getBlueprint();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,109,Collection<String> configTypes = configuration.getAllConfigTypes();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,110,for (String configType : configTypes) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,111,if (!"cluster-env".equals(configType) && !"global".equals(configType)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,112,String service = blueprint.getStack().getServiceForConfigType(configType);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,113,if (!blueprint.getServices().contains(service)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,114,configuration.removeConfigType(configType);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,115,LOG.info("Removing config type '{}' as service '{}' is not present in either Blueprint or cluster creation template.", configType, service);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,121,public ClusterConfigurationRequest(AmbariContext ambariContext, ClusterTopology topology, boolean setInitial, StackAdvisorBlueprintProcessor stackAdvisorBlueprintProcessor, boolean configureSecurity) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,122,this(ambariContext, topology, setInitial, stackAdvisorBlueprintProcessor);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,123,this.configureSecurity = configureSecurity;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,165,private boolean isOrphanedConfigType(String configType, Blueprint blueprint) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,166,boolean isOrphanedConfigType = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,167,if (!"cluster-env".equals(configType) && !"global".equals(configType)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,168,String service = blueprint.getStack().getServiceForConfigType(configType);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,169,if (!blueprint.getServices().contains(service)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,170,isOrphanedConfigType = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,173,return isOrphanedConfigType;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,216,if (!isOrphanedConfigType(configType, blueprint)) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/internal/query/generators/InsertFromQueryGenerator.java,43,.append(" SELECT ");
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/internal/query/generators/InsertFromQueryGenerator.java,46,for(ColumnInfo column : insertFromQueryInput.getHeader()){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/internal/query/generators/InsertFromQueryGenerator.java,72,.append(insertFromQueryInput.getFromTable()).append("` ").append(";");
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/query/InsertFromQueryInput.java,31,private List<ColumnInfo> header;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/query/InsertFromQueryInput.java,38,List<ColumnInfo> header, Boolean unhexInsert) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/query/InsertFromQueryInput.java,43,this.header = header;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/query/InsertFromQueryInput.java,47,public List<ColumnInfo> getHeader() {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/query/InsertFromQueryInput.java,48,return header;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/query/InsertFromQueryInput.java,51,public void setHeader(List<ColumnInfo> header) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/query/InsertFromQueryInput.java,52,this.header = header;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,28,private final Logger LOG = LoggerFactory.getLogger(getClass());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,31,final public void onReceive(Object message) throws Exception {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,32,HiveMessage hiveMessage = new HiveMessage(message);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,33,if(LOG.isDebugEnabled()){
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,34,LOG.debug("Received message: " + message.getClass().getName() + ", generated id: " + hiveMessage.getId() +
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,38,handleMessage(hiveMessage);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,40,if(LOG.isDebugEnabled()){
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,41,LOG.debug("Message submitted: " + hiveMessage.getId());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/HiveActor.java,46,public abstract void handleMessage(HiveMessage hiveMessage);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,80,private final Logger LOG = LoggerFactory.getLogger(getClass());
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,530,if (!isAsync()) {
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,532,stopTerminateInactivityScheduler();
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/JdbcConnector.java,533,return;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/actor/OperationController.java,66,private final Logger LOG = LoggerFactory.getLogger(getClass());
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/HiveActor.java,28,private final Logger LOG = LoggerFactory.getLogger(getClass());
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/HiveActor.java,31,final public void onReceive(Object message) throws Exception {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/HiveActor.java,32,HiveMessage hiveMessage = new HiveMessage(message);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/HiveActor.java,33,if(LOG.isDebugEnabled()){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/HiveActor.java,34,LOG.debug("Received message: " + message.getClass().getName() + ", generated id: " + hiveMessage.getId() +
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/HiveActor.java,38,handleMessage(hiveMessage);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/HiveActor.java,40,if(LOG.isDebugEnabled()){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/HiveActor.java,41,LOG.debug("Message submitted: " + hiveMessage.getId());
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/HiveActor.java,46,public abstract void handleMessage(HiveMessage hiveMessage);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,534,if (!isAsync()) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,536,stopTerminateInactivityScheduler();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,537,return;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/OperationController.java,66,private final Logger LOG = LoggerFactory.getLogger(getClass());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,572,if (!processExecutor.awaitTermination(timeout, TimeUnit.MILLISECONDS)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,573,processExecutor.shutdownNow();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,574,for (CommandLineThreadWrapper commandLineThreadWrapper: pythonCmdThreads) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,575,CommandLineThread commandLineThread = commandLineThreadWrapper.getCommandLineThread();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,576,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,577,Integer returnCode = commandLineThread.getReturnCode();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,578,if (returnCode == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,579,throw new TimeoutException();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,581,throw new ExecutionException(String.format("Execution of \"%s\" returned %d.", commandLineThreadWrapper.getCommandLine(), returnCode),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,582,new Throwable(commandLineThreadWrapper.getLogStream().getOutput()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,585,LOG.error("Generate client configs script was killed due to timeout ", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,586,throw new SystemException("Generate client configs script was killed due to timeout ", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,588,LOG.error(e.getMessage(), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,589,throw new SystemException(e.getMessage() + " " + e.getCause());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,591,commandLineThreadWrapper.getProcess().destroy();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,356,List<StageEntity> stageEntities = new ArrayList<StageEntity>(request.getStages().size());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,374,assert hostRoleCommandEntity.getTaskId() != null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,493,Map<Long, CommandReport> taskReports = new HashMap<Long, CommandReport>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,500,List<Long> requestsToCheck = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,501,List<Long> abortedCommandUpdates = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,705,List<HostRoleCommand> commands = new ArrayList<HostRoleCommand>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,710,List<Long> absent = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,799,List<Request> requests = new ArrayList<Request>(requestEntities.size());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,678,entityManager.remove(merge(entity));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,815,entity.setHostRoleCommandEntities(null);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,816,hostRoleCommandDAO.removeByHostId(entity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpdateDesiredStackAction.java,121,return updateDesiredStack(clusterName, originalStackId, targetStackId, version, direction, upgradePack, userName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpdateDesiredStackAction.java,136,String clusterName, StackId originalStackId, StackId targetStackId,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/UpdateDesiredStackAction.java,143,Cluster cluster = clusters.getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1063,String effectiveVersion = null;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1064,switch (upgradeEntity.getUpgradeType()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1065,case NON_ROLLING:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1066,if (upgradeEntity.getDirection() == Direction.UPGRADE) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1067,boolean pastChangingStack = isNonRollingUpgradePastUpgradingStack(upgradeEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1068,effectiveVersion = pastChangingStack ? upgradeEntity.getToVersion() : upgradeEntity.getFromVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1073,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1074,case ROLLING:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1075,default:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1077,effectiveVersion = upgradeEntity.getToVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1078,break;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,175,if (currentRequests.contains(key)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,176,LOG.debug("LogFileNames request has been made for key = {}, but not completed yet", key);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,178,LOG.debug("LogFileNames result for key = {} not in cache, queueing up remote request", key);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,181,currentRequests.add(key);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,182,startLogSearchFileNameRequest(host, component, cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,270,injector.getInstance(LoggingRequestHelperFactory.class)));
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,308,LogSearchFileNameRequestRunnable(String host, String component, String cluster, Cache<String, Set<String>> logFileNameCache, Set<String> currentRequests, LoggingRequestHelperFactory loggingRequestHelperFactory) {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,309,this(host, component, cluster, logFileNameCache, currentRequests, loggingRequestHelperFactory, AmbariServer.getController());
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,313,LoggingRequestHelperFactory loggingRequestHelperFactory, AmbariManagementController controller) {
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogSearchDataRetrievalService.java,342,LOG.debug("LogSearchFileNameRequestRunnable: remote request was not successful");
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,101,public void setUserName(String userName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UserEntity.java,102,this.userName = userName;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,324,userEntity.setUserName(userName);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,712,userEntity.setUserName(userName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,77,if (jsonObj.get(entry.getKey()) == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,530,List<String> types = new ArrayList<>();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,531,String type = clusterConfigEntity.getType();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,532,types.add(type);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,533,LOG.error("Removing cluster config mapping of type {} that is not mapped to any service", type);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,534,clusterDAO.removeClusterConfigMappingEntityByTypes(clusterConfigEntity.getClusterId(),types);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,535,LOG.error("Removing config that is not mapped to any service", clusterConfigEntity);
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,36,private String securityState;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,83,public String getSecurityState() {
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,84,return securityState;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,93,public void setSecurityState(String securityState) {
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,94,this.securityState = securityState;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatus.java,161,+ ", status=" + status + ", securityState=" + securityState
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,22,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,23,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,61,import org.apache.ambari.server.state.SecurityState;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,621,SecurityState prevSecurityState = scHost.getSecurityState();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,622,SecurityState currentSecurityState = SecurityState.valueOf(status.getSecurityState());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,623,if((prevSecurityState != currentSecurityState)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,624,if(prevSecurityState.isEndpoint()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,625,scHost.setSecurityState(currentSecurityState);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,626,LOG.info(String.format("Security of service component %s of service %s of cluster %s " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,628,componentName, status.getServiceName(), status.getClusterName(), prevSecurityState,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,629,currentSecurityState, hostname));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,631,else {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,632,LOG.debug(String.format("Security of service component %s of service %s of cluster %s " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,635,componentName, status.getServiceName(), status.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,636,prevSecurityState, currentSecurityState, hostname, prevSecurityState));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/configurer/SolrCollectionConfigurer.java,106,return reloadCollectionNeeded;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,22,import org.apache.commons.configuration.XMLConfiguration;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,24,import org.apache.solr.client.solrj.impl.CloudSolrClient;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,31,import java.nio.file.FileSystems;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,32,import java.nio.file.Paths;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,33,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,34,import java.util.List;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,35,import java.util.UUID;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,37,public class UploadConfigurationHandler implements SolrZkRequestHandler<Boolean> {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,41,private static final String SCHEMA_FILE = "managed-schema";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,43,private static final String FIELD_NAME_PATH = "field[@name]";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,44,private static final String FIELD_TYPE_NAME_PATH = "fieldType[@name]";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,45,private static final String DYNAMIC_FIELD_NAME_PATH = "dynamicField[@name]";
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,47,private File configSetFolder;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,50,this.configSetFolder = configSetFolder;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,54,public Boolean handle(CloudSolrClient solrClient, SolrPropsConfig solrPropsConfig) throws Exception {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,55,boolean reloadCollectionNeeded = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,56,String separator = FileSystems.getDefault().getSeparator();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,57,String downloadFolderLocation = String.format("%s%s%s%s%s", System.getProperty("java.io.tmpdir"), separator,
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,58,UUID.randomUUID().toString(), separator, solrPropsConfig.getConfigName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,59,solrClient.connect();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,60,SolrZkClient zkClient = solrClient.getZkStateReader().getZkClient();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,61,File tmpDir = new File(downloadFolderLocation);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,62,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,64,boolean configExists = zkConfigManager.configExists(solrPropsConfig.getConfigName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,65,if (configExists) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,66,LOG.info("Config set exists for '{}' collection. Refreshing it if needed...", solrPropsConfig.getCollection());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,67,if (!tmpDir.mkdirs()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,68,LOG.error("Cannot create directories for '{}'", tmpDir.getAbsolutePath());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,70,zkConfigManager.downloadConfigDir(solrPropsConfig.getConfigName(), Paths.get(downloadFolderLocation));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,71,File[] listOfFiles = configSetFolder.listFiles();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,72,if (listOfFiles != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,73,for (File file : listOfFiles) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,74,if (file.getName().equals(SOLR_CONFIG_FILE) && !FileUtils.contentEquals(file, new File(String.format("%s%s%s", downloadFolderLocation, separator, file.getName())))) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,75,LOG.info("Solr config file differs ('{}'), upload config set to zookeeper", file.getName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,76,zkConfigManager.uploadConfigDir(configSetFolder.toPath(), solrPropsConfig.getConfigName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,77,reloadCollectionNeeded = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,78,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,80,if (file.getName().equals(SCHEMA_FILE) && localSchemaFileHasMoreFields(file, new File(String.format("%s%s%s", downloadFolderLocation, separator, file.getName())))) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,81,LOG.info("Solr schema file differs ('{}'), upload config set to zookeeper", file.getName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,82,zkConfigManager.uploadConfigDir(configSetFolder.toPath(), solrPropsConfig.getConfigName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,83,reloadCollectionNeeded = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,84,break;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,89,LOG.info("Config set does not exist for '{}' collection. Uploading it to zookeeper...", solrPropsConfig.getCollection());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,90,File[] listOfFiles = configSetFolder.listFiles();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,91,if (listOfFiles != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,92,zkConfigManager.uploadConfigDir(configSetFolder.toPath(), solrPropsConfig.getConfigName());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,96,throw new RuntimeException(String.format("Cannot upload configurations to zk. (collection: %s, config set folder: %s)",
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,97,solrPropsConfig.getCollection(), solrPropsConfig.getConfigSetFolder()), e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,99,if (tmpDir.exists()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,100,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,101,FileUtils.deleteDirectory(tmpDir);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,103,LOG.error("Cannot delete temp directory.", e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,107,return reloadCollectionNeeded;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,110,private boolean localSchemaFileHasMoreFields(File localFile, File downloadedFile) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,111,try {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,112,XMLConfiguration localFileXml = new XMLConfiguration(localFile);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,113,XMLConfiguration downloadedFileXml = new XMLConfiguration(downloadedFile);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,115,List<String> localFieldNames = (ArrayList<String>) localFileXml.getProperty(FIELD_NAME_PATH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,116,List<String> localFieldTypes = (ArrayList<String>) localFileXml.getProperty(FIELD_TYPE_NAME_PATH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,117,List<String> localDynamicFields = (ArrayList<String>) localFileXml.getProperty(DYNAMIC_FIELD_NAME_PATH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,119,List<String> fieldNames = (ArrayList<String>) downloadedFileXml.getProperty(FIELD_NAME_PATH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,120,List<String> fieldTypes = (ArrayList<String>) downloadedFileXml.getProperty(FIELD_TYPE_NAME_PATH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,121,List<String> dynamicFields = (ArrayList<String>) downloadedFileXml.getProperty(DYNAMIC_FIELD_NAME_PATH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,123,boolean fieldNameHasDiff = hasMoreFields(localFieldNames, fieldNames, FIELD_NAME_PATH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,124,boolean fieldTypeHasDiff = hasMoreFields(localFieldTypes, fieldTypes, FIELD_TYPE_NAME_PATH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,125,boolean dynamicFieldNameHasDiff = hasMoreFields(localDynamicFields, dynamicFields, DYNAMIC_FIELD_NAME_PATH);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,127,return fieldNameHasDiff || fieldTypeHasDiff || dynamicFieldNameHasDiff;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,129,throw new RuntimeException("Exception during schema xml parsing.", e);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,133,private boolean hasMoreFields(List<String> localFields, List<String> fields, String tag) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,134,boolean result = false;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,135,if (localFields != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,136,if (fields == null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,137,result = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,139,localFields.removeAll(fields);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,140,if (!localFields.isEmpty()) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,141,result = true;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,145,if (result) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,146,LOG.info("Found new fields or field types in local schema file.: {} ({})", localFields.toString(), tag);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/handler/UploadConfigurationHandler.java,148,return result;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,153,protected AbstractUpgradeCatalog() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog212.java,89,protected UpgradeCatalog212() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchExternalServerAuthenticationProvider.java,126,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ExportBlueprintRequest.java,39,import org.apache.ambari.server.topology.TopologyValidator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ExportBlueprintRequest.java,117,public List<TopologyValidator> getTopologyValidators() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ExportBlueprintRequest.java,118,return Collections.emptyList();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,23,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,41,import org.apache.ambari.server.topology.TopologyValidator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,271,public List<TopologyValidator> getTopologyValidators() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,23,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,33,import org.apache.ambari.server.topology.TopologyValidator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,93,public List<TopologyValidator> getTopologyValidators() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ScaleClusterRequest.java,94,return Collections.emptyList();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,26,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,36,import static org.apache.ambari.server.controller.internal.ProvisionAction.INSTALL_AND_START;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,37,import static org.apache.ambari.server.controller.internal.ProvisionAction.INSTALL_ONLY;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,54,private Map<String, AdvisedConfiguration> advisedConfigurations = new HashMap<String, AdvisedConfiguration>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,55,private final Map<String, HostGroupInfo> hostGroupInfoMap = new HashMap<String, HostGroupInfo>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,71,validateTopology(topologyRequest.getTopologyValidators());
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,72,this.ambariContext = ambariContext;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,76,public ClusterTopologyImpl(AmbariContext ambariContext,
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,77,Long clusterId,
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,78,Blueprint blueprint,
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,79,Configuration configuration,
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,81,throws InvalidTopologyException {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,83,this.clusterId = clusterId;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,84,this.blueprint = blueprint;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,85,this.configuration = configuration;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,87,registerHostGroupInfo(hostGroupInfo);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,124,Collection<String> resultGroups = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,176,Collection<String> hosts = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,217,throws InvalidTopologyException {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,219,for (TopologyValidator validator : validators) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,220,validator.validate(this);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,371,Set<String> hosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,372,Set<String> duplicates = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,376,Collection<String> groupHostsCopy = new HashSet<String>(group.getHostNames());
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,21,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,22,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,27,import org.apache.ambari.server.controller.internal.ProvisionClusterRequest;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,49,import javax.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,50,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,51,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,52,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,53,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,54,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,55,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,174,Map<ClusterTopology, List<LogicalRequest>> allRequests = new HashMap<ClusterTopology, List<LogicalRequest>>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,177,Map<Long, ClusterTopology> topologyRequests = new HashMap<Long, ClusterTopology>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,241,Collection<TopologyHostGroupEntity> hostGroupEntities = new ArrayList<TopologyHostGroupEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,259,Collection<TopologyHostRequestEntity> hostRequests = new ArrayList<TopologyHostRequestEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,278,Collection<TopologyHostTaskEntity> hostRequestTaskEntities = new ArrayList<TopologyHostTaskEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,287,Collection<TopologyLogicalTaskEntity> logicalTaskEntities = new ArrayList<TopologyLogicalTaskEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,315,Collection<TopologyHostInfoEntity> hostInfoEntities = new ArrayList<TopologyHostInfoEntity>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,358,private final Map<String, HostGroupInfo> hostGroupInfoMap = new HashMap<String, HostGroupInfo>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,402,public List<TopologyValidator> getTopologyValidators() {
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,403,return Collections.emptyList();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,267,boolean configureSecurity = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,272,configureSecurity = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,276,topology.getBlueprint().getConfiguration().setParentConfiguration(stack.getConfiguration(topology.getBlueprint
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,277,().getServices()));
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,281,ambariContext.createAmbariResources(topology, clusterName, SecurityType.KERBEROS, repoVersion);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,282,if (securityConfiguration.getDescriptor() != null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,283,submitKerberosDescriptorAsArtifact(clusterName, securityConfiguration.getDescriptor());
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,286,Credential credential = request.getCredentialsMap().get(KDC_ADMIN_CREDENTIAL);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,292,ambariContext.createAmbariResources(topology, clusterName, null, repoVersion);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,315,addClusterConfigRequest(topology, new ClusterConfigurationRequest(
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,316,ambariContext, topology, true, stackAdvisorBlueprintProcessor, configureSecurity));
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,21,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,31,public enum Type { PROVISION, SCALE, EXPORT }
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,38,public Long getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,45,public Type getType();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,56,public Blueprint getBlueprint();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,63,public Configuration getConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,70,public Map<String, HostGroupInfo> getHostGroupInfo();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,77,public List<TopologyValidator> getTopologyValidators();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,84,public String getDescription();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,43,import org.apache.ambari.server.topology.Blueprint;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,46,import org.apache.ambari.server.topology.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,81,public void adviseConfiguration(ClusterTopology clusterTopology, Map<String, Map<String, String>> existingConfigurations) throws ConfigurationTopologyException {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,85,addAdvisedConfigurationsToTopology(response, clusterTopology, existingConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,98,hgHostsMap);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,171,ClusterTopology topology, Map<String, Map<String, String>> existingConfigurations) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,185,userProvidedProperties, topology);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,194,private Map<String, Map<String, String>> getUserProvidedProperties(ClusterTopology topology, Map<String, Map<String, String>> existingConfigurations) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,195,Map<String, Map<String, String>> userProvidedProperties = Maps.newHashMap();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,196,Blueprint blueprint = topology.getBlueprint();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,197,Configuration stackDefaults = blueprint.getStack().getConfiguration(blueprint.getServices());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,198,Map<String, Map<String, String>> stackDefaultProps = stackDefaults.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,200,for (Map.Entry<String, Map<String, String>> configGroup : existingConfigurations.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,201,String configType = configGroup.getKey();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,202,Map<String, String> configsToAdd = Maps.newHashMap();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,203,for (Map.Entry<String, String> configProp : configGroup.getValue().entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,204,if (stackDefaultProps.containsKey(configType) && stackDefaultProps.get(configType).containsKey(configProp.getKey())) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,205,String originalValue = stackDefaultProps.get(configType).get(configProp.getKey());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,206,if (originalValue != null && !originalValue.equals(configProp.getValue())) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,207,configsToAdd.put(configProp.getKey(), configProp.getValue());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,210,configsToAdd.put(configProp.getKey(), configProp.getValue());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,213,if (!configsToAdd.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,214,userProvidedProperties.put(configGroup.getKey(), configsToAdd);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,218,return userProvidedProperties;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,226,Map<String, Map<String, String>> userProvidedProperties,
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,231,if (userProvidedProperties.containsKey(configType)) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,234,Predicates.not(Predicates.in(userProvidedProperties.get(configType).keySet())));
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,239,Predicates.not(Predicates.in(userProvidedProperties.get(configType).keySet())));
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,140,Configuration clusterConfiguration = clusterTopology.getConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,141,Map<String, Map<String, String>> existingConfigurations = clusterConfiguration.getFullProperties();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,150,stackAdvisorBlueprintProcessor.adviseConfiguration(this.clusterTopology, existingConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,128,LOG.error("ServiceComponent {} doesn't advertise version, " +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,441,String commandTimeout = configs.getDefaultAgentTaskTimeout(isInstallCommand);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,455,commandTimeout = String.valueOf(script.getTimeout());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,466,commandParams.put(COMMAND_TIMEOUT, commandTimeout);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1313,actionContext.setTimeout(Short.valueOf(s_configuration.getDefaultAgentTaskTimeout(false)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1393,actionContext.setTimeout(Short.valueOf(s_configuration.getDefaultAgentTaskTimeout(false)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1453,actionContext.setTimeout(Short.valueOf(s_configuration.getDefaultAgentTaskTimeout(false)));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,222,TaskWrapper expandedTW = new TaskWrapper(tw.getService(), tw.getComponent(), hostSubset, tw.getParams(), tw.getTasks());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapper.java,45,public TaskWrapper(String s, String c, Set<String> hosts, Task... tasks) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapper.java,46,this(s, c, hosts, null, Arrays.asList(tasks));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,443,ComponentInfo componentInfo = ambariMetaInfo.getComponent(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,444,stackId.getStackName(), stackId.getStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,445,serviceName, componentName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManager.java,142,if (FilterLogData.INSTANCE.isAllowed(jsonObj, inputMarker)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/converter/AbstractSearchRequestQueryConverter.java,35,int page = StringUtils.isNumeric(request.getPage()) ? new Integer(request.getPage()) : 0;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/converter/AbstractSearchRequestQueryConverter.java,36,int pageSize = StringUtils.isNumeric(request.getPageSize()) ? new Integer(request.getPageSize()) : 99999;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/converter/AbstractSearchRequestQueryConverter.java,37,PageRequest pageRequest = new PageRequest(page, pageSize, sort(request));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/converter/AbstractSearchRequestQueryConverter.java,38,query.setPageRequest(pageRequest);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditLogsManager.java,88,public AuditLogResponse getLogs(AuditLogRequest auditLogRequest) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/AuditLogsManager.java,89,return getLogAsPaginationProvided(conversionService.convert(auditLogRequest, SimpleQuery.class), auditSolrDao, "/audit/logs");
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ManagerBase.java,29,import org.apache.commons.collections.CollectionUtils;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ManagerBase.java,48,Long totalLogs = solrDoaBase.count(lastPageQuery);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ManagerBase.java,49,int startIndex = Integer.parseInt("" + ((totalLogs / maxRows) * maxRows));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ManagerBase.java,50,int numberOfLogsOnLastPage = Integer.parseInt("" + (totalLogs - startIndex));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ManagerBase.java,79,if (CollectionUtils.isNotEmpty(docList)) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ManagerBase.java,82,logResponse.setTotalCount(docList.getNumFound());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,138,if(logResponse == null){
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,143,return getLogAsPaginationProvided(solrQuery, serviceLogsSolrDao, event);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/converter/ServiceLogLevelDateRangeRequestQueryConverter.java,21,import com.google.common.base.Splitter;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/converter/ServiceLogLevelDateRangeRequestQueryConverter.java,52,if (StringUtils.isNotEmpty(request.getLevel())) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/converter/ServiceLogLevelDateRangeRequestQueryConverter.java,53,List<String> levels = Splitter.on(",").splitToList(request.getLevel());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/converter/ServiceLogLevelDateRangeRequestQueryConverter.java,54,if (levels.size() > 1) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/converter/ServiceLogLevelDateRangeRequestQueryConverter.java,55,solrQuery.addFilterQuery(String.format("%s:(%s)", LEVEL, StringUtils.join(levels, " OR ")));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/converter/ServiceLogLevelDateRangeRequestQueryConverter.java,57,solrQuery.addFilterQuery(String.format("%s:%s", LEVEL, levels.get(0)));
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,147,public GroupListResponse getHosts() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,148,return getFields(HOST, SolrHostLogData.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,151,public GroupListResponse getComponents() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,152,return getFields(COMPONENT, SolrComponentTypeLogData.class);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,165,public CountDataListResponse getFieldCount(String field) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,166,return responseDataGenerator.generateCountResponseByField(serviceLogsSolrDao.process(conversionService.convert(field, SimpleFacetQuery.class)), field);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,169,public CountDataListResponse getComponentsCount() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,170,return getFieldCount(COMPONENT);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,173,public CountDataListResponse getHostsCount() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,174,return getFieldCount(HOST);
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,526,private <T extends LogData> GroupListResponse getFields(String field, Class<T> clazz) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/model/request/SearchRequest.java,21,import org.apache.ambari.logsearch.common.Marker;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/model/request/SearchRequest.java,24,public interface SearchRequest {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/ServiceLogsResource.java,78,public GroupListResponse getHosts() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/ServiceLogsResource.java,79,return serviceLogsManager.getHosts();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/ServiceLogsResource.java,86,public GroupListResponse getComponents() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/ServiceLogsResource.java,87,return serviceLogsManager.getComponents();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/ServiceLogsResource.java,102,public CountDataListResponse getComponentsCount() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/ServiceLogsResource.java,103,return serviceLogsManager.getComponentsCount();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/ServiceLogsResource.java,110,public CountDataListResponse getHostsCount() {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/ServiceLogsResource.java,111,return serviceLogsManager.getHostsCount();
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/conf/ApiDocConfig.java,28,import java.net.UnknownHostException;
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/conf/ApiDocConfig.java,44,public BeanConfig swaggerConfig() throws UnknownHostException {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,67,if (event != null) {
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,68,LOG_PERFORMANCE.info("\n Username :- " + LogSearchContext.getCurrentUsername() + " Event :- " + event + " SolrQuery :- " +
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,69,solrQuery + "\nQuery Time Execution :- " + queryResponse.getQTime() + " Total Time Elapsed is :- " +
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/dao/SolrDaoBase.java,70,queryResponse.getElapsedTime());
ambari-logsearch/ambari-logsearch-portal/src/main/java/org/apache/ambari/logsearch/rest/ServiceLogsResource.java,70,public ServiceLogResponse searchSolrData(@BeanParam ServiceLogRequest request) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,44,import org.apache.ambari.server.agent.AgentCommand.AgentCommandType;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,353,LOG.debug("Processing {} in progress stages ", stages.size());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,356,if (stages.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,368,HashSet<String> hostsWithTasks = getListOfHostsWithPendingTask(stages);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,369,actionQueue.updateListOfHostsWithPendingTask(hostsWithTasks);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,371,stages = filterParallelPerHostStages(stages);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,542,private HashSet<String> getListOfHostsWithPendingTask(List<Stage> stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,543,HashSet<String> hostsWithTasks = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,544,for (Stage s : stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,545,hostsWithTasks.addAll(s.getHosts());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,547,return hostsWithTasks;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,575,private List<Stage> filterParallelPerHostStages(List<Stage> stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,576,List<Stage> retVal = new ArrayList<Stage>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,577,Set<String> affectedHosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,578,Set<Long> affectedRequests = new HashSet<Long>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,580,for (Stage s : stages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,581,long requestId = s.getRequestId();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,584,LOG.trace("==> Processing stage: {}/{} ({}) for {}", requestId, s.getStageId(), s.getRequestContext());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,592,for (String host : s.getHosts()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,595,if (affectedHosts.contains(host)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,597,LOG.trace("===>  Skipping stage since it utilizes at least one host that a previous stage requires: {}/{} ({})", s.getRequestId(), s.getStageId(), s.getRequestContext());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,600,addStage &= false;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,602,if (!Stage.INTERNAL_HOSTNAME.equalsIgnoreCase(host) && !isStageHasBackgroundCommandsOnly(s, host)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,603,LOG.trace("====>  Adding host to affected hosts: {}", host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,604,affectedHosts.add(host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,607,addStage &= true;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,615,if (affectedRequests.contains(requestId)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,616,if (LOG.isTraceEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,617,LOG.trace("===>  Skipping stage since the request it is in has been processed already: {}/{} ({})", s.getRequestId(), s.getStageId(), s.getRequestContext());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,620,addStage = false;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,622,if (LOG.isTraceEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,623,LOG.trace("====>  Adding request to affected requests: {}", requestId);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,626,affectedRequests.add(requestId);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,627,addStage &= true;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,635,LOG.trace("===>  Adding stage to return value: {}/{} ({})", s.getRequestId(), s.getStageId(), s.getRequestContext());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,638,retVal.add(s);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,645,private boolean isStageHasBackgroundCommandsOnly(Stage s, String host) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,646,for (ExecutionCommandWrapper c : s.getExecutionCommands(host)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,647,if (c.getCommandType() != AgentCommandType.BACKGROUND_EXECUTION_COMMAND) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,648,return false;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,651,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,219,results.add(toResource(cache, entity, propertyIds));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,276,private Resource toResource(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,56,import org.apache.ambari.server.state.UpgradeHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,91,private static UpgradeHelper s_upgradeHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,237,Map<Long, Resource> resultMap = new HashMap<Long, Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,240,Resource r = toResource(entity, requestPropertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,241,resultMap.put(entity.getStageId(), r);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,244,if (!resultMap.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,245,if (null != clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,246,Set<Resource> stages = s_upgradeHelper.getStageResources(clusterName,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,247,requestId, new ArrayList<Long>(resultMap.keySet()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,249,for (Resource stage : stages) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,250,Long l = (Long) stage.getPropertyValue(StageResourceProvider.STAGE_STAGE_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,252,Resource r = resultMap.get(l);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,253,if (null != r) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,254,for (String propertyId : StageResourceProvider.PROPERTY_IDS) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,256,Object value = stage.getPropertyValue(propertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,257,if (StageResourceProvider.PROPERTIES_TO_MASK_PASSWORD_IN.contains(propertyId) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,258,value.getClass().equals(String.class) && !StringUtils.isBlank((String) value)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,259,value = SecretReference.maskPasswordInPropertyMap((String) value);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,261,setResourceProperty(r, STAGE_MAPPED_IDS.get(propertyId), value, requestPropertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,266,results.addAll(resultMap.values());
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,21,import javax.persistence.Column;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,22,import javax.persistence.Id;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,39,private Long stageId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,52,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,53,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,54,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,56,StageEntityPK that = (StageEntityPK) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,58,if (requestId != null ? !requestId.equals(that.requestId) : that.requestId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,59,if (stageId != null ? !stageId.equals(that.stageId) : that.stageId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,61,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,66,int result = requestId != null ? requestId.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,67,result = 31 * result + (stageId != null ? stageId.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntityPK.java,68,return result;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,33,import org.apache.ambari.server.controller.internal.StageResourceProvider;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,683,throws UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException, SystemException {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,684,ClusterController clusterController = ClusterControllerHelper.getClusterController();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,686,Request request = PropertyHelper.getReadRequest();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,689,Predicate p1 = new PredicateBuilder().property(StageResourceProvider.STAGE_CLUSTER_NAME).equals(clusterName).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,690,Predicate p2 = new PredicateBuilder().property(StageResourceProvider.STAGE_REQUEST_ID).equals(requestId).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,691,Predicate p3 = null;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,693,if (1 == stageIds.size()) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,694,p3 = new PredicateBuilder().property(StageResourceProvider.STAGE_STAGE_ID).equals(stageIds.get(0)).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,696,PredicateBuilder pb = new PredicateBuilder();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,698,int i = 0;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,699,for (Long stageId : stageIds) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,700,if (i++ < stageIds.size()-1) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,701,pb = pb.property(StageResourceProvider.STAGE_STAGE_ID).equals(stageId).or();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,703,pb.property(StageResourceProvider.STAGE_STAGE_ID).equals(stageId);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,707,p3 = pb.toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,710,QueryResponse response = clusterController.getResources(Resource.Type.Stage,
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,711,request, new AndPredicate(p1, p2, p3));
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,713,return response.getResources();
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsSink.java,74,return collectorUri;
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsSink.java,140,if (protocol.toLowerCase().startsWith("https://")) {
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsSink.java,331,String attributeName, Double attributeValue) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,338,cluster = getManagementController().getClusters().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,424,cluster = getManagementController().getClusters().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,487,cluster = getManagementController().getClusters().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,506,long clusterId = cluster.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,547,setUpgradeRequestStatus(clusterId, requestId, status, propertyMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,550,upgradeEntity.setSuspended(suspended);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,551,s_upgradeDAO.merge(upgradeEntity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,935,upgradeEntity.setRequestId(request.getId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1668,private void setUpgradeRequestStatus(long clusterId, long requestId, HostRoleStatus status,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1669,Map<String, Object> propertyMap) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1697,if (HostRoleStatus.ABORTED == status) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1698,if (!internalStatus.isCompletedState()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1699,actionManager.cancelRequest(requestId, reason);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1701,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1702,Cluster cluster = clusters.get().getClusterById(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1703,UpgradeEntity upgradeEntity = s_upgradeDAO.findUpgradeByRequestId(requestId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1704,upgradeEntity.setSuspended(true);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1705,s_upgradeDAO.merge(upgradeEntity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1707,cluster.setUpgradeEntity(null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1709,LOG.warn("Could not clear upgrade entity for cluster with id {}", clusterId, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1724,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1725,Cluster cluster = clusters.get().getClusterById(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1726,UpgradeEntity lastUpgradeItemForCluster = s_upgradeDAO.findLastUpgradeOrDowngradeForCluster(cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1727,lastUpgradeItemForCluster.setSuspended(false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1728,s_upgradeDAO.merge(lastUpgradeItemForCluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1730,cluster.setUpgradeEntity(lastUpgradeItemForCluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1732,LOG.warn("Could not clear upgrade entity for cluster with id {}", clusterId, e);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertStateChangedListener.java,230,if (null != cluster.getUpgradeEntity() || cluster.isUpgradeSuspended()) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,226,if (cluster.getUpgradeEntity() != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UpgradeDAO.java,112,entityManager.flush();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UpgradeEntity.java,46,table = "ambari_sequences", pkColumnName = "sequence_name", valueColumnName = "sequence_value",
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UpgradeEntity.java,164,public void setRequestId(Long id) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UpgradeEntity.java,165,requestId = id;
ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java,678,UpgradeEntity getUpgradeEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java,707,UpgradeEntity getUpgradeInProgress();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1024,public UpgradeEntity getUpgradeInProgress() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1026,UpgradeEntity upgradeInProgress = getUpgradeEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1027,if (null != upgradeInProgress) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1028,return upgradeInProgress;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1033,UpgradeEntity mostRecentUpgrade = upgradeDAO.findLastUpgradeOrDowngradeForCluster(getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1034,if (mostRecentUpgrade != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1035,if (mostRecentUpgrade.isSuspended()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1036,return mostRecentUpgrade;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1041,List<HostRoleCommandEntity> commands = hostRoleCommandDAO.findByRequestIdAndStatuses(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1042,mostRecentUpgrade.getRequestId(), HostRoleStatus.IN_PROGRESS_STATUSES);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1044,if (!commands.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1045,return mostRecentUpgrade;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1049,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3440,public UpgradeEntity getUpgradeEntity() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3456,String msg = "Unable to set upgrade entiry " + upgradeEntity + " for cluster "
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3457,+ getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3458,LOG.warn(msg);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3459,throw new AmbariException(msg, e);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3468,UpgradeEntity lastUpgradeItemForCluster = upgradeDAO.findLastUpgradeForCluster(clusterId,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3469,Direction.UPGRADE);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3471,if (null != lastUpgradeItemForCluster) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3472,return lastUpgradeItemForCluster.isSuspended();
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,176,UpgradeEntity currentUpgrade = cluster.getUpgradeEntity();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,80,private final Logger LOG = LoggerFactory.getLogger(getClass());
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/message/job/Result.java,28,private final List<ColumnDescription> columns;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/message/job/Result.java,29,private final List<Row> rows;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,21,import java.util.ArrayList;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,22,import java.util.List;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,23,import java.util.concurrent.TimeUnit;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,24,import javax.annotation.Nullable;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,45,import com.google.common.base.Function;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,46,import com.google.common.base.Joiner;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,47,import com.google.common.base.Optional;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,48,import com.google.common.collect.FluentIterable;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,49,import com.google.common.collect.ImmutableList;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,50,import com.google.common.collect.Lists;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,52,import akka.actor.ActorRef;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,53,import akka.actor.ActorSystem;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/client/DDLDelegatorImpl.java,54,import akka.actor.Inbox;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/internal/parsers/TableMetaParser.java,29,T parse(String database, String table, List<Row> createTableStatementRows, List<Row> describeFormattedRows);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/internal/parsers/TableMetaParserImpl.java,58,public TableMeta parse(String database, String table, List<Row> createTableStatementRows, List<Row> describeFormattedRows) {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/internal/parsers/TableMetaParserImpl.java,121,tableStats.setColumnStatsAccurate(columnStatsAccurate);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,150,return tableMetaParser.parse(databaseName, tableName, createTableStatementRows, describeFormattedRows);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,367,return createColumnStats(row, headerMap);
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,379,LOG.error("Column stats not found in the fetched results.");
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,380,throw new ServiceException("Could not find the column stats in the result.");
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,391,private ColumnStats createColumnStats(String[] row, Map<Integer, String> headerMap) throws ServiceException {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/DDLProxy.java,395,ColumnStats columnStats = new ColumnStats();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,406,if(ex instanceof ConnectionException){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,407,ConnectionException connectionException = (ConnectionException) ex;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,408,Throwable cause = connectionException.getCause();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,409,if(cause instanceof SQLException){
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,410,SQLException sqlException = (SQLException) cause;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,412,return;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/JdbcConnector.java,417,sender().tell(new ExecutionFailed("Cannot connect to hive"), ActorRef.noSender());
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/actor/message/job/Failure.java,21,public class Failure {
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/ConnectionService.java,77,return Response.status(Response.Status.UNAUTHORIZED).build();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/ConnectionService.java,109,return Response.status(Response.Status.UNAUTHORIZED).build();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/ConnectionService.java,110,else
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/browser/ConnectionService.java,140,return getOKResponse();
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/jobs/JobService.java,145,return Response.status(401).build();
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,988,installAutoInstance(clusterId, clusterName, viewEntity, viewName, viewConfig, autoConfig, roles);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1000,private void installAutoInstance(Long clusterId, String clusterName, ViewEntity viewEntity, String viewName, ViewConfig viewConfig, AutoInstanceConfig autoConfig, Collection<String> roles) throws SystemException, ValidationException {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1934,installAutoInstance(clusterId, clusterName, viewEntity, viewName, viewConfig, autoInstanceConfig, roles);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/services/HelpService.java,24,import org.apache.ambari.view.pig.persistence.InstanceKeyValueStorage;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/services/HelpService.java,27,import org.apache.commons.lang.exception.ExceptionUtils;
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,163,HashMap<String, String> workflowConfigs = new HashMap<String, String>();
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,164,workflowConfigs.put("nameNode", viewContext.getProperties().get("webhdfs.url"));
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,165,workflowConfigs.put("resourceManager", viewContext.getProperties().get("yarn.resourcemanager.address"));
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,166,workflowConfigs.put("userName", viewContext.getUsername());
contrib/views/wfmanager/src/main/java/org/apache/oozie/ambari/view/OozieProxyImpersonator.java,167,return Response.ok(workflowConfigs).build();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,163,public List<StageWrapper> build(UpgradeContext upgradeContext,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,164,List<StageWrapper> stageWrappers) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,165,List<StageWrapper> results = new ArrayList<StageWrapper>(stageWrappers);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,172,List<StageWrapper> befores = fromProxies(upgradeContext.getDirection(), initialBatch);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,192,results.addAll(fromProxies(upgradeContext.getDirection(), finalBatches));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,198,Map<String, List<TaskProxy>> wrappers) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,199,List<StageWrapper> results = new ArrayList<StageWrapper>();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,216,wrapper = new StageWrapper(t.type, t.message, t.getTasksArray());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,219,execwrappers.add(new StageWrapper(StageWrapper.Type.RESTART, t.message, t.getTasksArray()));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,348,private TaskWrapper[] getTasksArray() {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ColocatedGrouping.java,349,return tasks.toArray(new TaskWrapper[0]);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapperBuilder.java,57,if (t.getType().equals(Task.Type.CONFIGURE) || t.getType().equals(Task.Type.MANUAL)) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapperBuilder.java,59,if (null != hostsType.hosts && !hostsType.hosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapperBuilder.java,60,collection.add(new TaskWrapper(service, component, Collections.singleton(ambariServerHostname), params, t));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,448,File jsonFileName = new File(TMP_PATH + File.separator + componentName + "-configuration.json");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,449,File tmpDirectory = new File(jsonFileName.getParent());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,461,printWriter = new PrintWriter(jsonFileName.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,468,String cmd = pythonCmd + " " + commandScriptAbsolute + " generate_configs " + jsonFileName.getAbsolutePath() + " " +
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,487,List<CommandLineThreadWrapper> pythonCmdThreads = executeCommands(processExecutor, pythonCompressFilesCmds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,490,Integer timeout =  configs.getExternalScriptTimeout();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,491,waitForAllThreadsToJoin(processExecutor, pythonCmdThreads, timeout);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,89,public List<Stage> getStagesInProgress();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,286,public List<Stage> getStagesInProgress() {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,287,List<StageEntity> stageEntities = stageDAO.findByCommandStatuses(
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,289,return getStagesForEntities(stageEntities);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,350,List<Stage> stages = db.getStagesInProgress();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,24,import java.util.LinkedList;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,27,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,63,private static Map<HostRoleStatus, EnumSet<HostRoleStatus>> manualTransitionMap = new HashMap<HostRoleStatus, EnumSet<HostRoleStatus>>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,138,public List<Long> findIdsByRequestId(long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,139,TypedQuery<Long> query = entityManagerProvider.get().createNamedQuery(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,155,public List<StageEntity> findByStageIds(Long requestId, Set<Long> stageIds) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,156,List<StageEntity> stageEntities = new LinkedList<StageEntity>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,158,for (StageEntity stage : findByRequestId(requestId)) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,159,if (stageIds.contains(stage.getStageId())) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,160,stageEntities.add(stage);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,163,return stageEntities;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,167,public List<StageEntity> findByRequestIdAndCommandStatuses(Long requestId, Collection<HostRoleStatus> statuses) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,168,TypedQuery<StageEntity> query = entityManagerProvider.get().createNamedQuery(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,171,query.setParameter("requestId", requestId);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,172,query.setParameter("statuses", statuses);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,173,return daoUtils.selectList(query);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,177,public List<StageEntity> findByCommandStatuses(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,178,Collection<HostRoleStatus> statuses) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,179,TypedQuery<StageEntity> query = entityManagerProvider.get().createNamedQuery(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,182,query.setParameter("statuses", statuses);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,183,return daoUtils.selectList(query);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,188,Map<Long, String> resultMap = new HashMap<Long, String>();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/StageDAO.java,262,JpaSortBuilder<StageEntity> sortBuilder = new JpaSortBuilder<StageEntity>();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,48,name = "StageEntity.findByCommandStatuses",
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,49,query = "SELECT stage from StageEntity stage WHERE stage.stageId IN (SELECT roleCommand.stageId from HostRoleCommandEntity roleCommand WHERE roleCommand.status IN :statuses AND roleCommand.stageId = stage.stageId AND roleCommand.requestId = stage.requestId ) ORDER BY stage.requestId, stage.stageId"),
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,52,query = "SELECT stage from StageEntity stage WHERE stage.stageId IN (SELECT roleCommand.stageId from HostRoleCommandEntity roleCommand WHERE roleCommand.requestId = :requestId AND roleCommand.status IN :statuses AND roleCommand.stageId = stage.stageId AND roleCommand.requestId = stage.requestId ) ORDER BY stage.stageId"),
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/StageEntity.java,54,name = "StageEntity.findIdsByRequestId",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,35,import org.apache.ambari.server.actionmanager.Request;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,39,import org.apache.ambari.server.controller.internal.CalculatedStatus;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,41,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,47,import org.springframework.security.core.context.SecurityContextHolder;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,84,new HashMap<Long, ConcurrentMap<String, Object>>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,91,private final String serverHostName;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,137,serverHostName = StageUtils.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,236,map = new ConcurrentHashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,249,private void cleanRequestShareDataContexts() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,251,if (requestSharedDataMap.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,252,return;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,255,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,257,synchronized (requestSharedDataMap) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,258,Set<Long> requestIds = requestSharedDataMap.keySet();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,259,List<Request> requests = db.getRequests(requestIds);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,260,for (Request request : requests) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,263,CalculatedStatus calculatedStatus = CalculatedStatus.statusFromStages(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,264,request.getStages());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,267,HostRoleStatus status = calculatedStatus.getStatus();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,271,switch (status) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,272,case FAILED:
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,273,case COMPLETED:
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,274,requestSharedDataMap.remove(request.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,275,break;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,276,default:
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,277,break;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,282,LOG.warn("Unable to clear the server-side action request cache", exception);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,454,cleanRequestShareDataContexts();
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,21,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,26,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/AbstractKerberosDescriptorContainer.java,247,list.add(identityToAdd);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosIdentityDescriptor.java,23,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,179,Map<String, Map<String, String>> userProvidedProperties = getUserProvidedProperties(topology, existingConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,187,blueprintConfig.getProperties(), blueprintConfig.getPropertyAttributes()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,21,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,39,import org.apache.ambari.server.topology.RequiredPasswordValidator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,180,(Collection<Map<String, String>>) properties.get(CONFIGURATIONS_PROPERTY));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,195,catch (QuickLinksProfileEvaluationException ex) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,272,return Collections.<TopologyValidator>singletonList(new RequiredPasswordValidator(defaultPassword));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,307,(Collection<Map<String, Object>>) properties.get(HOSTGROUPS_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,337,hostGroupProperties.get(HOSTGROUP_HOSTS_PROPERTY), hostGroupInfo);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,341,(Collection<Map<String, String>>) hostGroupProperties.get(CONFIGURATIONS_PROPERTY)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,353,throws InvalidTopologyTemplateException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,357,hostGroupProperties.get(HOSTGROUP_HOST_COUNT_PROPERTY))));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,359,hostGroupInfo.getRequestedHostCount(), hostGroupInfo.getHostGroupName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,366,hostGroupInfo.getHostGroupName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,376,String.format("Unable to compile host predicate '%s': %s", hostPredicate, e), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,391,throws InvalidTopologyTemplateException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,411,hostProperties.get(HOSTGROUP_HOST_FQDN_PROPERTY),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,412,hostProperties.get(HOSTGROUP_HOST_RACK_INFO_PROPERTY));
ambari-server/src/main/java/org/apache/ambari/server/topology/RequiredPasswordValidator.java,20,package org.apache.ambari.server.topology;
ambari-server/src/main/java/org/apache/ambari/server/topology/RequiredPasswordValidator.java,22,import org.apache.ambari.server.controller.internal.Stack;
ambari-server/src/main/java/org/apache/ambari/server/topology/RequiredPasswordValidator.java,23,import org.apache.ambari.server.state.PropertyInfo;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,171,startTime = hostRoleCommandEntity.getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,172,originalStartTime = hostRoleCommandEntity.getOriginalStartTime();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,174,lastAttemptTime = hostRoleCommandEntity.getLastAttemptTime();
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,202,LOG.debug("Comparing taskId: {}, original start time: {}, now: {}",
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,203,hrc.getTaskId(), hrc.getOriginalStartTime(), now);
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,211,if (canRetryCommand(hrc) && hrc.getOriginalStartTime() > 0 && hrc.getOriginalStartTime() < now) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,212,Long retryTimeWindow = hrc.getOriginalStartTime() + MAX_TIMEOUT_MS;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,213,Long deltaMS = retryTimeWindow - now;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,215,if (deltaMS > 0) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,216,String originalStartTimeString = m_fullDateFormat.format(new Date(hrc.getOriginalStartTime()));
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,217,String deltaString = m_deltaDateFormat.format(new Date(deltaMS));
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,218,LOG.info("Retrying task with id: {}, attempts: {}, original start time: {}, time til timeout: {}",
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,219,hrc.getTaskId(), hrc.getAttemptCount(), originalStartTimeString, deltaString);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,496,if (operatingSystem.isAmbariManagedRepos()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,179,checkTopologyTables();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,379,static void checkTopologyTables() {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,380,LOG.info("Checking Topology tables");
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,382,String SELECT_REQUEST_COUNT_QUERY = "select count(tpr.id) from topology_request tpr";
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,384,String SELECT_JOINED_COUNT_QUERY = "select count(DISTINCT tpr.id) from topology_request tpr join " +
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,393,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,395,if (connection == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,396,if (dbAccessor == null) {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,397,dbAccessor = injector.getInstance(DBAccessor.class);
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,399,connection = dbAccessor.getConnection();
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,402,try {
ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java,403,statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,203,Long logicalId = logicalRequestEntity.getId();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,205,try {
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,209,ambariContext.getNextRequestId();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,210,allRequests.get(clusterTopology).add(logicalRequestFactory.createRequest(
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,211,logicalId, replayedRequest, clusterTopology, logicalRequestEntity));
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,213,throw new RuntimeException("Failed to construct logical request during replay: " + e, e);
ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariBasicAuthenticationFilter.java,28,import org.apache.ambari.server.audit.event.AuditEvent;
ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariBasicAuthenticationFilter.java,32,import org.apache.ambari.server.security.authorization.AuthorizationHelper;
ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariBasicAuthenticationFilter.java,117,HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;
ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariBasicAuthenticationFilter.java,119,if (auditLogger.isEnabled() && shouldApply(httpServletRequest) && (AuthorizationHelper.getAuthenticatedName() == null)) {
ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariBasicAuthenticationFilter.java,125,.build();
ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariBasicAuthenticationFilter.java,126,auditLogger.log(loginFailedAuditEvent);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,817,ConfigurationRequest request) throws AmbariException, AuthorizationException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,934,request.getVersionTag(), propertiesAttributes);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,946,String versionTag, Map<String, Map<String, String>> propertiesAttributes) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,949,propertiesAttributes);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1532,response = updateCluster(request, requestProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1686,configurationResponses.add(createConfiguration(cr));
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,103,Gson gson, AmbariEventPublisher eventPublisher, LockFactory lockFactory) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,144,persist(entity);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,329,private void persist(ClusterConfigEntity entity) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,336,cluster.refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,378,clusterDAO.merge(clusterEntity, true);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,401,getController().updateClusters(Collections.singleton(clusterRequest), null);
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,39,private Short timeout;
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,58,Short timeout, String expectedServiceName,
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,103,public Short getTimeout() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,107,public void setTimeout(Short timeout) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,695,actionContext.setTimeout(Short.valueOf(configuration.getDefaultAgentTaskTimeout(true)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1585,actionContext.setTimeout(Short.valueOf((short) -1));
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,39,private Short defaultTimeout;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,57,TargetHostType targetType, Short defaultTimeout, Set<RoleAuthorization> permissions) {
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,125,public Short getDefaultTimeout() {
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,129,public void setDefaultTimeout(Short defaultTimeout) {
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,46,public static final Short MIN_TIMEOUT = 60;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,51,private static final Short MAX_TIMEOUT = Short.MAX_VALUE-1;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,114,Short defaultTimeout = MIN_TIMEOUT;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,116,defaultTimeout = Short.parseShort(ad.getDefaultTimeout());
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,140,Short defaultTimeout, StringBuilder reason) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultStatus.java,134,m_msg = e.toString();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogFeederFilter.java,28,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogFeederFilter.java,29,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogFeederFilter.java,30,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogFeederFilterWrapper.java,27,import org.codehaus.jackson.annotate.JsonAutoDetect;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogFeederFilterWrapper.java,28,import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/logconfig/LogFeederFilterWrapper.java,29,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/FileUtil.java,35,import org.codehaus.jackson.map.ObjectMapper;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/util/FileUtil.java,36,import org.codehaus.jackson.type.TypeReference;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/AbstractStateFileZkCommand.java,23,import org.codehaus.jackson.JsonNode;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/AbstractStateFileZkCommand.java,24,import org.codehaus.jackson.map.ObjectMapper;
ambari-logsearch/ambari-logsearch-solr-client/src/main/java/org/apache/ambari/logsearch/solr/commands/UpdateStateFileZkCommand.java,26,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentEnv.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentEnv.java,22,import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
ambari-server/src/main/java/org/apache/ambari/server/agent/CommandReport.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentRecoveryReport.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentsResponse.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/DiskInfo.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeat.java,25,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/HostInfo.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/HostStatus.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/RecoveryReport.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/Register.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/agent/RegistrationResponse.java,25,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/AlertStateSummary.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/AlertStateValues.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/AlertStateValues.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/AlertSummaryGroupedRenderer.java,36,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParser.java,34,import org.codehaus.jackson.JsonNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParser.java,35,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParser.java,60,Iterator<JsonNode> iterator = root.getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParser.java,115,Iterator<String> iterator = node.getFieldNames();
ambari-server/src/main/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParser.java,121,Iterator<JsonNode>       arrayIter = child.getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,24,import org.apache.ambari.server.api.services.Result;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,27,import org.apache.ambari.server.api.util.TreeNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,28,import org.codehaus.jackson.JsonFactory;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,29,import org.codehaus.jackson.JsonGenerator;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,30,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,31,import org.codehaus.jackson.util.DefaultPrettyPrinter;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,33,import java.io.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,34,import java.nio.charset.Charset;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,35,import java.util.LinkedHashMap;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,36,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,100,p.indentArraysWith(new DefaultPrettyPrinter.Lf2SpacesIndenter());
ambari-server/src/main/java/org/apache/ambari/server/api/services/serializers/JsonSerializer.java,251,p.indentArraysWith(new DefaultPrettyPrinter.Lf2SpacesIndenter());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorResponse.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,56,import org.codehaus.jackson.JsonNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,57,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,58,import org.codehaus.jackson.map.SerializationConfig;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,59,import org.codehaus.jackson.node.ArrayNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,60,import org.codehaus.jackson.node.ObjectNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,61,import org.codehaus.jackson.node.TextNode;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,118,this.mapper.configure(SerializationConfig.Feature.INDENT_OUTPUT, true);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,233,Iterator<JsonNode> servicesIter = services.getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,238,Iterator<JsonNode> componentsIter = components.getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,243,String componentName = componentInfo.get(COMPONENT_NAME_PROPERTY).getTextValue();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,258,Iterator<JsonNode> servicesIter = services.getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,267,String serviceName = serviceVersion.get("service_name").getTextValue();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,399,Iterator<JsonNode> iterator = root.get("items").getElements();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,402,String hostName = next.get("Hosts").get("host_name").getTextValue();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponse.java,28,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponse.java,29,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/validations/ValidationResponse.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/AlertDefinitionResponse.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceConfigVersionResponse.java,23,import java.util.Objects;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceConfigVersionResponse.java,33,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceConfigVersionResponse.java,34,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/controller/WidgetResponse.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceFilter.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceFilter.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,46,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,70,import org.codehaus.jackson.node.ArrayNode;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,71,import org.codehaus.jackson.node.JsonNodeFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,72,import org.codehaus.jackson.node.ObjectNode;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/HostComponentLoggingInfo.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogFileDefinitionInfo.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogLevelQueryResponse.java,20,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogLevelQueryResponse.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogLineResult.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogLineResult.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogQueryResponse.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogQueryResponse.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogQueryResponse.java,23,import org.codehaus.jackson.map.util.JSONPObject;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LogQueryResponse.java,25,import java.util.LinkedList;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,58,import org.codehaus.jackson.map.AnnotationIntrospector;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,59,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,60,import org.codehaus.jackson.map.ObjectReader;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,61,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,62,import org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/LoggingRequestHelperImpl.java,427,mapper.getSerializationConfig().setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
ambari-server/src/main/java/org/apache/ambari/server/controller/logging/NameValuePair.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaMetric.java,25,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaReportPropertyProvider.java,31,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaReportPropertyProvider.java,32,import org.codehaus.jackson.type.TypeReference;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,27,import org.codehaus.jackson.map.AnnotationIntrospector;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,28,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,29,import org.codehaus.jackson.map.ObjectReader;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,30,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,31,import org.codehaus.jackson.xc.JaxbAnnotationIntrospector;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,60,mapper = new ObjectMapper();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/MetricsRequestHelper.java,64,mapper.getSerializationConfig().setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,42,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,43,import org.codehaus.jackson.type.TypeReference;
ambari-server/src/main/java/org/apache/ambari/server/hooks/users/UserHookService.java,48,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/users/PostUserCreationHookServerAction.java,37,import org.apache.ambari.server.topology.AsyncCallableService;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/users/PostUserCreationHookServerAction.java,39,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/stack/QuickLinksConfigurationModule.java,23,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/stack/ServiceDirectory.java,31,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/stack/ServiceDirectory.java,32,import org.codehaus.jackson.type.TypeReference;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,37,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,38,import org.codehaus.jackson.type.TypeReference;
ambari-server/src/main/java/org/apache/ambari/server/stack/ThemeModule.java,23,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/state/Alert.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/ChangedConfigInfo.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/ClusterHealthReport.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java,25,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java,26,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java,27,import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
ambari-server/src/main/java/org/apache/ambari/server/state/HostConfig.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/HostConfig.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java,24,import org.apache.ambari.server.state.svccomphost.*;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java,25,import org.codehaus.jackson.annotate.JsonCreator;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHostEvent.java,26,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,31,import org.codehaus.jackson.annotate.JsonIgnore;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,32,import org.codehaus.jackson.map.annotate.JsonFilter;
ambari-server/src/main/java/org/apache/ambari/server/state/UserGroupInfo.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/ValueAttributesInfo.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/ValueAttributesInfo.java,22,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/ValueEntryInfo.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertGroup.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertTarget.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Check.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Check.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Check.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Link.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Link.java,26,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Link.java,27,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Link.java,28,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Port.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Port.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Port.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Protocol.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Protocol.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/Protocol.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinks.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinks.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinks.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinksConfiguration.java,21,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinksConfiguration.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinks/QuickLinksConfiguration.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Component.java,23,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Component.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Component.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Filter.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Filter.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Filter.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkAttributeFilter.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkNameFilter.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfile.java,23,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfile.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfile.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,26,import org.codehaus.jackson.JsonParseException;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,27,import org.codehaus.jackson.JsonParser;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,28,import org.codehaus.jackson.JsonProcessingException;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,29,import org.codehaus.jackson.Version;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,30,import org.codehaus.jackson.map.DeserializationContext;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,31,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,32,import org.codehaus.jackson.map.deser.std.StdDeserializer;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,33,import org.codehaus.jackson.map.module.SimpleModule;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,34,import org.codehaus.jackson.node.ObjectNode;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,94,ObjectNode root = (ObjectNode) mapper.readTree(parser);
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,97,for (String fieldName: ImmutableList.copyOf(root.getFieldNames())) {
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,101,throw new JsonParseException(PARSE_ERROR_MESSAGE_AMBIGUOUS_FILTER, parser.getCurrentLocation());
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,107,throw new JsonParseException(PARSE_ERROR_MESSAGE_AMBIGUOUS_FILTER, parser.getCurrentLocation());
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,119,throw new JsonParseException(PARSE_ERROR_MESSAGE_INVALID_JSON_TAG + invalidAttributes,
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java,125,return mapper.readValue(root, filterClass);
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Service.java,23,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Service.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Service.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableService.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableService.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableService.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableVersion.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableVersion.java,23,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/AvailableVersion.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
ambari-server/src/main/java/org/apache/ambari/server/state/repository/ManifestServiceInfo.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/Batch.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/Batch.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/BatchRequest.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/BatchRequest.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/BatchSettings.java,20,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/BatchSettings.java,21,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/Schedule.java,20,import org.codehaus.jackson.annotate.JsonIgnore;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/Schedule.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/Schedule.java,22,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/services/MetricsRetrievalService.java,41,import org.codehaus.jackson.map.DeserializationConfig;
ambari-server/src/main/java/org/apache/ambari/server/state/services/MetricsRetrievalService.java,42,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/state/services/MetricsRetrievalService.java,43,import org.codehaus.jackson.map.ObjectReader;
ambari-server/src/main/java/org/apache/ambari/server/state/services/MetricsRetrievalService.java,183,jmxObjectMapper.configure(DeserializationConfig.Feature.USE_ANNOTATIONS, false);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/MetricDefinition.java,21,import org.codehaus.jackson.annotate.JsonIgnore;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/MetricDefinition.java,22,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/WidgetLayout.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/WidgetLayoutInfo.java,21,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigCondition.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigCondition.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigCondition.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigPlacement.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigPlacement.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ConfigPlacement.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Layout.java,23,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Layout.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Layout.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Placement.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Placement.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Placement.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Section.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Section.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Section.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Subsection.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Subsection.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Subsection.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Tab.java,23,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Tab.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Tab.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/TabLayout.java,23,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/TabLayout.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/TabLayout.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Theme.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Theme.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Theme.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ThemeConfiguration.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ThemeConfiguration.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/ThemeConfiguration.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Unit.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Unit.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Unit.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Widget.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Widget.java,23,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/Widget.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/WidgetEntry.java,23,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/WidgetEntry.java,24,import org.codehaus.jackson.annotate.JsonProperty;
ambari-server/src/main/java/org/apache/ambari/server/state/theme/WidgetEntry.java,25,import org.codehaus.jackson.map.annotate.JsonSerialize;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,61,import org.codehaus.jackson.JsonGenerationException;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,62,import org.codehaus.jackson.map.JsonMappingException;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,63,import org.codehaus.jackson.map.ObjectMapper;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,64,import org.codehaus.jackson.map.SerializationConfig;
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,257,mapper.configure(SerializationConfig.Feature.INDENT_OUTPUT, true);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,258,mapper.configure(SerializationConfig.Feature.USE_ANNOTATIONS, true);
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/UploadService.java,50,import org.codehaus.jackson.map.ObjectMapper;
contrib/views/hive-next/src/main/java/org/apache/ambari/view/hive2/resources/uploads/UploadService.java,51,import org.codehaus.jackson.type.TypeReference;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/UploadService.java,52,import org.codehaus.jackson.map.ObjectMapper;
contrib/views/hive20/src/main/java/org/apache/ambari/view/hive20/resources/uploads/UploadService.java,53,import org.codehaus.jackson.type.TypeReference;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsViewControllerImpl.java,84,import org.codehaus.jackson.map.ObjectMapper;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsViewControllerImpl.java,85,import org.codehaus.jackson.type.TypeReference;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/Metric.java,21,import org.codehaus.jackson.annotate.JsonIgnore;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/Metric.java,22,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppJmxHelper.java,22,import org.codehaus.jackson.map.DeserializationConfig;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppJmxHelper.java,23,import org.codehaus.jackson.map.ObjectMapper;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppJmxHelper.java,24,import org.codehaus.jackson.map.ObjectReader;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppJmxHelper.java,74,jmxObjectMapper.configure(DeserializationConfig.Feature.USE_ANNOTATIONS, false);
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,33,import org.codehaus.jackson.map.AnnotationIntrospector;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,34,import org.codehaus.jackson.map.ObjectMapper;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,35,import org.codehaus.jackson.map.ObjectReader;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,36,import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,37,import org.codehaus.jackson.xc.JaxbAnnotationIntrospector;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,56,mapper.getSerializationConfig().setSerializationInclusion(
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,57,Inclusion.NON_NULL);
ambari-server/src/main/java/org/apache/ambari/server/api/services/ViewInstanceService.java,218,throw new IllegalArgumentException("A view instance " +
ambari-server/src/main/java/org/apache/ambari/server/api/services/ViewInstanceService.java,219,viewName + "/" + instanceName + " can not be found.");
ambari-server/src/main/java/org/apache/ambari/server/api/services/ViewInstanceService.java,225,throw new IllegalArgumentException("A resource type " + resources + " for view instance " +
ambari-server/src/main/java/org/apache/ambari/server/api/services/ViewInstanceService.java,226,viewName + "/" + instanceName + " can not be found.");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,534,Set<String> candidateHosts;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,535,final Map<String, ServiceComponentHost> serviceHostComponents;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,538,serviceHostComponents = cluster.getService(serviceName).getServiceComponent(componentName).getServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,540,if (serviceHostComponents.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,541,throw new AmbariException(MessageFormat.format("No hosts found for service: {0}, component: {1} in cluster: {2}",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,542,serviceName, componentName, clusterName));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,547,List<String> candidateHostsList = resourceFilter.getHostNames();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,548,if (candidateHostsList != null && !candidateHostsList.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,549,candidateHosts = new HashSet<>(candidateHostsList);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,552,candidateHosts.retainAll(serviceHostComponents.keySet());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,554,if (candidateHosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,555,throw new AmbariException(MessageFormat.format("The resource filter for hosts does not contain components for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,559,candidateHosts = serviceHostComponents.keySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,566,Iterator<String> serviceComponentNameIterator = serviceComponents.keySet().iterator();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,567,while (serviceComponentNameIterator.hasNext()){
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,568,String componentToCheck = serviceComponentNameIterator.next();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,569,if (serviceComponents.get(componentToCheck).getServiceComponentHosts().isEmpty()){
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,570,serviceComponentNameIterator.remove();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,574,if (serviceComponents.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,575,throw new AmbariException(MessageFormat.format("Did not find any hosts with components for service: {0} in cluster: {1}",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,576,serviceName, clusterName));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,580,ServiceComponent serviceComponent = serviceComponents.values().iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,581,serviceHostComponents = serviceComponent.getServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,582,candidateHosts = serviceHostComponents.keySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,587,ServiceComponentHost serviceComponentHost = serviceHostComponents.get(candidateHostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,589,if (serviceComponentHost == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,601,ServiceComponentHost serviceComponentHost = serviceHostComponents.get(candidateHostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,602,Host host = serviceComponentHost.getHost();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1440,filters.add(new RequestResourceFilter(tw.getService(), "", Collections.<String> emptyList()));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderGrouping.java,115,wrappers.addAll(buildHosts(upgradeContext, orderItem.getActionItems()));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderGrouping.java,118,wrappers.addAll(buildServiceChecks(upgradeContext, orderItem.getActionItems()));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderGrouping.java,293,private List<StageWrapper> buildServiceChecks(UpgradeContext upgradeContext, List<String> serviceChecks) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderGrouping.java,315,StageWrapper wrapper = new StageWrapper(StageWrapper.Type.SERVICE_CHECK,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderGrouping.java,316,String.format("Service Check %s", upgradeContext.getServiceDisplay(serviceName)),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderGrouping.java,317,new TaskWrapper(serviceName, "", Collections.<String>emptySet(), new ServiceCheckTask()));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderGrouping.java,319,wrappers.add(wrapper);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderItem.java,61,private final List<String> m_actionItems;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderItem.java,69,public HostOrderItem(HostOrderActionType type, List<String> actionItems) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderItem.java,71,m_actionItems = actionItems;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderItem.java,89,public List<String> getActionItems() {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderItem.java,90,return m_actionItems;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderItem.java,98,return Objects.toStringHelper(this).add("type", m_type).add("items",
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderItem.java,99,StringUtils.join(m_actionItems, ", ")).omitNullValues().toString();
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/ValidatorUtils.java,32,String[] schemes = {"webhdfs", "hdfs", "s3", "wasb", "swebhdfs", "adl"};
contrib/fast-hdfs-resource/src/main/java/org/apache/ambari/fast_hdfs_resource/Runner.java,34,throws IOException, URISyntaxException {
contrib/fast-hdfs-resource/src/main/java/org/apache/ambari/fast_hdfs_resource/Runner.java,109,dfs.close();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesMapReduceDistributedCacheCheck.java,49,static final String DFS_PROTOCOLS_REGEX_DEFAULT = "^([^:]*dfs|wasb|ecs):.*";
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesTezDistributedCacheCheck.java,51,static final String DFS_PROTOCOLS_REGEX_DEFAULT = "^([^:]*dfs|wasb|ecs):.*";
