File,Line_number,SRC
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,162,error("Unable to write to stream " + manager.getName() + " for appender " + getName() + ": " + ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractWriterAppender.java,87,error("Unable to write " + manager.getName() + " for appender " + getName() + ": " + ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,158,handleAppenderError(ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,160,handleAppenderError(new AppenderLoggingException(ex));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,164,private void handleAppenderError(final RuntimeException ex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,165,appender.getHandler().error(createErrorMsg("An exception occurred processing Appender "), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java,188,LOGGER.info("Plugin [{}] could not be loaded due to verification error.", className, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,133,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,134,randomAccessFile.close();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,135,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,137,logError("Unable to close RandomAccessFile", e);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,138,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,354,final StringBuilder sb = destination.append(original);//new StringBuilder(original);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,357,pos = fragments[i].abbreviate(sb, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,363,final PatternAbbreviatorFragment terminalFragment = fragments[fragments.length - 1];
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,366,pos = terminalFragment.abbreviate(sb, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,356,for (int i = 0; i < fragments.length - 1 && pos < original.length(); i++) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,663,map.put(stackTraceElement.toString(), entry);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,267,return level == null ? parent.getLevel() : level;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,17,package org.apache.logging.log4j.flume.appender;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,19,import java.io.ByteArrayInputStream;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,20,import java.io.ByteArrayOutputStream;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,21,import java.io.DataInputStream;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,22,import java.io.DataOutputStream;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,23,import java.io.File;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,24,import java.nio.charset.Charset;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,25,import java.nio.charset.StandardCharsets;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,26,import java.util.HashMap;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,27,import java.util.Map;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,28,import java.util.concurrent.Callable;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,29,import java.util.concurrent.ExecutorService;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,30,import java.util.concurrent.Executors;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,31,import java.util.concurrent.Future;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,32,import java.util.concurrent.TimeUnit;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,33,import java.util.concurrent.atomic.AtomicLong;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,34,import javax.crypto.Cipher;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,35,import javax.crypto.SecretKey;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,37,import com.sleepycat.je.Cursor;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,38,import com.sleepycat.je.CursorConfig;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,39,import com.sleepycat.je.Database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,40,import com.sleepycat.je.DatabaseConfig;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,41,import com.sleepycat.je.DatabaseEntry;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,42,import com.sleepycat.je.Environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,43,import com.sleepycat.je.EnvironmentConfig;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,44,import com.sleepycat.je.LockConflictException;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,45,import com.sleepycat.je.LockMode;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,46,import com.sleepycat.je.OperationStatus;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,47,import com.sleepycat.je.StatsConfig;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,48,import com.sleepycat.je.Transaction;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,49,import org.apache.flume.Event;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,50,import org.apache.flume.event.SimpleEvent;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,51,import org.apache.logging.log4j.LoggingException;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,52,import org.apache.logging.log4j.core.appender.ManagerFactory;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,53,import org.apache.logging.log4j.core.config.Property;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,54,import org.apache.logging.log4j.core.config.plugins.util.PluginManager;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,55,import org.apache.logging.log4j.core.config.plugins.util.PluginType;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,56,import org.apache.logging.log4j.core.util.ExecutorServices;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,57,import org.apache.logging.log4j.core.util.FileUtils;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,58,import org.apache.logging.log4j.core.util.Log4jThread;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,59,import org.apache.logging.log4j.core.util.Log4jThreadFactory;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,60,import org.apache.logging.log4j.core.util.SecretKeyProvider;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,61,import org.apache.logging.log4j.util.Strings;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,66,public class FlumePersistentManager extends FlumeAvroManager {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,69,public static final String KEY_PROVIDER = "keyProvider";
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,71,private static final Charset UTF8 = StandardCharsets.UTF_8;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,73,private static final String DEFAULT_DATA_DIR = ".log4j/flumeData";
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,75,private static final long SHUTDOWN_WAIT_MILLIS = 60000;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,77,private static final long LOCK_TIMEOUT_SLEEP_MILLIS = 500;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,79,private static BDBManagerFactory factory = new BDBManagerFactory();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,81,private final Database database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,83,private final Environment environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,85,private final WriterThread worker;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,87,private final Gate gate = new Gate();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,89,private final SecretKey secretKey;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,91,private final int lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,93,private final ExecutorService threadPool;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,95,private final AtomicLong dbCount = new AtomicLong();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,112,protected FlumePersistentManager(final String name, final String shortName, final Agent[] agents,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,113,final int batchSize, final int retries, final int connectionTimeout,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,114,final int requestTimeout, final int delay, final Database database,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,115,final Environment environment, final SecretKey secretKey,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,116,final int lockTimeoutRetryCount) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,117,super(name, shortName, agents, batchSize, delay, retries, connectionTimeout, requestTimeout);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,118,this.database = database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,119,this.environment = environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,120,dbCount.set(database.count());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,121,this.worker = new WriterThread(database, environment, this, gate, batchSize, secretKey, dbCount,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,122,lockTimeoutRetryCount);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,123,this.worker.start();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,124,this.secretKey = secretKey;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,125,this.threadPool = Executors.newCachedThreadPool(Log4jThreadFactory.createDaemonThreadFactory("Flume"));
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,126,this.lockTimeoutRetryCount = lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,144,public static FlumePersistentManager getManager(final String name, final Agent[] agents,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,145,final Property[] properties, int batchSize, final int retries,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,146,final int connectionTimeout, final int requestTimeout,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,147,final int delayMillis, final int lockTimeoutRetryCount,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,148,final String dataDir) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,149,if (agents == null || agents.length == 0) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,150,throw new IllegalArgumentException("At least one agent is required");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,153,if (batchSize <= 0) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,154,batchSize = 1;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,156,final String dataDirectory = Strings.isEmpty(dataDir) ? DEFAULT_DATA_DIR : dataDir;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,158,final StringBuilder sb = new StringBuilder("FlumePersistent[");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,159,boolean first = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,160,for (final Agent agent : agents) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,161,if (!first) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,162,sb.append(',');
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,164,sb.append(agent.getHost()).append(':').append(agent.getPort());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,165,first = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,167,sb.append(']');
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,168,sb.append(' ').append(dataDirectory);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,169,return getManager(sb.toString(), factory, new FactoryData(name, agents, batchSize, retries,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,170,connectionTimeout, requestTimeout, delayMillis, lockTimeoutRetryCount, dataDir, properties));
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,174,public void send(final Event event)  {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,175,if (worker.isShutdown()) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,176,throw new LoggingException("Unable to record event");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,179,final Map<String, String> headers = event.getHeaders();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,180,final byte[] keyData = headers.get(FlumeEvent.GUID).getBytes(UTF8);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,181,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,182,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,183,final DataOutputStream daos = new DataOutputStream(baos);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,184,daos.writeInt(event.getBody().length);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,185,daos.write(event.getBody(), 0, event.getBody().length);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,186,daos.writeInt(event.getHeaders().size());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,187,for (final Map.Entry<String, String> entry : headers.entrySet()) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,188,daos.writeUTF(entry.getKey());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,189,daos.writeUTF(entry.getValue());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,191,byte[] eventData = baos.toByteArray();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,192,if (secretKey != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,193,final Cipher cipher = Cipher.getInstance("AES");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,194,cipher.init(Cipher.ENCRYPT_MODE, secretKey);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,195,eventData = cipher.doFinal(eventData);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,197,final Future<Integer> future = threadPool.submit(new BDBWriter(keyData, eventData, environment, database,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,198,gate, dbCount, getBatchSize(), lockTimeoutRetryCount));
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,199,boolean interrupted = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,200,int ieCount = 0;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,201,do {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,202,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,203,future.get();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,205,interrupted = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,206,++ieCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,211,throw new LoggingException("Exception occurred writing log event", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,216,protected boolean releaseSub(final long timeout, final TimeUnit timeUnit) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,217,boolean closed = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,218,LOGGER.debug("Shutting down FlumePersistentManager");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,219,worker.shutdown();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,220,final long requestedTimeoutMillis = timeUnit.toMillis(timeout);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,221,final long shutdownWaitMillis = requestedTimeoutMillis > 0 ? requestedTimeoutMillis : SHUTDOWN_WAIT_MILLIS;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,222,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,223,worker.join(shutdownWaitMillis);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,227,ExecutorServices.shutdown(threadPool, shutdownWaitMillis, TimeUnit.MILLISECONDS, toString());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,228,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,229,worker.join();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,231,logDebug("interrupted while waiting for worker to complete", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,233,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,234,LOGGER.debug("FlumePersistenceManager dataset status: {}", database.getStats(new StatsConfig()));
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,235,database.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,237,logWarn("Failed to close database", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,238,closed = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,240,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,241,environment.cleanLog();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,242,environment.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,244,logWarn("Failed to close environment", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,245,closed = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,247,return closed && super.releaseSub(timeout, timeUnit);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,250,private void doSend(final SimpleEvent event) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,251,LOGGER.debug("Sending event to Flume");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,252,super.send(event);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,258,private static class BDBWriter implements Callable<Integer> {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,259,private final byte[] eventData;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,260,private final byte[] keyData;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,261,private final Environment environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,262,private final Database database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,263,private final Gate gate;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,264,private final AtomicLong dbCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,265,private final long batchSize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,266,private final int lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,268,public BDBWriter(final byte[] keyData, final byte[] eventData, final Environment environment,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,269,final Database database, final Gate gate, final AtomicLong dbCount, final long batchSize,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,270,final int lockTimeoutRetryCount) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,271,this.keyData = keyData;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,272,this.eventData = eventData;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,273,this.environment = environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,274,this.database = database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,275,this.gate = gate;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,276,this.dbCount = dbCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,277,this.batchSize = batchSize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,278,this.lockTimeoutRetryCount = lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,282,public Integer call() throws Exception {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,283,final DatabaseEntry key = new DatabaseEntry(keyData);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,284,final DatabaseEntry data = new DatabaseEntry(eventData);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,285,Exception exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,286,for (int retryIndex = 0; retryIndex < lockTimeoutRetryCount; ++retryIndex) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,287,Transaction txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,288,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,289,txn = environment.beginTransaction(null, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,290,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,291,database.put(txn, key, data);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,292,txn.commit();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,293,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,294,if (dbCount.incrementAndGet() >= batchSize) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,295,gate.open();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,297,exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,298,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,300,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,303,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,304,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,306,throw ex;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,308,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,309,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,310,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,314,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,315,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,316,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,317,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,318,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,320,LOGGER.trace("Ignoring exception while aborting transaction during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,325,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,326,Thread.sleep(LOCK_TIMEOUT_SLEEP_MILLIS);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,331,if (exception != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,332,throw exception;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,334,return eventData.length;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,341,private static class FactoryData {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,342,private final String name;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,343,private final Agent[] agents;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,344,private final int batchSize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,345,private final String dataDir;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,346,private final int retries;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,347,private final int connectionTimeout;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,348,private final int requestTimeout;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,349,private final int delayMillis;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,350,private final int lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,351,private final Property[] properties;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,360,public FactoryData(final String name, final Agent[] agents, final int batchSize, final int retries,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,361,final int connectionTimeout, final int requestTimeout, final int delayMillis,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,362,final int lockTimeoutRetryCount, final String dataDir, final Property[] properties) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,363,this.name = name;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,364,this.agents = agents;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,365,this.batchSize = batchSize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,366,this.dataDir = dataDir;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,367,this.retries = retries;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,368,this.connectionTimeout = connectionTimeout;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,369,this.requestTimeout = requestTimeout;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,370,this.delayMillis = delayMillis;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,371,this.lockTimeoutRetryCount = lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,372,this.properties = properties;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,379,private static class BDBManagerFactory implements ManagerFactory<FlumePersistentManager, FactoryData> {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,388,public FlumePersistentManager createManager(final String name, final FactoryData data) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,389,SecretKey secretKey = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,390,Database database = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,391,Environment environment = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,393,final Map<String, String> properties = new HashMap<>();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,394,if (data.properties != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,395,for (final Property property : data.properties) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,396,properties.put(property.getName(), property.getValue());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,400,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,401,final File dir = new File(data.dataDir);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,402,FileUtils.mkdir(dir, true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,403,final EnvironmentConfig dbEnvConfig = new EnvironmentConfig();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,404,dbEnvConfig.setTransactional(true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,405,dbEnvConfig.setAllowCreate(true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,406,dbEnvConfig.setLockTimeout(5, TimeUnit.SECONDS);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,407,environment = new Environment(dir, dbEnvConfig);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,408,final DatabaseConfig dbConfig = new DatabaseConfig();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,409,dbConfig.setTransactional(true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,410,dbConfig.setAllowCreate(true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,411,database = environment.openDatabase(null, name, dbConfig);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,413,LOGGER.error("Could not create FlumePersistentManager", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,417,if (database != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,418,database.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,419,database = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,421,if (environment != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,422,environment.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,423,environment = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,425,return null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,428,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,429,String key = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,430,for (final Map.Entry<String, String> entry : properties.entrySet()) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,431,if (entry.getKey().equalsIgnoreCase(KEY_PROVIDER)) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,432,key = entry.getValue();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,433,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,436,if (key != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,437,final PluginManager manager = new PluginManager("KeyProvider");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,438,manager.collectPlugins();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,439,final Map<String, PluginType<?>> plugins = manager.getPlugins();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,440,if (plugins != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,441,boolean found = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,442,for (final Map.Entry<String, PluginType<?>> entry : plugins.entrySet()) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,443,if (entry.getKey().equalsIgnoreCase(key)) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,444,found = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,445,final Class<?> cl = entry.getValue().getPluginClass();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,446,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,447,final SecretKeyProvider provider = (SecretKeyProvider) cl.newInstance();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,448,secretKey = provider.getSecretKey();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,449,LOGGER.debug("Persisting events using SecretKeyProvider {}", cl.getName());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,451,LOGGER.error("Unable to create SecretKeyProvider {}, encryption will be disabled",
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,452,cl.getName());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,454,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,457,if (!found) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,458,LOGGER.error("Unable to locate SecretKey provider {}, encryption will be disabled", key);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,461,LOGGER.error("Unable to locate SecretKey provider {}, encryption will be disabled", key);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,465,LOGGER.warn("Error setting up encryption - encryption will be disabled", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,467,return new FlumePersistentManager(name, data.name, data.agents, data.batchSize, data.retries,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,468,data.connectionTimeout, data.requestTimeout, data.delayMillis, database, environment, secretKey,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,469,data.lockTimeoutRetryCount);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,476,private static class WriterThread extends Log4jThread  {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,477,private volatile boolean shutdown = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,478,private final Database database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,479,private final Environment environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,480,private final FlumePersistentManager manager;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,481,private final Gate gate;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,482,private final SecretKey secretKey;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,483,private final int batchSize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,484,private final AtomicLong dbCounter;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,485,private final int lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,487,public WriterThread(final Database database, final Environment environment,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,488,final FlumePersistentManager manager, final Gate gate, final int batchsize,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,489,final SecretKey secretKey, final AtomicLong dbCount, final int lockTimeoutRetryCount) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,490,super("FlumePersistentManager-Writer");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,491,this.database = database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,492,this.environment = environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,493,this.manager = manager;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,494,this.gate = gate;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,495,this.batchSize = batchsize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,496,this.secretKey = secretKey;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,497,this.setDaemon(true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,498,this.dbCounter = dbCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,499,this.lockTimeoutRetryCount = lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,502,public void shutdown() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,503,LOGGER.debug("Writer thread shutting down");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,504,this.shutdown = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,505,gate.open();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,508,public boolean isShutdown() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,509,return shutdown;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,513,public void run() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,514,LOGGER.trace("WriterThread started - batch size = " + batchSize + ", delayMillis = " + manager.getDelayMillis());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,515,long nextBatchMillis = System.currentTimeMillis() + manager.getDelayMillis();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,516,while (!shutdown) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,517,final long nowMillis = System.currentTimeMillis();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,518,final long dbCount = database.count();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,519,dbCounter.set(dbCount);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,520,if (dbCount >= batchSize || dbCount > 0 && nextBatchMillis <= nowMillis) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,521,nextBatchMillis = nowMillis + manager.getDelayMillis();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,522,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,523,boolean errors = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,524,final DatabaseEntry key = new DatabaseEntry();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,525,final DatabaseEntry data = new DatabaseEntry();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,527,gate.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,528,OperationStatus status;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,529,if (batchSize > 1) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,530,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,531,errors = sendBatch(key, data);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,533,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,536,Exception exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,537,for (int retryIndex = 0; retryIndex < lockTimeoutRetryCount; ++retryIndex) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,538,exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,539,Transaction txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,540,Cursor cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,541,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,542,txn = environment.beginTransaction(null, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,543,cursor = database.openCursor(txn, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,544,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,545,status = cursor.getFirst(key, data, LockMode.RMW);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,546,while (status == OperationStatus.SUCCESS) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,547,final SimpleEvent event = createEvent(data);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,548,if (event != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,549,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,550,manager.doSend(event);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,552,errors = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,553,LOGGER.error("Error sending event", ioe);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,554,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,556,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,557,cursor.delete();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,559,LOGGER.error("Unable to delete event", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,562,status = cursor.getNext(key, data, LockMode.RMW);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,564,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,565,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,566,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,568,txn.commit();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,569,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,570,dbCounter.decrementAndGet();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,571,exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,572,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,574,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,577,LOGGER.error("Error reading or writing to database", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,578,shutdown = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,579,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,581,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,582,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,583,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,585,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,586,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,587,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,591,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,592,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,593,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,594,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,595,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,597,LOGGER.trace("Ignored exception closing cursor during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,600,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,601,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,602,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,603,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,605,LOGGER.trace("Ignored exception aborting tx during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,609,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,610,Thread.sleep(LOCK_TIMEOUT_SLEEP_MILLIS);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,615,if (exception != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,616,LOGGER.error("Unable to read or update data base", exception);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,619,if (errors) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,620,Thread.sleep(manager.getDelayMillis());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,621,continue;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,624,LOGGER.warn("WriterThread encountered an exception. Continuing.", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,627,if (nextBatchMillis <= nowMillis) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,628,nextBatchMillis = nowMillis + manager.getDelayMillis();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,630,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,631,final long interval = nextBatchMillis - nowMillis;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,632,gate.waitForOpen(interval);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,634,LOGGER.warn("WriterThread interrupted, continuing");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,636,LOGGER.error("WriterThread encountered an exception waiting for work", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,637,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,642,if (batchSize > 1 && database.count() > 0) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,643,final DatabaseEntry key = new DatabaseEntry();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,644,final DatabaseEntry data = new DatabaseEntry();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,645,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,646,sendBatch(key, data);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,648,LOGGER.warn("Unable to write final batch");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,651,LOGGER.trace("WriterThread exiting");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,654,private boolean sendBatch(DatabaseEntry key, final DatabaseEntry data) throws Exception {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,655,boolean errors = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,656,OperationStatus status;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,657,Cursor cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,658,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,659,final BatchEvent batch = new BatchEvent();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,660,for (int retryIndex = 0; retryIndex < lockTimeoutRetryCount; ++retryIndex) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,661,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,662,cursor = database.openCursor(null, CursorConfig.DEFAULT);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,663,status = cursor.getFirst(key, data, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,665,for (int i = 0; status == OperationStatus.SUCCESS && i < batchSize; ++i) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,666,final SimpleEvent event = createEvent(data);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,667,if (event != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,668,batch.addEvent(event);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,670,status = cursor.getNext(key, data, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,672,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,674,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,675,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,676,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,677,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,679,LOGGER.trace("Ignored exception closing cursor during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,685,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,686,manager.send(batch);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,688,LOGGER.error("Error sending events", ioe);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,689,errors = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,691,if (!errors) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,692,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,693,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,694,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,696,Transaction txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,697,Exception exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,698,for (int retryIndex = 0; retryIndex < lockTimeoutRetryCount; ++retryIndex) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,699,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,700,txn = environment.beginTransaction(null, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,701,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,702,for (final Event event : batch.getEvents()) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,703,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,704,final Map<String, String> headers = event.getHeaders();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,705,key = new DatabaseEntry(headers.get(FlumeEvent.GUID).getBytes(UTF8));
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,706,database.delete(txn, key);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,708,LOGGER.error("Error deleting key from database", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,711,txn.commit();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,712,long count = dbCounter.get();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,713,while (!dbCounter.compareAndSet(count, count - batch.getEvents().size())) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,714,count = dbCounter.get();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,716,exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,717,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,719,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,720,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,721,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,722,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,723,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,725,LOGGER.trace("Ignored exception closing cursor during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,728,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,729,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,730,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,731,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,733,LOGGER.trace("Ignored exception aborting transaction during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,737,LOGGER.error("Unable to commit transaction", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,738,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,739,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,743,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,744,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,745,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,746,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,747,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,749,LOGGER.trace("Ignored exception closing cursor during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,752,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,753,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,754,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,755,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,757,LOGGER.trace("Ignored exception aborting transaction during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,761,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,762,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,763,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,765,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,766,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,767,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,770,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,771,Thread.sleep(LOCK_TIMEOUT_SLEEP_MILLIS);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,776,if (exception != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,777,LOGGER.error("Unable to delete events from data base", exception);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,781,LOGGER.error("Error reading database", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,782,shutdown = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,783,throw ex;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,785,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,786,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,790,return errors;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,793,private SimpleEvent createEvent(final DatabaseEntry data) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,794,final SimpleEvent event = new SimpleEvent();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,795,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,796,byte[] eventData = data.getData();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,797,if (secretKey != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,798,final Cipher cipher = Cipher.getInstance("AES");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,799,cipher.init(Cipher.DECRYPT_MODE, secretKey);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,800,eventData = cipher.doFinal(eventData);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,802,final ByteArrayInputStream bais = new ByteArrayInputStream(eventData);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,803,final DataInputStream dais = new DataInputStream(bais);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,804,int length = dais.readInt();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,805,final byte[] bytes = new byte[length];
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,806,dais.read(bytes, 0, length);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,807,event.setBody(bytes);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,808,length = dais.readInt();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,809,final Map<String, String> map = new HashMap<>(length);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,810,for (int i = 0; i < length; ++i) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,811,final String headerKey = dais.readUTF();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,812,final String value = dais.readUTF();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,813,map.put(headerKey, value);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,815,event.setHeaders(map);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,816,return event;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,818,LOGGER.error("Error retrieving event", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,819,return null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,828,private static class Gate {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,830,private boolean isOpen = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,832,public boolean isOpen() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,833,return isOpen;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,836,public synchronized void open() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,837,isOpen = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,838,notifyAll();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,841,public synchronized void close() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,842,isOpen = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,845,public synchronized void waitForOpen(final long timeout) throws InterruptedException {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,846,wait(timeout);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,19,import com.lmax.disruptor.ExceptionHandler;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,25,implements ExceptionHandler<AsyncLoggerConfigDisruptor.Log4jEventWrapper> {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,28,public void handleEventException(final Throwable throwable, final long sequence,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,29,final AsyncLoggerConfigDisruptor.Log4jEventWrapper event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,30,final StringBuilder sb = new StringBuilder(512);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,31,sb.append("AsyncLogger error handling event seq=").append(sequence).append(", value='");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,32,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,33,sb.append(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,35,sb.append("[ERROR calling ").append(event.getClass()).append(".toString(): ");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,36,sb.append(ignored).append("]");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,38,sb.append("':");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,39,System.err.println(sb);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,40,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,44,public void handleOnStartException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,45,System.err.println("AsyncLogger error starting:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,46,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,50,public void handleOnShutdownException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,51,System.err.println("AsyncLogger error shutting down:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,52,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,19,import com.lmax.disruptor.ExceptionHandler;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,24,public class AsyncLoggerDefaultExceptionHandler implements ExceptionHandler<RingBufferLogEvent> {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,27,public void handleEventException(final Throwable throwable, final long sequence, final RingBufferLogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,28,final StringBuilder sb = new StringBuilder(512);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,29,sb.append("AsyncLogger error handling event seq=").append(sequence).append(", value='");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,30,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,31,sb.append(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,33,sb.append("[ERROR calling ").append(event.getClass()).append(".toString(): ");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,34,sb.append(ignored).append("]");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,36,sb.append("':");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,37,System.err.println(sb);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,38,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,42,public void handleOnStartException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,43,System.err.println("AsyncLogger error starting:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,44,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,48,public void handleOnShutdownException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,49,System.err.println("AsyncLogger error shutting down:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,50,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,91,populateLazilyInitializedFields(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,93,if (!delegate.tryEnqueue(event, this)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,104,void callAppendersInCurrentThread(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,105,super.callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,108,void callAppendersInBackgroundThread(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,113,void asyncCallAppenders(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,114,super.callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,112,event.loggerConfig.asyncCallAppenders(event.event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/EventRoute.java,46,asyncLoggerConfig.callAppendersInBackgroundThread(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/EventRoute.java,65,asyncLoggerConfig.callAppendersInCurrentThread(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,402,log(logEvent);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,416,processLogEvent(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,430,private void processLogEvent(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,432,callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,433,logParent(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,436,private void logParent(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,438,parent.log(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ReusableLogEventFactory.java,105,((MutableLogEvent) logEvent).reserved = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,491,includeLocation(includeLocation));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,523,includeLocation(includeLocation));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,528,protected static boolean includeLocation(final String includeLocationConfigValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,530,final boolean sync = !AsyncLoggerContextSelector.isSelected();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,531,return sync;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,558,properties, config, includeLocation(includeLocation));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,213,Level level;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,217,LOGGER.error(
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,219,levelName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,202,final String containerPath = urlPath.substring(1,
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,203,urlPath.length() - packageName.length() - 2);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,205,if (containerFile.isDirectory()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,206,loadImplementationsInDirectory(test, packageName, new File(containerFile, packageName));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,208,loadImplementationsInJar(test, packageName, containerFile);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,499,message = new SimpleMessage(message.getFormattedMessage());
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,478,return message != null ? message : new SimpleMessage(String.valueOf(messageText));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,300,return message != null ? message : new SimpleMessage(String.valueOf(messageText));
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,301,return new ParameterizedMessage(messageText.toString(), params);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,201,final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,202,unregisterMBeans(mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,210,public static void unregisterMBeans(final MBeanServer mbs) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,211,unregisterStatusLogger("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,212,unregisterContextSelector("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,213,unregisterContexts(mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,214,unregisterLoggerConfigs("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,215,unregisterAsyncLoggerRingBufferAdmins("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,216,unregisterAsyncLoggerConfigRingBufferAdmins("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,217,unregisterAppenders("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,218,unregisterAsyncAppenders("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,336,if (found.isEmpty()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,341,for (final ObjectName objectName : found) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,342,mbs.unregisterMBean(objectName);
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableObjectMessage.java,81,return getFormattedMessage();
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableSimpleMessage.java,46,return getFormattedMessage();
log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessage.java,22,import org.apache.logging.log4j.util.StringBuilderFormattable;
log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessage.java,81,return getFormattedMessage();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,224,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,247,return null;
log4j-api/src/main/java/org/apache/logging/log4j/util/Strings.java,219,return Objects.toString(first);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,73,if (randomAccessFile.length() == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java,36,return System.getenv(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,222,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,277,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,291,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,299,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,341,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,383,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,439,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,73,if (!options.allLines() || !Strings.LINE_SEPARATOR.equals(options.getSeparator())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,74,final StringBuilder sb = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,75,final String[] array = extStackTrace.split(Strings.LINE_SEPARATOR);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,76,final int limit = options.minLines(array.length) - 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,77,for (int i = 0; i <= limit; ++i) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,78,sb.append(array[i]);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,79,if (i < limit) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,80,sb.append(options.getSeparator());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,83,toAppendTo.append(sb.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,85,toAppendTo.append(extStackTrace);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,33,addAttribute("onMatch", onMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,31,addAttribute("onMatch", onMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,224,public static class Builder implements org.apache.logging.log4j.core.util.Builder<BurstFilter> {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,236,private Result onMatch = Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,239,private Result onMismatch = Result.DENY;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,269,public Builder setOnMatch(final Result onMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,270,this.onMatch = onMatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,271,return this;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,277,public Builder setOnMismatch(final Result onMismatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,278,this.onMismatch = onMismatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,279,return this;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,290,return new BurstFilter(this.level, this.rate, this.maxBurst, this.onMatch, this.onMismatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java,245,FilterComponentBuilder newFilter(String pluginName, Filter.Result onMatch, Filter.Result onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java,254,FilterComponentBuilder newFilter(String pluginName, String onMatch, String onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,31,final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,34,addAttribute("onMisMatch", onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,413,final Filter.Result onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,414,return new DefaultFilterComponentBuilder(this, type, onMatch.name(), onMisMatch.name());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,418,public FilterComponentBuilder newFilter(final String type, final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,419,return new DefaultFilterComponentBuilder(this, type, onMatch, onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,29,final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,32,addAttribute("onMisMatch", onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,231,final FilterComponentBuilder filterBuilder = builder.newFilter(type, onMatch, onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,229,final String onMatch = (String) properties.remove("onMatch");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,230,final String onMisMatch = (String) properties.remove("onMisMatch");
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,82,public void start(final BundleContext context) throws Exception {
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,85,final BundleWiring self = context.getBundle().adapt(BundleWiring.class);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,90,context.addBundleListener(this);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,91,final Bundle[] bundles = context.getBundles();
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,106,public void stop(final BundleContext context) throws Exception {
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,107,context.removeBundleListener(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/script/Script.java,43,LOGGER.info("No script language supplied, defaulting to {}", DEFAULT_LANGUAGE);
log4j-core/src/main/java/org/apache/logging/log4j/core/script/Script.java,47,LOGGER.error("No scriptText attribute provided for ScriptFile {}", name);
log4j-api/src/main/java/org/apache/logging/log4j/spi/CopyOnWriteSortedArrayThreadContextMap.java,75,return parentValue != null ? createStringMap(parentValue) : null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,39,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,52,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,66,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,80,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,38,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,50,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,63,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,76,addAttribute("level", level);
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,331,private String asXml() {
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,332,final StringBuilder sb = new StringBuilder();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,333,final StructuredDataId sdId = getId();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,334,if (sdId == null || sdId.getName() == null || type == null) {
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,335,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,337,sb.append("<StructuredData>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,338,sb.append("<type>").append(type).append("</type>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,339,sb.append("<id>").append(sdId).append("</id>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,340,super.asXml(sb);
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,341,sb.append("</StructuredData>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,342,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,243,return asString();
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,252,return asString();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MessagePatternConverter.java,115,final StringBuilderFormattable stringBuilderFormattable = (StringBuilderFormattable) msg;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MessagePatternConverter.java,117,stringBuilderFormattable.formatTo(workingBuilder);
log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/LevelMixIn.java,38,public static Level getLevel(@JsonProperty("name") final String name) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,49,PropertiesUtil.getProperties().getBooleanProperty(ShutdownCallbackRegistry.SHUTDOWN_HOOK_ENABLED, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,123,if (SHUTDOWN_HOOK_ENABLED && this.shutdownCallbackRegistry instanceof LifeCycle) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,317,return SHUTDOWN_HOOK_ENABLED ? shutdownCallbackRegistry.addShutdownCallback(callback) : null;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,117,if (Loader.isClassAvailable("javax.servlet.ServletContext")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,238,if (!propsUtil.isOsWindows() || propsUtil.getBooleanProperty("log4j.skipJansi") || direct) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java,165,this.buffer.add(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,251,LOGGER.warn("Unable to instantiate {}", JANSI_CLASS);
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,110,final
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,111,Throwable thrown = event.getThrown();
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,114,buf.append(thrown.toString());
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,115,buf.append("\r\n");
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,116,for (final StackTraceElement element : thrown.getStackTrace()) {
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,117,Transform.appendEscapingCData(buf, "\tat " + element.toString());
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,118,buf.append("\r\n");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,269,final int begin = i++;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,270,int end;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,271,int depth = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,272,do {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,273,end = pattern.indexOf('}', i);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,274,if (end == -1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,275,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,277,final int next = pattern.indexOf("{", i);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,278,if (next != -1 && next < end) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,279,i = end + 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,280,++depth;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,282,--depth;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,286,if (end == -1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,287,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,290,final String r = pattern.substring(begin + 1, end);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,291,options.add(r);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,292,i = end + 1;
log4j-api/src/main/java/org/apache/logging/log4j/util/LowLevelLogUtil.java,41,if (message != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/LowLevelLogUtil.java,42,writer.println(message);
log4j-api/src/main/java/org/apache/logging/log4j/util/LowLevelLogUtil.java,37,exception.printStackTrace(writer);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,163,final EventRoute route = asyncQueueFullPolicy.getRoute(thread.getId(), memento.getLevel());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,164,route.logMessage(this, memento);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,31,import org.apache.logging.log4j.core.ContextDataInjector;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,42,import org.apache.logging.log4j.status.StatusLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,250,disruptor.getRingBuffer().publishEvent(this, this, calcLocationIfRequested(fqcn), fqcn, level, marker, message,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,251,thrown);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DefaultAsyncQueueFullPolicy.java,33,return EventRoute.SYNCHRONOUS;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,118,this.randomAccessFile = new RandomAccessFile(getFileName(), "rw");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,167,final File file = new File(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,173,if (!data.append) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,174,file.delete();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,176,final long size = data.append ? file.length() : 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,177,final long time = file.exists() ? file.lastModified() : System.currentTimeMillis();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,179,final boolean writeHeader = !data.append || !file.exists();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,181,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,182,raf = new RandomAccessFile(name, "rw");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,183,if (data.append) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,184,final long length = raf.length();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,185,LOGGER.trace("RandomAccessFile {} seek to {}", name, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,186,raf.seek(length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,188,LOGGER.trace("RandomAccessFile {} set length to 0", name);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,189,raf.setLength(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,192,NullOutputStream.getInstance(), data.append, data.immediateFlush, data.bufferSize, size, time, data.policy,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,195,LOGGER.error("Cannot access RandomAccessFile " + ex, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,196,if (raf != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,197,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,198,raf.close();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,200,LOGGER.error("Cannot close RandomAccessFile {}", name, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,204,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,234,public FactoryData(final String pattern, final boolean append, final boolean immediateFlush,
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,138,this.mdcId = mdcId;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,154,final Level level = Level.toLevel(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,156,LOGGER.error("Unknown level name: " + key + ". Use one of " +
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,157,Arrays.toString(DEFAULT_STYLES.keySet().toArray()));
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,72,if (options.length < 1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,77,LOGGER.error("No pattern supplied on style");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,81,LOGGER.error("No style attributes provided");
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,19,import java.io.ByteArrayOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,26,import java.net.UnknownHostException;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,31,import org.apache.logging.log4j.Level;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,33,import org.apache.logging.log4j.core.appender.ManagerFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,104,return (SslSocketManager) getManager("TLS:" + host + ':' + port, new SslFactoryData(sslConfig, host, port,
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,130,private static class SslSocketManagerFactory implements ManagerFactory<SslSocketManager, SslFactoryData> {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,132,private static class TlsSocketManagerFactoryException extends Exception {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,134,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,138,public SslSocketManager createManager(final String name, final SslFactoryData data) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,139,InetAddress inetAddress = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,140,OutputStream os = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,141,Socket socket = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,143,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,144,inetAddress = resolveAddress(data.host);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,145,socket = createSocket(data);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,146,os = socket.getOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,150,LOGGER.error("SslSocketManager ({})", name, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,151,os = new ByteArrayOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,154,LOGGER.catching(Level.DEBUG, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,155,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,161,private InetAddress resolveAddress(final String hostName) throws TlsSocketManagerFactoryException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,162,InetAddress address;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,164,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,165,address = InetAddress.getByName(hostName);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,167,LOGGER.error("Could not find address of {}", hostName, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,168,throw new TlsSocketManagerFactoryException();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,171,return address;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,174,private void checkDelay(final int delay, final OutputStream os) throws TlsSocketManagerFactoryException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,175,if (delay == 0 && os == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,176,throw new TlsSocketManagerFactoryException();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,180,private Socket createSocket(final SslFactoryData data) throws IOException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,181,SSLSocketFactory socketFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,182,SSLSocket socket;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,184,socketFactory = createSslSocketFactory(data.sslConfiguration);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,186,return socket;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,52,private static final TcpSocketManagerFactory FACTORY = new TcpSocketManagerFactory();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,258,protected Socket createSocket(final InetAddress host, final int port) throws IOException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,259,return createSocket(host.getHostName(), port);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,262,protected Socket createSocket(final String host, final int port) throws IOException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,296,protected static class TcpSocketManagerFactory implements ManagerFactory<TcpSocketManager, FactoryData> {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,298,public TcpSocketManager createManager(final String name, final FactoryData data) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,313,return new TcpSocketManager(name, os, socket, inetAddress, data.host, data.port,
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,322,return new TcpSocketManager(name, os, null, inetAddress, data.host, data.port, data.connectTimeoutMillis,
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,68,private static class SslFactoryData {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,70,private final String host;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,71,private final int port;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,72,private final int connectTimeoutMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,73,private final int delayMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,74,private final boolean immediateFail;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,75,private final Layout<? extends Serializable> layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,76,private final int bufferSize;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,79,final int connectTimeoutMillis, final int delayMillis, final boolean immediateFail,
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,81,this.host = host;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,82,this.port = port;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,83,this.connectTimeoutMillis = connectTimeoutMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,84,this.delayMillis = delayMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,85,this.immediateFail = immediateFail;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,86,this.layout = layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,88,this.bufferSize = bufferSize;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,147,checkDelay(data.delayMillis, os);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,272,private static class FactoryData {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,273,private final String host;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,274,private final int port;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,275,private final int connectTimeoutMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,276,private final int reconnectDelayMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,277,private final boolean immediateFail;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,278,private final Layout<? extends Serializable> layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,279,private final int bufferSize;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,132,final OutputStream outputStream = getOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,133,outputStream.write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,134,if (immediateFlush) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,135,outputStream.flush();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,140,reconnector.start();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,223,final Socket sock = createSocket(inetAddress, port);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,224,final OutputStream newOS = sock.getOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,225,synchronized (owner) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,232,setOutputStream(newOS);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,233,socket = sock;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,234,reconnector = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,235,shutdown = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,316,LOGGER.error("TcpSocketManager (" + name + ") " + ex, ex);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,50,super.setLevel(LevelTranslator.toJavaLevel(logger.getLevel()));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/CommonsCompressAction.java,35,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/CommonsCompressAction.java,136,return CommonsCompressAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,177,return FileRenameAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java,32,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java,124,return GzCompressAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfAll.java,107,public static IfAll createAndCondition( //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfAny.java,77,public static IfAny createOrCondition( //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java,32,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,411,if (config != null && config instanceof AbstractConfiguration) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,412,configs.add((AbstractConfiguration) config);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,414,LOGGER.error("Failed to created configuration at {}", sourceLocation);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,415,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,418,return new CompositeConfiguration(configs);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,265,if (currentReadConfiguration instanceof AbstractConfiguration) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,266,configurations.add((AbstractConfiguration) currentReadConfiguration);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,268,LOGGER.error(
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,270,configLocation);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,273,final CompositeConfiguration compositeConfiguration = new CompositeConfiguration(configurations);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,274,LOGGER.debug("Starting LoggerContext[name={}] from configurations at {}", ctx.getName(),
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,275,configLocations);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,276,ctx.start(compositeConfiguration);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,379,private volatile boolean shutdown = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java,61,private volatile long nextCheckNanos = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,56,private volatile boolean renameEmptyFiles = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,127,private static volatile List<ConfigurationFactory> factories = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LockingReliabilityStrategy.java,36,private volatile boolean isStopping = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java,50,private volatile boolean initialized = false;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/ClocksBenchmark.java,155,private volatile short count = 0;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/LoggerConfigBenchmark.java,55,private volatile Filter filter = null;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java,60,volatile long midnightToday = 0;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java,61,volatile long midnightTomorrow = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventTranslator.java,38,private final ContextDataInjector injector = ContextDataInjectorFactory.createInjector();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventTranslator.java,61,injector.injectContextData(null, (StringMap) event.getContextData()), contextStack,
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,112,logger.log(LevelTranslator.toLevel(level), msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,117,logger.log(LevelTranslator.toLevel(level), msg, param1);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,122,logger.log(LevelTranslator.toLevel(level), msg, params);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,127,logger.log(LevelTranslator.toLevel(level), msg, thrown);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,209,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.ERROR, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,214,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.WARN, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,219,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.INFO, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,224,logger.logIfEnabled(FQCN, LevelTranslator.CONFIG, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,229,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.DEBUG, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,234,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.TRACE, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,239,logger.logIfEnabled(FQCN, LevelTranslator.FINEST, null, msg);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,37,private ScheduledExecutorService executorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,54,return addr.getHostName();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,58,while (interfaces.hasMoreElements()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,59,final NetworkInterface nic = interfaces.nextElement();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,60,final Enumeration<InetAddress> addresses = nic.getInetAddresses();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,61,while (addresses.hasMoreElements()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,62,final InetAddress address = addresses.nextElement();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,63,if (!address.isLoopbackAddress()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,64,final String hostname = address.getHostName();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,65,if (hostname != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,66,return hostname;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,439,setTriggeringPolicy(factoryData.getTriggeringPolicy());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,263,setTriggeringPolicy(factoryData.getTriggeringPolicy());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,66,file = new File(path);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,67,if (file.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,68,return file;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,21,import java.io.UnsupportedEncodingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,22,import java.net.MalformedURLException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,25,import java.net.URLDecoder;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,26,import java.nio.charset.StandardCharsets;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,59,if (uri.getScheme() == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,60,File file = new File(uri.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,61,if (file.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,62,return file;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,70,uri = new File(path).toURI();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,73,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,76,final String charsetName = StandardCharsets.UTF_8.name();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,77,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,78,String fileName = uri.toURL().getFile();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,79,if (new File(fileName).exists()) { // LOG4J2-466
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,80,return new File(fileName); // allow files with '+' char in name
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,82,fileName = URLDecoder.decode(fileName, charsetName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,83,return new File(fileName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,85,LOGGER.warn("Invalid URL {}", uri, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,87,LOGGER.warn("Invalid encoding: {}", charsetName, uee);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,19,import java.text.ParseException;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,20,import java.text.SimpleDateFormat;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,21,import java.util.Calendar;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,22,import java.util.TimeZone;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,45,private static final long MINUTE_MS = 60000;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,50,private static final long SECOND_MS = 1000;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,55,private final long start;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,59,private final long end;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,67,final Result onMismatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,69,this.start = start;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,70,this.end = end;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,114,final long s = parseTimestamp(start, 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,115,final long e = parseTimestamp(end, Long.MAX_VALUE);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,122,private static long parseTimestamp(final String timestamp, final long defaultValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,126,final SimpleDateFormat stf = new SimpleDateFormat("HH:mm:ss");
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,127,stf.setTimeZone(TimeZone.getTimeZone("UTC"));
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,129,return stf.parse(timestamp).getTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,146,final AtomicReference<WeakReference<LoggerContext>> r = new AtomicReference<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,147,r.set(new WeakReference<>(ctx));
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,148,CONTEXT_MAP.putIfAbsent(name, r);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,46,private static final char PREFIX_SEPARATOR = ':';
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,161,public static final StrMatcher DEFAULT_VALUE_DELIMITER = StrMatcher.stringMatcher(":-");
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,320,this(variableResolver, prefixMatcher, suffixMatcher, escape, DEFAULT_VALUE_DELIMITER);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,333,public StrSubstitutor(
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,334,final StrLookup variableResolver, final StrMatcher prefixMatcher, final StrMatcher suffixMatcher, final char escape, final StrMatcher valueDelimiterMatcher) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,962,if ((valueDelimiterMatchLen = valueDelimiterMatcher.isMatch(varNameExprChars, i)) != 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,963,varName = varNameExpr.substring(0, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,965,break;
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,269,sb.append('{');
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,272,sb.append(", ");
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,278,sb.append('}');
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,64,private void writeHeader() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java,68,if (patternScript != null && pattern != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,236,final String key = pattern != null ? configuration.getStrSubstitutor().replace(event, pattern) : defaultRoute.getKey();
log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java,139,return getThreadContextClassLoader().loadClass(className);
log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java,141,return Class.forName(className);
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,48,private transient EventDataConverter converter;
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,54,this.converter = createConverter();
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,366,if (eventLogger && marker != null && marker.contains(EVENT_MARKER) && converter != null) {
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,367,msg = converter.convertEvent(message, params, throwable);
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,403,converter = createConverter();
log4j-jul/src/main/java/org/apache/logging/log4j/jul/LogManager.java,89,return loggerAdapter.getLogger(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,45,event.execute(endOfBatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,46,event.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,55,private static final long LEAST;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,66,static {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,117,LEAST = buf.getLong() | rand << SHIFT_6;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,122,private UuidUtil() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,81,System.arraycopy(mac, index, node, index + 2, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java,120,mergeStrategy.mergConfigurations(rootNode, sourceRoot, getPluginManager());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/MergeStrategy.java,40,void mergConfigurations(Node target, Node source, PluginManager pluginManager);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,17,package org.apache.logging.log4j.core.appender;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,19,import java.io.OutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,20,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,22,import org.apache.logging.log4j.core.Appender;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,23,import org.apache.logging.log4j.core.Filter;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,24,import org.apache.logging.log4j.core.Layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,28,import org.apache.logging.log4j.core.layout.PatternLayout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,29,import org.apache.logging.log4j.core.util.CloseShieldOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,38,public final class OutputStreamAppender extends AbstractOutputStreamAppender<OutputStreamManager> {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,47,private boolean follow = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,51,private Layout<? extends Serializable> layout = PatternLayout.createDefaultLayout();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,55,private OutputStream target;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,58,public OutputStreamAppender build() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,68,this.follow = shouldFollow;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,88,this.target = aTarget;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,95,private static class FactoryData {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,96,private final Layout<? extends Serializable> layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,97,private final String name;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,98,private final OutputStream os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,110,public FactoryData(final OutputStream os, final String type, final Layout<? extends Serializable> layout) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,111,this.os = os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,112,this.name = type;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,113,this.layout = layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,120,private static class OutputStreamManagerFactory implements ManagerFactory<OutputStreamManager, FactoryData> {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,132,public OutputStreamManager createManager(final String name, final FactoryData data) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,133,return new OutputStreamManager(data.os, data.name, data.layout, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,137,private static OutputStreamManagerFactory factory = new OutputStreamManagerFactory();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,160,public static OutputStreamAppender createAppender(Layout<? extends Serializable> layout, final Filter filter,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,161,final OutputStream target, final String name, final boolean follow, final boolean ignore) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,162,if (name == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,163,LOGGER.error("No name provided for OutputStreamAppender");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,164,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,166,if (layout == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,167,layout = PatternLayout.createDefaultLayout();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,172,private static OutputStreamManager getManager(final OutputStream target, final boolean follow,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,173,final Layout<? extends Serializable> layout) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,174,final OutputStream os = new CloseShieldOutputStream(target);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,175,final String managerName = target.getClass().getName() + "@" + Integer.toHexString(target.hashCode()) + '.'
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,176,+ follow;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,177,return OutputStreamManager.getManager(managerName, new FactoryData(os, managerName, layout), factory);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,181,public static Builder newBuilder() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,182,return new Builder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,185,private OutputStreamAppender(final String name, final Layout<? extends Serializable> layout, final Filter filter,
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,20,import java.util.WeakHashMap;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,24,import org.apache.logging.log4j.LogManager;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,25,import org.apache.logging.log4j.util.LoaderUtil;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,33,public abstract class AbstractLoggerAdapter<L> implements LoggerAdapter<L> {
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,38,protected final Map<LoggerContext, ConcurrentMap<String, L>> registry = new WeakHashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,65,implements org.apache.logging.log4j.spi.LoggerContext, AutoCloseable, Terminable, ConfigurationListener {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,46,public class ClassLoaderContextSelector implements ContextSelector {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,149,ctx = CONTEXT_MAP.get(name).get().get();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,150,return ctx;
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,166,ref.compareAndSet(weakRef, new WeakReference<>(ctx));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,29,import org.apache.logging.log4j.core.LoggerContext;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,55,private final org.apache.logging.log4j.core.Logger logger;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,74,private Category(final org.apache.logging.log4j.core.Logger logger) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,120,org.apache.logging.log4j.core.Logger getLogger() {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,125,final org.apache.logging.log4j.core.Logger parent = logger.getParent();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,126,if (parent == null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,129,final ConcurrentMap<String, Logger> loggers = getLoggersMap(logger.getContext());
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,185,case OFF:
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,186,return Level.OFF;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,202,logger.setLevel(org.apache.logging.log4j.Level.toLevel(level.levelStr));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,210,logger.setLevel(org.apache.logging.log4j.Level.toLevel(priority.levelStr));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,357,logger.logMessage(fqcn, lvl, null, msg, t);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,365,return logger.isAdditive();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,369,logger.setAdditive(additivity);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,381,final ConcurrentMap<String, Logger> loggers = getLoggersMap(logger.getContext());
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,382,while ((name = NameUtil.getSubName(name)) != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,383,final Logger subLogger = loggers.get(name);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,384,if (subLogger != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,385,final ResourceBundle rb = subLogger.bundle;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,386,if (rb != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,387,return rb;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,451,if (logger.isEnabled(level, null, message, throwable)) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,452,logger.logMessage(FQCN, level, null, new ObjectMessage(message), throwable);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,460,return new Logger((LoggerContext) context, name);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,476,return (LoggerContext) getContext(FQCN, false);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,485,return logger.isEnabled(level, null, null);
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,26,import org.apache.logging.log4j.core.LoggerContext;
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,99,final LoggerContext ctx = PrivateManager.getContext();
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,100,ctx.reconfigure();
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,215,return (LoggerContext) getContext(FQCN, false);
log4j-1.2-api/src/main/java/org/apache/log4j/Logger.java,21,import org.apache.logging.log4j.core.LoggerContext;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,174,loggerDisruptor.enqueueLogMessageInfo(translator);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,339,disruptor.getRingBuffer().publishEvent(translator, logEvent, asyncLoggerConfig);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,202,public boolean tryPublish(final RingBufferLogEventTranslator translator) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,212,void enqueueLogMessageInfo(final RingBufferLogEventTranslator translator) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,218,disruptor.publishEvent(translator);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,75,if (entry.getValue() < createTime) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,77,if (appendersUsage.remove(entry.getKey(), entry.getValue())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,41,import org.apache.logging.log4j.core.script.AbstractScript;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,42,import org.apache.logging.log4j.core.script.ScriptManager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,237,final AppenderControl control = getControl(key, event);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,239,control.callAppender(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,247,private synchronized AppenderControl getControl(final String key, final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,271,control = new AppenderControl(app, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,311,control.getAppender().stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,76,LOGGER.debug("Removing appender " + entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,148,private final ConcurrentMap<String, AppenderControl> appenders = new ConcurrentHashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,202,appenders.put(key, new AppenderControl(appender, null, null));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,215,final Map<String, Appender> map = configuration.getAppenders();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,216,for (final Map.Entry<String, AppenderControl> entry : appenders.entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,218,if (!map.containsKey(appender.getName())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,242,if (purgePolicy != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,248,AppenderControl control = appenders.get(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,261,control = appenders.get(DEFAULT_KEY);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,272,appenders.put(key, control);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,298,return Collections.unmodifiableMap(appenders);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,307,LOGGER.debug("Deleting route with " + key + " key ");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,308,final AppenderControl control = appenders.remove(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,310,LOGGER.debug("Stopping route with " + key + " key");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,313,LOGGER.debug("Route with " + key + " key already deleted");
log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptManager.java,81,String threading = (String) factory.getParameter(KEY_THREADING);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,71,|| DefaultAsyncQueueFullPolicy.class.getName().equals(router)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,76,|| DiscardingAsyncQueueFullPolicy.class.getName().equals(router)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,510,&& method.getName().equals("newInstance")) {
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLoggerFactory.java,37,return new Log4jLogger(context.getLogger(key), name);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,508,private Configuration setConfiguration(final Configuration config) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,132,manager.rollover();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,525,final StringBuilder buf = new StringBuilder(255);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,526,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, fileIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java,193,prevFileTime = nextFileTime;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,38,super(new LoggerInputStream(in, charset, logger, fqcn == null ? FQCN : fqcn, level, marker));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,44,super(new LoggerInputStream(in, charset, logger, fqcn == null ? FQCN : fqcn, level, marker), size);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,49,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,54,return super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,59,return super.read(b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,64,return super.read(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,69,return LoggerBufferedInputStream.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,38,super(new LoggerReader(reader, logger, fqcn == null ? FQCN : fqcn, level, marker));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,43,super(new LoggerReader(reader, logger, fqcn == null ? FQCN : fqcn, level, marker), size);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,48,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,53,return super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,58,return super.read(cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,63,return super.read(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,68,final int len = target.remaining();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,69,final char[] cbuf = new char[len];
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,70,final int charsRead = read(cbuf, 0, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,71,if (charsRead > 0) {
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,72,target.put(cbuf, 0, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,74,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,79,return super.readLine();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,40,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,41,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,46,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,47,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,52,this.out.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,53,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,58,this.out.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,63,return LoggerFilterOutputStream.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,68,this.out.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,69,this.logger.put(this.fqcn, b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,74,this.out.write(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,75,this.logger.put(this.fqcn, b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,80,this.out.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,81,this.logger.put(this.fqcn, (byte) (b & 0xFF));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,37,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,38,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,43,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,49,this.out.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,55,this.out.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,60,return LoggerFilterWriter.class.getSimpleName() + "{writer=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,65,this.out.write(cbuf);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,66,this.logger.put(this.fqcn, cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,71,this.out.write(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,72,this.logger.put(this.fqcn, cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,77,this.out.write(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,78,this.logger.put(this.fqcn, (char) c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,83,this.out.write(str);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,84,this.logger.put(this.fqcn, str, 0, str.length());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,89,this.out.write(str, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,90,this.logger.put(this.fqcn, str, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,37,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,38,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,43,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,49,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,50,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,55,final int b = super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,56,this.logger.put(this.fqcn, b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,57,return b;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,62,return read(b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,67,final int bytesRead = super.read(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,68,this.logger.put(this.fqcn, b, off, bytesRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,69,return bytesRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,74,return LoggerInputStream.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,39,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,40,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,44,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,45,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,60,this.logger.put(this.fqcn, b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,65,this.logger.put(this.fqcn, b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,70,this.logger.put(this.fqcn, (byte) (b & 0xFF));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,45,super(new LoggerOutputStream(logger, level, marker, ensureNonNull(charset), fqcn == null ? FQCN : fqcn),
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,46,autoFlush, ensureNonNull(charset).name());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,52,super(new LoggerFilterOutputStream(out, ensureNonNull(charset), logger, fqcn == null ? FQCN : fqcn, level,
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,53,marker), autoFlush, ensureNonNull(charset).name());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,62,super.append(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,68,super.append(csq);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,74,super.append(csq, start, end);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,80,return super.checkError();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,85,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,90,super.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,95,super.format(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,101,super.format(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,107,super.print(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,112,super.print(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,117,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,122,super.print(d);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,127,super.print(f);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,132,super.print(i);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,137,super.print(l);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,142,super.print(obj);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,147,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,152,super.printf(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,158,super.printf(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,164,super.println();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,169,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,174,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,179,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,184,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,189,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,194,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,199,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,204,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,209,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,214,return LoggerPrintStream.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,219,super.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,224,super.write(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,229,super.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,51,super(new LoggerWriter(logger, fqcn == null ? FQCN : fqcn, level, marker), autoFlush);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,56,super(new LoggerFilterWriter(writer, logger, fqcn == null ? FQCN : fqcn, level, marker), autoFlush);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,61,super.append(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,67,super.append(csq);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,73,super.append(csq, start, end);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,79,return super.checkError();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,84,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,89,super.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,94,super.format(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,100,super.format(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,106,super.print(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,111,super.print(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,116,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,121,super.print(d);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,126,super.print(f);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,131,super.print(i);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,136,super.print(l);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,141,super.print(obj);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,146,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,151,super.printf(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,157,super.printf(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,163,super.println();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,168,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,173,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,178,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,183,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,188,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,193,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,198,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,203,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,208,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,213,return LoggerPrintWriter.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,218,super.write(buf);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,223,super.write(buf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,228,super.write(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,233,super.write(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,238,super.write(s, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,37,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,38,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,43,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,49,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,55,final int c = super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,56,this.logger.put(this.fqcn, c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,57,return c;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,62,return read(cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,67,final int charsRead = super.read(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,68,this.logger.put(this.fqcn, cbuf, off, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,69,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,74,final int len = target.remaining();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,75,final char[] cbuf = new char[len];
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,76,final int charsRead = read(cbuf, 0, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,77,if (charsRead > 0) {
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,78,target.put(cbuf, 0, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,80,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,85,return LoggerReader.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,36,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,37,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,40,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,41,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,46,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,56,return this.getClass().getSimpleName() + "[fqcn=" + this.fqcn + ", logger=" + this.logger + "]";
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,61,this.logger.put(this.fqcn, cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,66,this.logger.put(this.fqcn, cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,71,this.logger.put(this.fqcn, (char) c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,76,this.logger.put(this.fqcn, str, 0, str.length());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,81,this.logger.put(this.fqcn, str, off, len);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,46,private MapPatternConverter(final String[] options) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,58,return new MapPatternConverter(options);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,77,toAppendTo.append("{}");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,78,return;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,71,if (manager.getFileSize() == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,72,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java,85,private final char[] cachedBuffer = new char[64]; // max length of formatted date-time in any format < 64
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,59,aManager.getPatternProcessor().getNextTime(aManager.getFileTime(), interval, modulate);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,19,import java.io.FileDescriptor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,20,import java.io.FileOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,21,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,22,import java.io.OutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,23,import java.io.PrintStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,24,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,25,import java.io.UnsupportedEncodingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,26,import java.lang.reflect.Constructor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,27,import java.nio.charset.Charset;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,28,import java.util.concurrent.atomic.AtomicInteger;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,40,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,243,final Class<?> clazz = LoaderUtil.loadClass(JANSI_CLASS);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,22,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,84,final Class<? extends AsyncQueueFullPolicy> cls = LoaderUtil.loadClass(router).asSubclass(AsyncQueueFullPolicy.class);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,26,import com.lmax.disruptor.*;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,31,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,104,(Class<? extends ExceptionHandler<RingBufferLogEvent>>) LoaderUtil.loadClass(cls);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,120,(Class<? extends ExceptionHandler<AsyncLoggerConfigDisruptor.Log4jEventWrapper>>) LoaderUtil.loadClass(cls);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,181,addFactory(list, LoaderUtil.loadClass(factoryClass).asSubclass(ConfigurationFactory.class));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,48,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,80,final Class<?> clazz = LoaderUtil.loadClass(factory);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ReliabilityStrategyFactory.java,21,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ReliabilityStrategyFactory.java,61,final Class<? extends ReliabilityStrategy> cls = LoaderUtil.loadClass(strategy).asSubclass(
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java,71,mergeStrategy = LoaderUtil.newInstanceOf(mergeStrategyClassName);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ContextDataFactory.java,23,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ContextDataInjectorFactory.java,27,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ContextDataInjectorFactory.java,70,final Class<? extends ContextDataInjector> cls = LoaderUtil.loadClass(className).asSubclass(
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,97,final ContextSelector selector = LoaderUtil.newCheckedInstanceOfProperty(Constants.LOG4J_CONTEXT_SELECTOR,
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,110,final ShutdownCallbackRegistry registry = LoaderUtil.newCheckedInstanceOfProperty(
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,259,throws ClassNotFoundException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,260,IllegalAccessException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,261,InstantiationException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,262,NoSuchMethodException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,263,InvocationTargetException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,264,return LoaderUtil.newInstanceOf(className);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,282,throws ClassNotFoundException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,283,NoSuchMethodException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,284,IllegalAccessException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,285,InvocationTargetException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,286,InstantiationException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,287,return LoaderUtil.newCheckedInstanceOf(className, clazz);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,297,return LoaderUtil.isClassAvailable(className);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/OptionConverter.java,24,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/OptionConverter.java,229,final Class<?> classObj = LoaderUtil.loadClass(className);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,632,return (T) appenders.get(appenderName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,652,appenders.putIfAbsent(appender.getName(), appender);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,768,final Appender app = appenders.remove(appenderName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AwaitCompletionReliabilityStrategy.java,97,return result.getReliabilityStrategy().getActiveLoggerConfig(next);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LockingReliabilityStrategy.java,89,return result.getReliabilityStrategy().getActiveLoggerConfig(next);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,125,public void baseline() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,126,consume(bytes);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,132,public void usAsciiGetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,133,consume(usAsciiGetBytesLayout.toByteArray(logEvent));
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,147,public void iso8859_1GetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,148,consume(iso8859_1GetBytesLayout.toByteArray(logEvent));
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,162,public void utf8GetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,163,consume(utf8GetBytesLayout.toByteArray(logEvent));
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,177,public void utf16GetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,178,consume(utf16GetBytesLayout.toByteArray(logEvent));
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/MDCContextMap.java,66,return MDC.getCopyOfContextMap().containsKey(key);
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/MDCContextMap.java,83,return MDC.getCopyOfContextMap().isEmpty();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,103,final String font, final String fontSize, final String headerSize) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,147,sbuf.append(event.getTimeMillis() - jvmStartTime);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,340,return new HtmlLayout(locationInfo, title, contentType, charset, font, fontSize, headerSize);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,417,fontSize.larger().getFontSize());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,338,LOGGER.trace("{} notifying ReliabilityStrategies that appenders will be stopped.", cls);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,339,for (final LoggerConfig loggerConfig : loggerConfigs.values()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,340,loggerConfig.getReliabilityStrategy().beforeStopAppenders();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,342,root.getReliabilityStrategy().beforeStopAppenders();
log4j-api/src/main/java/org/apache/logging/log4j/message/FormattedMessage.java,259,stringArgs[i] = obj.toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,209,scriptManager = new ScriptManager(this, watchManager);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,508,scriptManager.addScript(script);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,26,import org.apache.logging.log4j.util.ReadOnlyStringMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,30,import org.apache.logging.log4j.util.StringMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,398,trimMessageText();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,408,private void trimMessageText() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,409,if (messageText != null && messageText.length() > Constants.MAX_REUSABLE_MESSAGE_SIZE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,410,messageText.setLength(Constants.MAX_REUSABLE_MESSAGE_SIZE);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,411,messageText.trimToSize();
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,136,trimMessageText();
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,153,private void trimMessageText() {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,154,if (messageText != null && messageText.length() > Constants.MAX_REUSABLE_MESSAGE_SIZE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,155,messageText.setLength(Constants.MAX_REUSABLE_MESSAGE_SIZE);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,156,messageText.trimToSize();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,100,if (stringBuilder.length() > MAX_STRING_BUILDER_SIZE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,101,stringBuilder.setLength(MAX_STRING_BUILDER_SIZE);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,102,stringBuilder.trimToSize();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MdcPatternConverter.java,39,private static final int MAX_STRING_BUILDER_SIZE = Constants.MAX_REUSABLE_MESSAGE_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MdcPatternConverter.java,166,if (stringBuilder.length() > MAX_STRING_BUILDER_SIZE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MdcPatternConverter.java,167,stringBuilder.setLength(MAX_STRING_BUILDER_SIZE);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MdcPatternConverter.java,168,stringBuilder.trimToSize();
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,289,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,299,result = new StringBuilder(Math.min(MIN_BUILDER_SIZE, currentPatternLength * 2));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,352,final int hours = ms / 3600000;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,353,ms -= 3600000 * hours;
log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java,57,private static final String[] COMPATIBLE_API_VERSIONS = {"2.0.0", "2.1.0", "2.2.0", "2.3.0", "2.4.0", "2.5.0", "2.6.0"};
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,604,lastLoader = callerClass.getClassLoader();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,170,if (escapedLogger.isEmpty()) {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,106,patternLayoutEncoder.init(baos);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,117,patternLayoutEncoder.doEncode(LOGBACKEVENT);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,119,return baos.toByteArray();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,25,import java.util.concurrent.Future;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,188,private boolean enableSubstitutionInVariables;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,24,import java.util.Objects;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,29,import org.apache.logging.log4j.core.appender.rolling.action.CommonsCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,30,import org.apache.logging.log4j.core.appender.rolling.action.CompositeAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,32,import org.apache.logging.log4j.core.appender.rolling.action.GzCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,33,import org.apache.logging.log4j.core.appender.rolling.action.ZipCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,200,final boolean useMax = fileIndex == null ? true : fileIndex.equalsIgnoreCase("max");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,201,int minIndex = MIN_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,202,if (min != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,203,minIndex = Integer.parseInt(min);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,204,if (minIndex < 1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,205,LOGGER.error("Minimum window size too small. Limited to " + MIN_WINDOW_SIZE);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,206,minIndex = MIN_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,209,int maxIndex = DEFAULT_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,210,if (max != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,211,maxIndex = Integer.parseInt(max);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,212,if (maxIndex < minIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,213,maxIndex = minIndex < DEFAULT_WINDOW_SIZE ? DEFAULT_WINDOW_SIZE : minIndex;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,214,LOGGER.error("Maximum window size must be greater than the minimum windows size. Set to " + maxIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,232,private final StrSubstitutor strSubstitutor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,252,this.strSubstitutor = strSubstitutor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,273,public StrSubstitutor getStrSubstitutor() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,274,return strSubstitutor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,312,final List<FileRenameAction> renames = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,313,final StringBuilder buf = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,316,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, highIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,317,String highFilename = strSubstitutor.replace(buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,318,final int suffixLength = suffixLength(highFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,319,int curMaxIndex = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,321,for (int i = highIndex; i >= lowIndex; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,322,File toRename = new File(highFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,323,if (i == highIndex && toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,324,curMaxIndex = highIndex;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,326,curMaxIndex = i + 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,330,boolean isBase = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,332,if (suffixLength > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,333,final File toRenameBase = new File(highFilename.substring(0, highFilename.length() - suffixLength));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,335,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,336,if (toRenameBase.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,337,LOGGER.debug("DefaultRolloverStrategy.purgeAscending deleting {} base of {}.", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,338,toRenameBase, toRename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,339,toRenameBase.delete();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,342,toRename = toRenameBase;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,343,isBase = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,347,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,352,if (i == lowIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,353,LOGGER.debug("DefaultRolloverStrategy.purgeAscending deleting {} at low index {}: all slots full.",
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,354,toRename, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,355,if (!toRename.delete()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,356,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,359,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,367,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, i - 1);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,369,final String lowFilename = strSubstitutor.replace(buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,370,String renameTo = lowFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,372,if (isBase) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,373,renameTo = lowFilename.substring(0, lowFilename.length() - suffixLength);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,376,renames.add(new FileRenameAction(toRename, new File(renameTo), true));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,377,highFilename = lowFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,379,buf.setLength(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,381,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, i - 1);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,383,highFilename = strSubstitutor.replace(buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,386,if (curMaxIndex == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,387,curMaxIndex = lowIndex;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,393,for (int i = renames.size() - 1; i >= 0; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,394,final Action action = renames.get(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,395,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,396,LOGGER.debug("DefaultRolloverStrategy.purgeAscending executing {} of {}: {}", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,397,i, renames.size(), action);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,398,if (!action.execute()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,402,LOGGER.warn("Exception during purge in RollingFileAppender", ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,403,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,406,return curMaxIndex;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,419,final List<FileRenameAction> renames = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,420,final StringBuilder buf = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,423,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, lowIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,425,String lowFilename = strSubstitutor.replace(buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,426,final int suffixLength = suffixLength(lowFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,428,for (int i = lowIndex; i <= highIndex; i++) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,429,File toRename = new File(lowFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,430,boolean isBase = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,432,if (suffixLength > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,433,final File toRenameBase = new File(lowFilename.substring(0, lowFilename.length() - suffixLength));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,435,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,436,if (toRenameBase.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,437,LOGGER.debug("DefaultRolloverStrategy.purgeDescending deleting {} base of {}.", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,438,toRenameBase, toRename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,439,toRenameBase.delete();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,442,toRename = toRenameBase;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,443,isBase = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,447,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,452,if (i == highIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,453,LOGGER.debug(
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,455,toRename, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,456,if (!toRename.delete()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,457,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,460,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,466,buf.setLength(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,468,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, i + 1);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,470,final String highFilename = strSubstitutor.replace(buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,471,String renameTo = highFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,473,if (isBase) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,474,renameTo = highFilename.substring(0, highFilename.length() - suffixLength);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,477,renames.add(new FileRenameAction(toRename, new File(renameTo), true));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,478,lowFilename = highFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,487,for (int i = renames.size() - 1; i >= 0; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,488,final Action action = renames.get(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,490,LOGGER.debug("DefaultRolloverStrategy.purgeDescending executing {} of {}: {}", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,491,i, renames.size(), action);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,513,if (maxIndex < 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,514,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,516,final long startNanos = System.nanoTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,517,final int fileIndex = purge(minIndex, maxIndex, manager);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,518,if (fileIndex < 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,519,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,521,if (LOGGER.isTraceEnabled()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,522,final double durationMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,523,LOGGER.trace("DefaultRolloverStrategy.purge() took {} milliseconds", durationMillis);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,559,return "DefaultRolloverStrategy(min=" + minIndex + ", max=" + maxIndex + ')';
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,254,Future<?> future = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,278,if (future == null || future.isDone() || future.isCancelled()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,29,import java.util.concurrent.ExecutorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,30,import java.util.concurrent.Executors;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,31,import java.util.concurrent.Future;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,32,import java.util.concurrent.RejectedExecutionException;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,49,import org.apache.logging.log4j.core.util.Log4jThreadFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,82,private ExecutorService executorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,83,private ExecutorService executorServiceDeamons;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,308,final boolean shutdownEs;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,309,final boolean shutdownEsd;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,336,final String source = "LoggerContext \'" + getName() + "\'";
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,337,shutdownEs = ExecutorServices.shutdown(executorService, timeout, timeUnit, source);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,345,return shutdownEs && shutdownEsd;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,519,executorServiceDeamons = Executors.newCachedThreadPool(Log4jThreadFactory.createDaemonThreadFactory(contextName));
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,670,public ExecutorService getExecutorService() {
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,671,return executorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,679,public ExecutorService getExecutorServiceDeamons() {
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,680,return executorServiceDeamons;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,693,public Future<?> submit(final Runnable task) {
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,694,return executorService.submit(task);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,709,public Future<?> submitDaemon(final Runnable task) {
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,710,return executorServiceDeamons.submit(task);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,272,future = LoggerContext.getContext(false).submit(new AsyncAction(descriptor.getAsynchronous(), this));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,371,watchManager.stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,373,configurationScheduler.stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfiguratonFileWatcher.java,22,import org.apache.logging.log4j.core.LoggerContext;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfiguratonFileWatcher.java,46,LoggerContext.getContext(false).submitDaemon(new ReconfigurationRunnable(configurationListener, reconfigurable));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Log4jThreadFactory.java,50,public static Log4jThreadFactory createThreadFactory(final String threadFactoryName) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Log4jThreadFactory.java,51,return new Log4jThreadFactory(threadFactoryName, false, Thread.NORM_PRIORITY);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,130,entry.setKey(plugin.name().toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,161,entry.setKey(alias.toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,174,final String prefix = var.substring(0, prefixPos);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,948,final int endPos = pos;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,964,varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,325,contextData.putValue(prop.getName(), prop.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,518,executorService = Executors.newCachedThreadPool(Log4jThreadFactory.createThreadFactory(contextName));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,44,if (scheduledItems > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,46,scheduledItems = Math.min(scheduledItems, MAX_SCHEDULED_ITEMS);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,47,executorService = new ScheduledThreadPoolExecutor(scheduledItems,
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,48,Log4jThreadFactory.createDaemonThreadFactory("Scheduled"));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,50,LOGGER.debug("{}: No scheduled items", SIMPLE_NAME);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,57,if (executorService != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,58,LOGGER.debug("{} shutting down threads in {}", SIMPLE_NAME, executorService);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,59,executorService.shutdown();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,70,++scheduledItems;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,95,return executorService.schedule(callable, delay, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,107,return executorService.schedule(command, delay, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,139,return executorService.scheduleAtFixedRate(command, initialDelay, period, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,153,return executorService.scheduleWithFixedDelay(command, initialDelay, delay, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/tools/Generate.java,25,import org.apache.logging.log4j.util.Strings;
log4j-core/src/main/java/org/apache/logging/log4j/core/tools/Generate.java,1100,sb.append(Strings.LINE_SEPARATOR);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,17,package org.apache.logging.log4j.core.config.composite;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,19,import java.util.HashMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,20,import java.util.List;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,21,import java.util.Map;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,23,import org.apache.logging.log4j.Level;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,24,import org.apache.logging.log4j.core.Filter;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,25,import org.apache.logging.log4j.core.config.AbstractConfiguration;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,26,import org.apache.logging.log4j.core.config.Node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,27,import org.apache.logging.log4j.core.config.plugins.util.PluginManager;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,28,import org.apache.logging.log4j.core.config.plugins.util.PluginType;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,29,import org.apache.logging.log4j.core.filter.CompositeFilter;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,54,public class DefaultMergeStrategy implements MergeStrategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,56,private static final String APPENDERS = "appenders";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,57,private static final String PROPERTIES = "properties";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,58,private static final String LOGGERS = "loggers";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,59,private static final String SCRIPTS = "scripts";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,60,private static final String FILTERS = "filters";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,61,private static final String STATUS = "status";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,62,private static final String NAME = "name";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,63,private static final String REF = "ref";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,71,public void mergeRootProperties(final Node rootNode, final AbstractConfiguration configuration) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,72,for (final Map.Entry<String, String> attribute : configuration.getRootNode().getAttributes().entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,73,boolean isFound = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,74,for (final Map.Entry<String, String> targetAttribute : rootNode.getAttributes().entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,75,if (targetAttribute.getKey().equalsIgnoreCase(attribute.getKey())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,76,if (attribute.getKey().equalsIgnoreCase(STATUS)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,77,final Level targetLevel = Level.getLevel(targetAttribute.getValue().toUpperCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,78,final Level sourceLevel = Level.getLevel(attribute.getValue().toUpperCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,79,if (targetLevel != null && sourceLevel != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,80,if (sourceLevel.isLessSpecificThan(targetLevel)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,81,targetAttribute.setValue(attribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,84,if (sourceLevel != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,85,targetAttribute.setValue(attribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,88,if (attribute.getKey().equalsIgnoreCase("monitorInterval")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,89,final int sourceInterval = Integer.parseInt(attribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,90,final int targetInterval = Integer.parseInt(targetAttribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,91,if (targetInterval == 0 || sourceInterval < targetInterval) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,92,targetAttribute.setValue(attribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,95,targetAttribute.setValue(attribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,98,isFound = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,101,if (!isFound) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,102,rootNode.getAttributes().put(attribute.getKey(), attribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,115,public void mergConfigurations(final Node target, final Node source, final PluginManager pluginManager) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,116,for (final Node sourceChildNode : source.getChildren()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,117,final boolean isFilter = isFilterNode(sourceChildNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,118,boolean isMerged = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,119,for (final Node targetChildNode : target.getChildren()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,120,if (isFilter) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,121,if (isFilterNode(targetChildNode)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,122,updateFilterNode(target, targetChildNode, sourceChildNode, pluginManager);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,123,isMerged = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,124,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,126,continue;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,129,if (!targetChildNode.getName().equalsIgnoreCase(sourceChildNode.getName())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,130,continue;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,133,switch (targetChildNode.getName().toLowerCase()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,134,case PROPERTIES:
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,135,case SCRIPTS:
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,136,case APPENDERS: {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,137,for (final Node node : sourceChildNode.getChildren()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,138,for (final Node targetNode : targetChildNode.getChildren()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,139,if (targetNode.getAttributes().get(NAME).equals(node.getAttributes().get(NAME))) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,140,targetChildNode.getChildren().remove(targetNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,141,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,144,targetChildNode.getChildren().add(node);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,146,isMerged = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,147,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,149,case LOGGERS: {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,150,final Map<String, Node> targetLoggers = new HashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,151,for (final Node node : targetChildNode.getChildren()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,152,targetLoggers.put(node.getName(), node);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,154,for (final Node node : sourceChildNode.getChildren()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,155,final Node targetNode = getLoggerNode(targetChildNode, node.getAttributes().get(NAME));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,156,final Node loggerNode = new Node(targetChildNode, node.getName(), node.getType());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,157,if (targetNode != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,158,targetNode.getAttributes().putAll(node.getAttributes());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,159,for (final Node sourceLoggerChild : node.getChildren()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,160,if (isFilterNode(sourceLoggerChild)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,161,boolean foundFilter = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,162,for (final Node targetChild : targetNode.getChildren()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,163,if (isFilterNode(targetChild)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,164,updateFilterNode(loggerNode, targetChild, sourceLoggerChild,
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,165,pluginManager);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,166,foundFilter = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,167,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,170,if (!foundFilter) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,171,final Node childNode = new Node(loggerNode, sourceLoggerChild.getName(),
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,172,sourceLoggerChild.getType());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,173,targetNode.getChildren().add(childNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,176,final Node childNode = new Node(loggerNode, sourceLoggerChild.getName(),
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,177,sourceLoggerChild.getType());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,178,childNode.getAttributes().putAll(sourceLoggerChild.getAttributes());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,179,if (childNode.getName().equalsIgnoreCase("AppenderRef")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,180,for (final Node targetChild : targetNode.getChildren()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,181,if (isSameReference(targetChild, childNode)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,182,targetNode.getChildren().remove(targetChild);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,183,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,187,for (final Node targetChild : targetNode.getChildren()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,188,if (isSameName(targetChild, childNode)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,189,targetNode.getChildren().remove(targetChild);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,190,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,195,targetNode.getChildren().add(childNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,199,loggerNode.getAttributes().putAll(node.getAttributes());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,200,loggerNode.getChildren().addAll(node.getChildren());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,201,targetChildNode.getChildren().add(loggerNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,204,isMerged = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,205,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,207,default: {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,208,targetChildNode.getChildren().addAll(sourceChildNode.getChildren());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,209,isMerged = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,210,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,215,if (!isMerged) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,216,if (sourceChildNode.getName().equalsIgnoreCase("Properties")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,217,target.getChildren().add(0, sourceChildNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,219,target.getChildren().add(sourceChildNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,225,private Node getLoggerNode(final Node parentNode, final String name) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,226,for (final Node node : parentNode.getChildren()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,227,final String nodeName = node.getAttributes().get(NAME);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,228,if (name == null && nodeName == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,229,return node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,231,if (nodeName != null && nodeName.equals(name)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,232,return node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,235,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,238,private void updateFilterNode(final Node target, final Node targetChildNode, final Node sourceChildNode,
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,239,final PluginManager pluginManager) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,240,if (CompositeFilter.class.isAssignableFrom(targetChildNode.getType().getPluginClass())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,241,final Node node = new Node(targetChildNode, sourceChildNode.getName(), sourceChildNode.getType());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,242,node.getChildren().addAll(sourceChildNode.getChildren());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,243,node.getAttributes().putAll(sourceChildNode.getAttributes());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,244,targetChildNode.getChildren().add(node);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,246,final PluginType pluginType = pluginManager.getPluginType(FILTERS);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,247,final Node filtersNode = new Node(targetChildNode, FILTERS, pluginType);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,248,final Node node = new Node(filtersNode, sourceChildNode.getName(), sourceChildNode.getType());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,249,node.getAttributes().putAll(sourceChildNode.getAttributes());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,250,final List<Node> children = filtersNode.getChildren();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,251,children.add(targetChildNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,252,children.add(node);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,253,final List<Node> nodes = target.getChildren();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,254,nodes.remove(targetChildNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,255,nodes.add(filtersNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,259,private boolean isFilterNode(final Node node) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,260,return Filter.class.isAssignableFrom(node.getType().getPluginClass());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,263,private boolean isSameName(final Node node1, final Node node2) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,264,final String value = node1.getAttributes().get(NAME);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,265,return value != null && value.toLowerCase().equals(node2.getAttributes().get(NAME).toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,268,private boolean isSameReference(final Node node1, final Node node2) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,269,final String value = node1.getAttributes().get(REF);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,270,return value != null && value.toLowerCase().equals(node2.getAttributes().get(REF).toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,69,if (!isStarted()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,157,return new SslSocketManager(name, os, socket, data.sslConfiguration, inetAddress, data.host, data.port, 0,
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,185,socket = (SSLSocket) socketFactory.createSocket(data.host, data.port);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,51,this.cronExpression = schedule;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,52,this.configuration = configuration;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,72,future = configuration.getScheduler().scheduleWithCron(cronExpression, new CronTrigger());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,133,final Date fireDate = future.getFireTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,76,LOGGER.error(SHUTDOWN_HOOK_MARKER, "Caught exception executing shutdown hook {}", hook, t);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,559,return this.getClass().getClassLoader().loadClass(className);
log4j-api/src/main/java/org/apache/logging/log4j/message/LocalizedMessageFactory.java,78,return new LocalizedMessage(baseName,  key, params);
log4j-api/src/main/java/org/apache/logging/log4j/message/ObjectMessage.java,62,StringBuilders.appendValue(buffer, obj);
log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessage.java,72,buffer.append(charSequence);
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,87,System.arraycopy(varargs, 0, emptyReplacement, 0, argCount);
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,90,result = varargs;
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,91,varargs = emptyReplacement;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,246,logIfEnabled(FQCN, Level.DEBUG, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,281,logIfEnabled(FQCN, Level.DEBUG, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,648,logIfEnabled(FQCN, Level.ERROR, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,693,logIfEnabled(FQCN, Level.ERROR, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,955,logIfEnabled(FQCN, Level.FATAL, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1000,logIfEnabled(FQCN, Level.FATAL, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1222,logIfEnabled(FQCN, Level.INFO, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1267,logIfEnabled(FQCN, Level.INFO, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1550,logIfEnabled(FQCN, level, marker, msg, (Throwable) null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1599,logIfEnabled(FQCN, level, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1977,logMessageSafely(fqcn, level, marker, message, t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1983,logMessageSafely(fqcn, level, marker, message, t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2130,logIfEnabled(FQCN, Level.TRACE, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2175,logIfEnabled(FQCN, Level.TRACE, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2451,logIfEnabled(FQCN, Level.WARN, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2496,logIfEnabled(FQCN, Level.WARN, null, msg, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java,77,return fastDateFormat.toPattern();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,66,StringBuilder format(long millis, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,76,StringBuilder format(Date date, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,88,StringBuilder format(Calendar calendar, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,19,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,32,public class FastDateFormat extends Format implements DatePrinter, DateParser, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,56,private static final long serialVersionUID = 2L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,58,private static final FormatCache<FastDateFormat> CACHE = new FormatCache<FastDateFormat>() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,80,protected FastDateFormat(final String pattern, final TimeZone timeZone, final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,81,this(pattern, timeZone, locale, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,98,protected FastDateFormat(final String pattern, final TimeZone timeZone, final Locale locale,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,99,final Date centuryStart) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,100,printer = new FastDatePrinter(pattern, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,101,parser = new FastDateParser(pattern, timeZone, locale, centuryStart);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,113,return CACHE.getInstance();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,126,return CACHE.getInstance(pattern, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,140,return CACHE.getInstance(pattern, timeZone, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,154,return CACHE.getInstance(pattern, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,169,return CACHE.getInstance(pattern, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,184,return CACHE.getDateInstance(style, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,199,return CACHE.getDateInstance(style, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,214,return CACHE.getDateInstance(style, timeZone, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,229,return CACHE.getDateInstance(style, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,244,return CACHE.getTimeInstance(style, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,259,return CACHE.getTimeInstance(style, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,274,return CACHE.getTimeInstance(style, timeZone, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,289,return CACHE.getTimeInstance(style, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,305,return CACHE.getDateTimeInstance(dateStyle, timeStyle, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,321,return CACHE.getDateTimeInstance(dateStyle, timeStyle, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,336,public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,337,final TimeZone timeZone) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,353,public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,354,final TimeZone timeZone, final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,355,return CACHE.getDateTimeInstance(dateStyle, timeStyle, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,372,return printer.format(obj, toAppendTo, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,426,public StringBuilder format(final long millis, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,440,public StringBuilder format(final Date date, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,454,public StringBuilder format(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,548,public String toPattern() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,549,return printer.getPattern();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,564,if (!(obj instanceof FastDateFormat)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,593,return "FastDateFormat[" + printer.getPattern() + "," + printer.getLocale() + ","
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,594,+ printer.getTimeZone().getID() + "]";
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,606,protected StringBuilder applyRules(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,607,return printer.applyRules(calendar, buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,28,import java.util.GregorianCalendar;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,73,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,128,for (int i = mRules.length; --i >= 0;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,237,rule = selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,238,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,239,case 'X': // ISO 8601
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,241,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,377,throw new IllegalArgumentException("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName()));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,388,final Calendar c = newCalendar(); // hard code GregorianCalendar
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,408,private GregorianCalendar newCalendar() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,410,return new GregorianCalendar(mTimeZone, mLocale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,420,final Calendar c = newCalendar(); // hard code GregorianCalendar
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,441,public StringBuilder format(final long millis, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,442,return format(new Date(millis), buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,451,public StringBuilder format(final Date date, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,452,final Calendar c = newCalendar(); // hard code GregorianCalendar
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,463,public StringBuilder format(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,465,return format(calendar.getTime(), buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,477,protected StringBuilder applyRules(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,478,for (final Rule rule : mRules) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,479,rule.appendTo(buf, calendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,547,return mPattern.equals(other.mPattern) && mTimeZone.equals(other.mTimeZone) && mLocale.equals(other.mLocale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,594,private static void appendDigits(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,595,buffer.append((char) (value / 10 + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,596,buffer.append((char) (value % 10 + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,620,void appendTo(StringBuilder buffer, Calendar calendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,635,void appendTo(StringBuilder buffer, int value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,667,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,701,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,732,for (int i = mValues.length; --i >= 0;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,745,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,779,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,787,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,789,buffer.append((char) (value + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,793,buffer.append(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,826,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,834,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,836,buffer.append((char) (value + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,879,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,887,public final void appendTo(final StringBuilder buffer, int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,889,for (int digit = 0; digit < mSize; ++digit) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,890,buffer.append('0');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,893,int index = buffer.length();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,894,for (; value > 0; value /= 10) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,895,buffer.setCharAt(--index, (char) ('0' + value % 10));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,929,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,937,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,941,buffer.append(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,973,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,981,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1013,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1021,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1055,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1067,public void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1101,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1113,public void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1120,private static final ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache = new ConcurrentHashMap<>(
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1121,7);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1142,value = prior;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1189,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1231,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1262,static final Iso8601_Rule ISO8601_HOURS = new Iso8601_Rule(3);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1276,switch (tokenLen) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1284,throw new IllegalArgumentException("invalid number of X");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1311,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1328,if (length < 5) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1332,if (length == 6) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1360,TimeZoneDisplayKey(final TimeZone timeZone, final boolean daylight, final int style, final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1375,return (mStyle * 31 + mLocale.hashCode()) * 31 + mTimeZone.hashCode();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1387,final TimeZoneDisplayKey other = (TimeZoneDisplayKey) obj;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1388,return mTimeZone.equals(other.mTimeZone) && mStyle == other.mStyle && mLocale.equals(other.mLocale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,40,static final int NONE = -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,42,private static final ConcurrentMap<MultipartKey, String> DATETIME_INSTANCE_CACHE =
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,43,new ConcurrentHashMap<>(7);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,45,private final ConcurrentMap<MultipartKey, F> cInstanceCache = new ConcurrentHashMap<>(7);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,81,if (format == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,83,final F previousValue = cInstanceCache.putIfAbsent(key, format);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,87,format = previousValue;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,119,private F getDateTimeInstance(final Integer dateStyle, final Integer timeStyle, final TimeZone timeZone,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,120,Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,192,String pattern = DATETIME_INSTANCE_CACHE.get(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,197,formatter = DateFormat.getTimeInstance(timeStyle.intValue(), locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,199,formatter = DateFormat.getDateInstance(dateStyle.intValue(), locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,203,pattern = ((SimpleDateFormat) formatter).toPattern();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,204,final String previous = DATETIME_INSTANCE_CACHE.putIfAbsent(key, pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,209,pattern = previous;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,245,return obj != null && Arrays.equals(keys, ((MultipartKey) obj).keys);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,253,if (hashCode == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,254,int rc = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,255,for (final Object key : keys) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,256,if (key != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,257,rc = rc * 7 + key.hashCode();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,260,hashCode = rc;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,46,static final Locale JAPANESE_IMPERIAL = new Locale("ja", "JP", "JP");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,55,private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,57,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,58,return iValue - 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,62,private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,67,void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,68,int iValue = Integer.parseInt(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,69,if (iValue < 100) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,70,iValue = parser.adjustYear(iValue);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,72,cal.set(Calendar.YEAR, iValue);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,76,private static final Strategy LITERAL_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,77,private static final Strategy WEEK_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,78,private static final Strategy WEEK_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_MONTH);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,79,private static final Strategy DAY_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.DAY_OF_YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,80,private static final Strategy DAY_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_MONTH);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,81,private static final Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK_IN_MONTH);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,82,private static final Strategy DAY_OF_WEEK_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,83,private static final Strategy HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,84,private static final Strategy HOUR24_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,86,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,87,return iValue == 24 ? 0 : iValue;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,90,private static final Strategy HOUR12_STRATEGY = new NumberStrategy(Calendar.HOUR) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,92,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,93,return iValue == 12 ? 0 : iValue;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,96,private static final Strategy HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,97,private static final Strategy MINUTE_STRATEGY = new NumberStrategy(Calendar.MINUTE);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,98,private static final Strategy SECOND_STRATEGY = new NumberStrategy(Calendar.SECOND);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,99,private static final Strategy MILLISECOND_STRATEGY = new NumberStrategy(Calendar.MILLISECOND);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,100,private static final Strategy ISO_8601_STRATEGY = new ISO8601TimeZoneStrategy("(Z|(?:[+-]\\d{2}(?::?\\d{2})?))");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,108,private final boolean lenient;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,111,private transient Pattern parsePattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,112,private transient Strategy[] strategies;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,115,private transient String currentFormatField;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,116,private transient Strategy nextStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,131,this(pattern, timeZone, locale, null, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,146,protected FastDateParser(final String pattern, final TimeZone timeZone, final Locale locale, final Date centuryStart) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,147,this(pattern, timeZone, locale, centuryStart, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,164,protected FastDateParser(final String pattern, final TimeZone timeZone, final Locale locale,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,165,final Date centuryStart, final boolean lenient) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,169,this.lenient = lenient;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,174,if (centuryStart != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,176,centuryStartYear = definingCalendar.get(Calendar.YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,178,centuryStartYear = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,182,centuryStartYear = definingCalendar.get(Calendar.YEAR) - 80;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,184,century = centuryStartYear / 100 * 100;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,185,startYear = centuryStartYear - century;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,198,final StringBuilder regex = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,199,final List<Strategy> collector = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,201,final Matcher patternMatcher = formatPattern.matcher(pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,202,if (!patternMatcher.lookingAt()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,203,throw new IllegalArgumentException("Illegal pattern character '"
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,204,+ pattern.charAt(patternMatcher.regionStart()) + "'");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,207,currentFormatField = patternMatcher.group();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,208,Strategy currentStrategy = getStrategy(currentFormatField, definingCalendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,209,for (;;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,210,patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,211,if (!patternMatcher.lookingAt()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,212,nextStrategy = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,213,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,215,final String nextFormatField = patternMatcher.group();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,216,nextStrategy = getStrategy(nextFormatField, definingCalendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,217,if (currentStrategy.addRegex(this, regex)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,218,collector.add(currentStrategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,220,currentFormatField = nextFormatField;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,221,currentStrategy = nextStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,223,if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,224,throw new IllegalArgumentException("Failed to parse \"" + pattern + "\" ; gave up at index "
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,225,+ patternMatcher.regionStart());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,227,if (currentStrategy.addRegex(this, regex)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,228,collector.add(currentStrategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,230,currentFormatField = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,231,strategies = collector.toArray(new Strategy[collector.size()]);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,232,parsePattern = Pattern.compile(regex.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,272,Pattern getParsePattern() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,273,return parsePattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,292,return pattern.equals(other.pattern) && timeZone.equals(other.timeZone) && locale.equals(other.locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,352,final Date date = parse(source, new ParsePosition(0));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,356,throw new ParseException("(The " + locale + " locale does not support dates before 1868 AD)\n"
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,357,+ "Unparseable date: \"" + source + "\" does not match " + parsePattern.pattern(), 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,359,throw new ParseException("Unparseable date: \"" + source + "\" does not match " + parsePattern.pattern(), 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,387,final int offset = pos.getIndex();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,388,final Matcher matcher = parsePattern.matcher(source.substring(offset));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,389,if (!matcher.lookingAt()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,390,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,393,final Calendar cal = Calendar.getInstance(timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,395,cal.setLenient(lenient);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,397,for (int i = 0; i < strategies.length;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,398,final Strategy strategy = strategies[i++];
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,399,strategy.setCalendar(this, cal, matcher.group(i));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,401,pos.setIndex(offset + matcher.end());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,402,return cal.getTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,440,private static StringBuilder escapeRegex(final StringBuilder regex, final String value, final boolean unquote) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,441,regex.append("\\Q");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,442,for (int i = 0; i < value.length(); ++i) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,443,char c = value.charAt(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,444,switch (c) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,445,case '\'':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,446,if (unquote) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,447,if (++i == value.length()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,448,return regex;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,450,c = value.charAt(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,452,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,453,case '\\':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,454,if (++i == value.length()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,455,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,464,regex.append(c); // we always want the original \
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,465,c = value.charAt(i); // Is it followed by E ?
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,466,if (c == 'E') { // \E detected
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,467,regex.append("E\\\\E\\"); // see comment above
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,468,c = 'Q'; // appended below
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,470,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,471,default:
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,472,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,474,regex.append(c);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,476,regex.append("\\E");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,477,return regex;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,488,private static Map<String, Integer> getDisplayNames(final int field, final Calendar definingCalendar,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,489,final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,490,return definingCalendar.getDisplayNames(field, Calendar.ALL_STYLES, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,509,boolean isNextNumber() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,510,return nextStrategy != null && nextStrategy.isNumber();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,518,int getFieldWidth() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,519,return currentFormatField.length();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,545,void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,557,abstract boolean addRegex(FastDateParser parser, StringBuilder regex);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,564,private static final Pattern formatPattern = Pattern
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,565,.compile("D+|E+|F+|G+|H+|K+|M+|S+|W+|X+|Z+|a+|d+|h+|k+|m+|s+|u+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,574,private Strategy getStrategy(final String formatField, final Calendar definingCalendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,575,switch (formatField.charAt(0)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,576,case '\'':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,577,if (formatField.length() > 2) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,578,return new CopyQuotedStrategy(formatField.substring(1, formatField.length() - 1));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,582,return new CopyQuotedStrategy(formatField);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,597,: NUMBER_MONTH_STRATEGY;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,606,case 'h': // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,608,case 'k': // Hour in day (1-24), i.e. midnight is 24, not 0
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,619,return formatField.length() > 2 ? LITERAL_YEAR_STRATEGY : ABBREVIATED_YEAR_STRATEGY;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,621,return ISO8601TimeZoneStrategy.getStrategy(formatField.length());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,623,if (formatField.equals("ZZ")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,624,return ISO_8601_STRATEGY;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,662,strategy = field == Calendar.ZONE_OFFSET ? new TimeZoneStrategy(locale) : new CaseInsensitiveTextStrategy(
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,663,field, definingCalendar, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,676,private final String formatField;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,692,char c = formatField.charAt(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,693,if (c == '\'') {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,694,c = formatField.charAt(1);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,696,return Character.isDigit(c);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,703,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,704,escapeRegex(regex, formatField, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,705,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,712,private static class CaseInsensitiveTextStrategy extends Strategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,714,private final Locale locale;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,727,final Map<String, Integer> keyValues = getDisplayNames(field, definingCalendar, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,728,this.lKeyValues = new HashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,730,for (final Map.Entry<String, Integer> entry : keyValues.entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,731,lKeyValues.put(entry.getKey().toLowerCase(locale), entry.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,739,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,741,for (final String textKeyValue : lKeyValues.keySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,742,simpleQuote(regex, textKeyValue).append('|');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,744,regex.setCharAt(regex.length() - 1, ')');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,745,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,754,if (iVal == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,755,final StringBuilder sb = new StringBuilder(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,756,sb.append(" not in (");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,757,for (final String textKeyValue : lKeyValues.keySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,758,sb.append(textKeyValue).append(' ');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,760,sb.setCharAt(sb.length() - 1, ')');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,761,throw new IllegalArgumentException(sb.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,779,this.field = field;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,794,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,796,if (parser.isNextNumber()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,797,regex.append("(\\p{Nd}{").append(parser.getFieldWidth()).append("}+)");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,799,regex.append("(\\p{Nd}++)");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,801,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,808,void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,809,cal.set(field, modify(Integer.parseInt(value)));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,818,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,826,static class TimeZoneStrategy extends Strategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,828,private static final String GMT_OPTION = "GMT[+-]\\d{1,2}:\\d{2}";
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,831,private final Map<String, TimeZone> tzNames = new HashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,832,private final String validTimeZoneChars;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,848,sb.append('(' + RFC_822_TIME_ZONE + "|(?iu)" + GMT_OPTION);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,858,final String currentZoneName = zoneNames[i];
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,859,if (currentZoneName == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,860,continue;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,862,final String zoneName = currentZoneName.toLowerCase(locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,863,if (!tzNames.containsKey(zoneName)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,864,tzNames.put(zoneName, tz);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,865,simpleQuote(sb.append('|'), zoneName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,870,sb.append(')');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,871,validTimeZoneChars = sb.toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,878,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,879,regex.append(validTimeZoneChars);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,880,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,888,TimeZone tz;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,890,tz = TimeZone.getTimeZone("GMT" + value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,892,tz = TimeZone.getTimeZone(value.toUpperCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,894,tz = tzNames.get(value.toLowerCase(locale));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,895,if (tz == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,896,throw new IllegalArgumentException(value + " is not a supported timezone name");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,899,cal.setTimeZone(tz);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,903,private static class ISO8601TimeZoneStrategy extends Strategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,905,private final String pattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,913,this.pattern = pattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,920,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,921,regex.append(pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,922,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,949,switch (tokenLen) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,848,private final Message message;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,894,final Message msg = event.getMessage();
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,895,this.message = msg instanceof ReusableMessage
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,897,: msg;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,927,final Log4jLogEvent result = new Log4jLogEvent(loggerName, marker, loggerFQCN, level, message, thrown,
log4j-api/src/main/java/org/apache/logging/log4j/spi/ThreadContextMapFactory.java,58,if (result == null && ProviderUtil.hasProviders()) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,17,package org.apache.logging.log4j.util;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,19,import java.io.IOException;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,20,import java.io.InputStream;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,21,import java.net.URL;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,22,import java.util.ArrayList;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,23,import java.util.List;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,24,import java.util.Map;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,25,import java.util.Properties;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,26,import java.util.concurrent.ConcurrentHashMap;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,35,public final class PropertiesUtil {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,37,private static final PropertiesUtil LOG4J_PROPERTIES = new PropertiesUtil("log4j2.component.properties");
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,39,private final Properties props;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,46,public PropertiesUtil(final Properties props) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,47,this.props = props;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,56,public PropertiesUtil(final String propertiesFileName) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,57,final Properties properties = new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,58,for (final URL url : LoaderUtil.findResources(propertiesFileName)) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,59,try (final InputStream in = url.openStream()) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,60,properties.load(in);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,62,LowLevelLogUtil.logException("Unable to read " + url.toString(), ioe);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,65,this.props = properties;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,75,static Properties loadClose(final InputStream in, final Object source) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,76,final Properties props = new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,77,if (null != in) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,78,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,79,props.load(in);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,81,LowLevelLogUtil.logException("Unable to read " + source, e);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,83,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,84,in.close();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,86,LowLevelLogUtil.logException("Unable to close " + source, e);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,90,return props;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,98,public static PropertiesUtil getProperties() {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,99,return LOG4J_PROPERTIES;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,110,public boolean getBooleanProperty(final String name) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,111,return getBooleanProperty(name, false);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,121,public boolean getBooleanProperty(final String name, final boolean defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,122,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,123,return (prop == null) ? defaultValue : "true".equalsIgnoreCase(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,133,public double getDoubleProperty(final String name, final double defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,134,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,135,if (prop != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,136,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,137,return Double.parseDouble(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,139,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,142,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,153,public int getIntegerProperty(final String name, final int defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,154,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,155,if (prop != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,156,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,157,return Integer.parseInt(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,159,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,162,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,172,public long getLongProperty(final String name, final long defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,173,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,174,if (prop != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,175,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,176,return Long.parseLong(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,178,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,181,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,190,public String getStringProperty(final String name) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,191,String prop = null;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,192,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,193,prop = System.getProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,197,return prop == null ? props.getProperty(name) : prop;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,207,public String getStringProperty(final String name, final String defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,208,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,209,return (prop == null) ? defaultValue : prop;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,217,public static Properties getSystemProperties() {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,218,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,219,return new Properties(System.getProperties());
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,221,LowLevelLogUtil.logException("Unable to access system properties.", ex);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,223,return new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,235,public static Properties extractSubset(final Properties properties, final String prefix) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,236,final Properties subset = new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,238,if (prefix == null || prefix.length() == 0) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,239,return subset;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,242,final String prefixToMatch = prefix.charAt(prefix.length() - 1) != '.' ? prefix + '.' : prefix;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,244,final List<String> keys = new ArrayList<>();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,246,for (final String key : properties.stringPropertyNames()) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,247,if (key.startsWith(prefixToMatch)) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,248,subset.setProperty(key.substring(prefixToMatch.length()), properties.getProperty(key));
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,249,keys.add(key);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,252,for (final String key : keys) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,253,properties.remove(key);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,256,return subset;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,267,public static Map<String, Properties> partitionOnCommonPrefixes(final Properties properties) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,268,final Map<String, Properties> parts = new ConcurrentHashMap<>();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,269,for (final String key : properties.stringPropertyNames()) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,270,final String prefix = key.substring(0, key.indexOf('.'));
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,271,if (!parts.containsKey(prefix)) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,272,parts.put(prefix, new Properties());
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,274,parts.get(prefix).setProperty(key.substring(key.indexOf('.') + 1), properties.getProperty(key));
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,276,return parts;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,283,public boolean isOsWindows() {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,284,return getStringProperty("os.name").startsWith("Windows");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,67,SYSTEM_OUT,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,69,SYSTEM_ERR
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,200,final Layout<? extends Serializable> layout = getOrCreateLayout();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,25,import org.apache.logging.log4j.core.impl.MutableLogEvent;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,76,return event instanceof MutableLogEvent
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,78,: event;
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,66,loadProvider(bundle.adapt(BundleWiring.class));
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,88,loadProvider(wire.getProviderWiring());
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,61,if (bundle.getState() == Bundle.ACTIVE && bundle.getBundleId() != 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,63,scanBundleForPlugins(bundle);
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,69,LOGGER.trace("Scanning bundle [{}] for plugins.", bundle.getSymbolicName());
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,70,PluginRegistry.getInstance().loadFromBundle(bundle.getBundleId(),
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,71,bundle.adapt(BundleWiring.class).getClassLoader());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java,152,if (sourceURI != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,52,private final PatternProcessor patternProcessor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,19,import java.util.concurrent.ExecutorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,20,import java.util.concurrent.Executors;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,32,import org.apache.logging.log4j.core.util.ExecutorServices;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,180,private static final ThreadFactory THREAD_FACTORY = Log4jThreadFactory.createDaemonThreadFactory("AsyncLoggerConfig");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,187,private ExecutorService executor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,219,executor = Executors.newSingleThreadExecutor(THREAD_FACTORY);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,220,backgroundThreadId = DisruptorUtil.getExecutorThreadId(executor);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,225,disruptor = new Disruptor<>(factory, ringBufferSize, executor, ProducerType.MULTI, waitStrategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,228,disruptor.handleExceptionsWith(errorHandler);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,266,temp.shutdown(); // busy-spins until all events currently in the disruptor have been processed
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,268,LOGGER.trace("AsyncLoggerConfigDisruptor: shutting down disruptor executor for this configuration.");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,270,ExecutorServices.shutdown(executor, timeout, timeUnit, toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,271,executor = null; // release reference to allow GC
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,20,import java.util.concurrent.ExecutorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,21,import java.util.concurrent.Executors;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,27,import org.apache.logging.log4j.core.util.ExecutorServices;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,48,private ExecutorService executor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,88,executor = Executors.newSingleThreadExecutor(Log4jThreadFactory.createDaemonThreadFactory("AsyncLogger[" + contextName + "]"));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,89,backgroundThreadId = DisruptorUtil.getExecutorThreadId(executor);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,92,disruptor = new Disruptor<>(RingBufferLogEvent.FACTORY, ringBufferSize, executor, ProducerType.MULTI,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,96,disruptor.handleExceptionsWith(errorHandler);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,141,temp.shutdown();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,144,LOGGER.trace("[{}] AsyncLoggerDisruptor: shutting down disruptor executor.", contextName);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,146,ExecutorServices.shutdown(executor, timeout, timeUnit, toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,147,executor = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,125,LOGGER.error("Unable to inject fields into builder class for plugin type {}, element {}.", this.clazz,
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,126,node.getName(), e);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,134,LOGGER.error("Unable to invoke factory method in class {} for element {}.", this.clazz, this.node.getName(),
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,135,e);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,97,.getUrl().toString(), e);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,241,final String level = (String) properties.remove("level");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,254,final String level = (String) properties.remove("level");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,287,final String level = (String) properties.remove("level");
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,385,final StructuredDataElement formattedContextMap = new StructuredDataElement(contextMap, false);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,401,final StructuredDataElement formattedData = new StructuredDataElement(map, false);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,412,formatStructuredElement(entry.getKey(), mdcPrefix, entry.getValue(), buffer, listChecker);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,496,private void formatStructuredElement(final String id, final String prefix, final StructuredDataElement data,
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,505,appendMap(prefix, data.getFields(), sb, noopChecker);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,507,appendMap(prefix, data.getFields(), sb, checker);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,686,return new StructuredDataElement(map, discardIfEmpty);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,695,public StructuredDataElement(final Map<String, String> fields, final boolean discardIfEmpty) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,47,private final Collection<Cancellable> hooks = new CopyOnWriteArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,72,for (final Runnable hook : hooks) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,73,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,74,hook.run();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,85,private final Reference<Runnable> hook;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,86,private Collection<Cancellable> registered;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,88,RegisteredCancellable(final Runnable callback, final Collection<Cancellable> registered) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,90,hook = new SoftReference<>(callback);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,95,hook.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,96,registered.remove(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,97,registered = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,102,final Runnable runnableHook = this.hook.get();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,105,this.hook.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,111,return String.valueOf(hook.get());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,119,hooks.add(receipt);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSource.java,31,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSource.java,82,final Class<?> factoryClass = LoaderUtil.loadClass(className);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,131,public synchronized boolean closeOutputStream() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,132,flush();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqManager.java,61,((ShutdownCallbackRegistry) LogManager.getFactory()).addShutdownCallback(new Runnable() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqManager.java,63,public void run() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqManager.java,64,CONTEXT.close();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,194,private volatile long midnightToday = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,195,private volatile long midnightTomorrow = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JacksonFactory.java,213,final Set<String> except = new HashSet<>(2);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,40,final String attributeValue = node.getAttributes().get("value");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,50,rawValue = removeAttributeValue(node.getAttributes(), "value");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,25,import org.apache.logging.log4j.core.config.plugins.Plugin;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,26,import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,27,import org.apache.logging.log4j.core.config.plugins.PluginFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,45,private Filter filter;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,30,import org.apache.logging.log4j.core.util.NameUtil;
log4j-1.2-api/src/main/java/org/apache/log4j/Logger.java,59,return (LoggerContext) getContext(FQCN, false);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,219,if (appender instanceof LifeCycle2) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,220,((LifeCycle2) appender).stop(timeout, timeUnit);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,222,appender.stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,85,final String version = System.getProperty("java.version");
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,86,final String[] parts = version.split("\\.");
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,87,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,88,final int major = Integer.parseInt(parts[1]);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,89,return major < 8;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,91,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,240,final FixedFormat type = FixedFormat.lookup(options[0]);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,338,return writeTime(ms, buffer, startPos + dateLength) - startPos;
