File,Line_number,SRC
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,163,error("Unable to write to stream " + manager.getName() + " for appender " + getName() + ": " + ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractWriterAppender.java,87,error("Unable to write " + manager.getName() + " for appender " + getName() + ": " + ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,158,handleAppenderError(ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,160,handleAppenderError(new AppenderLoggingException(ex));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,164,private void handleAppenderError(final RuntimeException ex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,165,appender.getHandler().error(createErrorMsg("An exception occurred processing Appender "), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java,188,LOGGER.info("Plugin [{}] could not be loaded due to verification error.", className, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,167,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,168,randomAccessFile.close();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,169,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,171,logError("Unable to close RandomAccessFile", e);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,172,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,357,final StringBuilder sb = destination.append(original);//new StringBuilder(original);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,360,pos = fragments[i].abbreviate(sb, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,366,final PatternAbbreviatorFragment terminalFragment = fragments[fragments.length - 1];
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,369,pos = terminalFragment.abbreviate(sb, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,359,for (int i = 0; i < fragments.length - 1 && pos < original.length(); i++) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,701,map.put(stackTraceElement.toString(), entry);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,268,return level == null ? parent.getLevel() : level;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,17,package org.apache.logging.log4j.flume.appender;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,19,import java.io.ByteArrayInputStream;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,20,import java.io.ByteArrayOutputStream;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,21,import java.io.DataInputStream;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,22,import java.io.DataOutputStream;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,23,import java.io.File;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,24,import java.nio.charset.Charset;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,25,import java.nio.charset.StandardCharsets;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,26,import java.util.HashMap;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,27,import java.util.Map;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,28,import java.util.concurrent.Callable;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,29,import java.util.concurrent.ExecutorService;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,30,import java.util.concurrent.Executors;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,31,import java.util.concurrent.Future;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,32,import java.util.concurrent.TimeUnit;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,33,import java.util.concurrent.atomic.AtomicLong;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,34,import javax.crypto.Cipher;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,35,import javax.crypto.SecretKey;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,37,import com.sleepycat.je.Cursor;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,38,import com.sleepycat.je.CursorConfig;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,39,import com.sleepycat.je.Database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,40,import com.sleepycat.je.DatabaseConfig;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,41,import com.sleepycat.je.DatabaseEntry;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,42,import com.sleepycat.je.Environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,43,import com.sleepycat.je.EnvironmentConfig;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,44,import com.sleepycat.je.LockConflictException;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,45,import com.sleepycat.je.LockMode;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,46,import com.sleepycat.je.OperationStatus;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,47,import com.sleepycat.je.StatsConfig;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,48,import com.sleepycat.je.Transaction;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,49,import org.apache.flume.Event;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,50,import org.apache.flume.event.SimpleEvent;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,51,import org.apache.logging.log4j.LoggingException;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,52,import org.apache.logging.log4j.core.appender.ManagerFactory;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,53,import org.apache.logging.log4j.core.config.Property;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,54,import org.apache.logging.log4j.core.config.plugins.util.PluginManager;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,55,import org.apache.logging.log4j.core.config.plugins.util.PluginType;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,56,import org.apache.logging.log4j.core.util.ExecutorServices;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,57,import org.apache.logging.log4j.core.util.FileUtils;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,58,import org.apache.logging.log4j.core.util.Log4jThread;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,59,import org.apache.logging.log4j.core.util.Log4jThreadFactory;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,60,import org.apache.logging.log4j.core.util.SecretKeyProvider;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,61,import org.apache.logging.log4j.util.Strings;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,66,public class FlumePersistentManager extends FlumeAvroManager {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,69,public static final String KEY_PROVIDER = "keyProvider";
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,71,private static final Charset UTF8 = StandardCharsets.UTF_8;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,73,private static final String DEFAULT_DATA_DIR = ".log4j/flumeData";
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,75,private static final long SHUTDOWN_WAIT_MILLIS = 60000;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,77,private static final long LOCK_TIMEOUT_SLEEP_MILLIS = 500;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,79,private static BDBManagerFactory factory = new BDBManagerFactory();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,81,private final Database database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,83,private final Environment environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,85,private final WriterThread worker;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,87,private final Gate gate = new Gate();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,89,private final SecretKey secretKey;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,91,private final int lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,93,private final ExecutorService threadPool;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,95,private final AtomicLong dbCount = new AtomicLong();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,112,protected FlumePersistentManager(final String name, final String shortName, final Agent[] agents,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,113,final int batchSize, final int retries, final int connectionTimeout,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,114,final int requestTimeout, final int delay, final Database database,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,115,final Environment environment, final SecretKey secretKey,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,116,final int lockTimeoutRetryCount) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,117,super(name, shortName, agents, batchSize, delay, retries, connectionTimeout, requestTimeout);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,118,this.database = database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,119,this.environment = environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,120,dbCount.set(database.count());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,121,this.worker = new WriterThread(database, environment, this, gate, batchSize, secretKey, dbCount,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,122,lockTimeoutRetryCount);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,123,this.worker.start();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,124,this.secretKey = secretKey;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,125,this.threadPool = Executors.newCachedThreadPool(Log4jThreadFactory.createDaemonThreadFactory("Flume"));
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,126,this.lockTimeoutRetryCount = lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,144,public static FlumePersistentManager getManager(final String name, final Agent[] agents,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,145,final Property[] properties, int batchSize, final int retries,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,146,final int connectionTimeout, final int requestTimeout,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,147,final int delayMillis, final int lockTimeoutRetryCount,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,148,final String dataDir) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,149,if (agents == null || agents.length == 0) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,150,throw new IllegalArgumentException("At least one agent is required");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,153,if (batchSize <= 0) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,154,batchSize = 1;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,156,final String dataDirectory = Strings.isEmpty(dataDir) ? DEFAULT_DATA_DIR : dataDir;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,158,final StringBuilder sb = new StringBuilder("FlumePersistent[");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,159,boolean first = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,160,for (final Agent agent : agents) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,161,if (!first) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,162,sb.append(',');
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,164,sb.append(agent.getHost()).append(':').append(agent.getPort());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,165,first = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,167,sb.append(']');
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,168,sb.append(' ').append(dataDirectory);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,169,return getManager(sb.toString(), factory, new FactoryData(name, agents, batchSize, retries,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,170,connectionTimeout, requestTimeout, delayMillis, lockTimeoutRetryCount, dataDir, properties));
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,174,public void send(final Event event)  {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,175,if (worker.isShutdown()) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,176,throw new LoggingException("Unable to record event");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,179,final Map<String, String> headers = event.getHeaders();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,180,final byte[] keyData = headers.get(FlumeEvent.GUID).getBytes(UTF8);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,181,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,182,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,183,final DataOutputStream daos = new DataOutputStream(baos);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,184,daos.writeInt(event.getBody().length);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,185,daos.write(event.getBody(), 0, event.getBody().length);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,186,daos.writeInt(event.getHeaders().size());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,187,for (final Map.Entry<String, String> entry : headers.entrySet()) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,188,daos.writeUTF(entry.getKey());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,189,daos.writeUTF(entry.getValue());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,191,byte[] eventData = baos.toByteArray();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,192,if (secretKey != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,193,final Cipher cipher = Cipher.getInstance("AES");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,194,cipher.init(Cipher.ENCRYPT_MODE, secretKey);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,195,eventData = cipher.doFinal(eventData);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,197,final Future<Integer> future = threadPool.submit(new BDBWriter(keyData, eventData, environment, database,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,198,gate, dbCount, getBatchSize(), lockTimeoutRetryCount));
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,199,boolean interrupted = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,200,int ieCount = 0;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,201,do {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,202,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,203,future.get();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,205,interrupted = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,206,++ieCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,211,throw new LoggingException("Exception occurred writing log event", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,216,protected boolean releaseSub(final long timeout, final TimeUnit timeUnit) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,217,boolean closed = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,218,LOGGER.debug("Shutting down FlumePersistentManager");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,219,worker.shutdown();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,220,final long requestedTimeoutMillis = timeUnit.toMillis(timeout);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,221,final long shutdownWaitMillis = requestedTimeoutMillis > 0 ? requestedTimeoutMillis : SHUTDOWN_WAIT_MILLIS;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,222,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,223,worker.join(shutdownWaitMillis);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,227,ExecutorServices.shutdown(threadPool, shutdownWaitMillis, TimeUnit.MILLISECONDS, toString());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,228,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,229,worker.join();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,231,logDebug("interrupted while waiting for worker to complete", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,233,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,234,LOGGER.debug("FlumePersistenceManager dataset status: {}", database.getStats(new StatsConfig()));
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,235,database.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,237,logWarn("Failed to close database", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,238,closed = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,240,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,241,environment.cleanLog();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,242,environment.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,244,logWarn("Failed to close environment", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,245,closed = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,247,return closed && super.releaseSub(timeout, timeUnit);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,250,private void doSend(final SimpleEvent event) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,251,LOGGER.debug("Sending event to Flume");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,252,super.send(event);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,258,private static class BDBWriter implements Callable<Integer> {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,259,private final byte[] eventData;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,260,private final byte[] keyData;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,261,private final Environment environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,262,private final Database database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,263,private final Gate gate;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,264,private final AtomicLong dbCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,265,private final long batchSize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,266,private final int lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,268,public BDBWriter(final byte[] keyData, final byte[] eventData, final Environment environment,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,269,final Database database, final Gate gate, final AtomicLong dbCount, final long batchSize,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,270,final int lockTimeoutRetryCount) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,271,this.keyData = keyData;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,272,this.eventData = eventData;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,273,this.environment = environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,274,this.database = database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,275,this.gate = gate;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,276,this.dbCount = dbCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,277,this.batchSize = batchSize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,278,this.lockTimeoutRetryCount = lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,282,public Integer call() throws Exception {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,283,final DatabaseEntry key = new DatabaseEntry(keyData);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,284,final DatabaseEntry data = new DatabaseEntry(eventData);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,285,Exception exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,286,for (int retryIndex = 0; retryIndex < lockTimeoutRetryCount; ++retryIndex) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,287,Transaction txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,288,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,289,txn = environment.beginTransaction(null, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,290,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,291,database.put(txn, key, data);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,292,txn.commit();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,293,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,294,if (dbCount.incrementAndGet() >= batchSize) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,295,gate.open();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,297,exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,298,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,300,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,303,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,304,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,306,throw ex;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,308,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,309,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,310,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,314,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,315,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,316,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,317,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,318,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,320,LOGGER.trace("Ignoring exception while aborting transaction during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,325,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,326,Thread.sleep(LOCK_TIMEOUT_SLEEP_MILLIS);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,331,if (exception != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,332,throw exception;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,334,return eventData.length;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,341,private static class FactoryData {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,342,private final String name;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,343,private final Agent[] agents;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,344,private final int batchSize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,345,private final String dataDir;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,346,private final int retries;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,347,private final int connectionTimeout;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,348,private final int requestTimeout;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,349,private final int delayMillis;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,350,private final int lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,351,private final Property[] properties;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,360,public FactoryData(final String name, final Agent[] agents, final int batchSize, final int retries,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,361,final int connectionTimeout, final int requestTimeout, final int delayMillis,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,362,final int lockTimeoutRetryCount, final String dataDir, final Property[] properties) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,363,this.name = name;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,364,this.agents = agents;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,365,this.batchSize = batchSize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,366,this.dataDir = dataDir;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,367,this.retries = retries;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,368,this.connectionTimeout = connectionTimeout;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,369,this.requestTimeout = requestTimeout;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,370,this.delayMillis = delayMillis;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,371,this.lockTimeoutRetryCount = lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,372,this.properties = properties;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,379,private static class BDBManagerFactory implements ManagerFactory<FlumePersistentManager, FactoryData> {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,388,public FlumePersistentManager createManager(final String name, final FactoryData data) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,389,SecretKey secretKey = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,390,Database database = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,391,Environment environment = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,393,final Map<String, String> properties = new HashMap<>();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,394,if (data.properties != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,395,for (final Property property : data.properties) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,396,properties.put(property.getName(), property.getValue());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,400,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,401,final File dir = new File(data.dataDir);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,402,FileUtils.mkdir(dir, true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,403,final EnvironmentConfig dbEnvConfig = new EnvironmentConfig();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,404,dbEnvConfig.setTransactional(true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,405,dbEnvConfig.setAllowCreate(true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,406,dbEnvConfig.setLockTimeout(5, TimeUnit.SECONDS);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,407,environment = new Environment(dir, dbEnvConfig);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,408,final DatabaseConfig dbConfig = new DatabaseConfig();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,409,dbConfig.setTransactional(true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,410,dbConfig.setAllowCreate(true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,411,database = environment.openDatabase(null, name, dbConfig);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,413,LOGGER.error("Could not create FlumePersistentManager", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,417,if (database != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,418,database.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,419,database = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,421,if (environment != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,422,environment.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,423,environment = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,425,return null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,428,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,429,String key = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,430,for (final Map.Entry<String, String> entry : properties.entrySet()) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,431,if (entry.getKey().equalsIgnoreCase(KEY_PROVIDER)) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,432,key = entry.getValue();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,433,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,436,if (key != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,437,final PluginManager manager = new PluginManager("KeyProvider");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,438,manager.collectPlugins();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,439,final Map<String, PluginType<?>> plugins = manager.getPlugins();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,440,if (plugins != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,441,boolean found = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,442,for (final Map.Entry<String, PluginType<?>> entry : plugins.entrySet()) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,443,if (entry.getKey().equalsIgnoreCase(key)) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,444,found = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,445,final Class<?> cl = entry.getValue().getPluginClass();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,446,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,447,final SecretKeyProvider provider = (SecretKeyProvider) cl.newInstance();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,448,secretKey = provider.getSecretKey();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,449,LOGGER.debug("Persisting events using SecretKeyProvider {}", cl.getName());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,451,LOGGER.error("Unable to create SecretKeyProvider {}, encryption will be disabled",
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,452,cl.getName());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,454,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,457,if (!found) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,458,LOGGER.error("Unable to locate SecretKey provider {}, encryption will be disabled", key);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,461,LOGGER.error("Unable to locate SecretKey provider {}, encryption will be disabled", key);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,465,LOGGER.warn("Error setting up encryption - encryption will be disabled", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,467,return new FlumePersistentManager(name, data.name, data.agents, data.batchSize, data.retries,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,468,data.connectionTimeout, data.requestTimeout, data.delayMillis, database, environment, secretKey,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,469,data.lockTimeoutRetryCount);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,476,private static class WriterThread extends Log4jThread  {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,477,private volatile boolean shutdown = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,478,private final Database database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,479,private final Environment environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,480,private final FlumePersistentManager manager;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,481,private final Gate gate;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,482,private final SecretKey secretKey;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,483,private final int batchSize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,484,private final AtomicLong dbCounter;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,485,private final int lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,487,public WriterThread(final Database database, final Environment environment,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,488,final FlumePersistentManager manager, final Gate gate, final int batchsize,
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,489,final SecretKey secretKey, final AtomicLong dbCount, final int lockTimeoutRetryCount) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,490,super("FlumePersistentManager-Writer");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,491,this.database = database;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,492,this.environment = environment;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,493,this.manager = manager;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,494,this.gate = gate;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,495,this.batchSize = batchsize;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,496,this.secretKey = secretKey;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,497,this.setDaemon(true);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,498,this.dbCounter = dbCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,499,this.lockTimeoutRetryCount = lockTimeoutRetryCount;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,502,public void shutdown() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,503,LOGGER.debug("Writer thread shutting down");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,504,this.shutdown = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,505,gate.open();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,508,public boolean isShutdown() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,509,return shutdown;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,513,public void run() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,514,LOGGER.trace("WriterThread started - batch size = " + batchSize + ", delayMillis = " + manager.getDelayMillis());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,515,long nextBatchMillis = System.currentTimeMillis() + manager.getDelayMillis();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,516,while (!shutdown) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,517,final long nowMillis = System.currentTimeMillis();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,518,final long dbCount = database.count();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,519,dbCounter.set(dbCount);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,520,if (dbCount >= batchSize || dbCount > 0 && nextBatchMillis <= nowMillis) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,521,nextBatchMillis = nowMillis + manager.getDelayMillis();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,522,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,523,boolean errors = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,524,final DatabaseEntry key = new DatabaseEntry();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,525,final DatabaseEntry data = new DatabaseEntry();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,527,gate.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,528,OperationStatus status;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,529,if (batchSize > 1) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,530,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,531,errors = sendBatch(key, data);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,533,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,536,Exception exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,537,for (int retryIndex = 0; retryIndex < lockTimeoutRetryCount; ++retryIndex) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,538,exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,539,Transaction txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,540,Cursor cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,541,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,542,txn = environment.beginTransaction(null, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,543,cursor = database.openCursor(txn, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,544,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,545,status = cursor.getFirst(key, data, LockMode.RMW);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,546,while (status == OperationStatus.SUCCESS) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,547,final SimpleEvent event = createEvent(data);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,548,if (event != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,549,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,550,manager.doSend(event);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,552,errors = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,553,LOGGER.error("Error sending event", ioe);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,554,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,556,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,557,cursor.delete();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,559,LOGGER.error("Unable to delete event", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,562,status = cursor.getNext(key, data, LockMode.RMW);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,564,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,565,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,566,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,568,txn.commit();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,569,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,570,dbCounter.decrementAndGet();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,571,exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,572,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,574,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,577,LOGGER.error("Error reading or writing to database", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,578,shutdown = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,579,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,581,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,582,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,583,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,585,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,586,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,587,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,591,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,592,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,593,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,594,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,595,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,597,LOGGER.trace("Ignored exception closing cursor during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,600,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,601,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,602,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,603,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,605,LOGGER.trace("Ignored exception aborting tx during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,609,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,610,Thread.sleep(LOCK_TIMEOUT_SLEEP_MILLIS);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,615,if (exception != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,616,LOGGER.error("Unable to read or update data base", exception);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,619,if (errors) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,620,Thread.sleep(manager.getDelayMillis());
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,621,continue;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,624,LOGGER.warn("WriterThread encountered an exception. Continuing.", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,627,if (nextBatchMillis <= nowMillis) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,628,nextBatchMillis = nowMillis + manager.getDelayMillis();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,630,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,631,final long interval = nextBatchMillis - nowMillis;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,632,gate.waitForOpen(interval);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,634,LOGGER.warn("WriterThread interrupted, continuing");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,636,LOGGER.error("WriterThread encountered an exception waiting for work", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,637,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,642,if (batchSize > 1 && database.count() > 0) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,643,final DatabaseEntry key = new DatabaseEntry();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,644,final DatabaseEntry data = new DatabaseEntry();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,645,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,646,sendBatch(key, data);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,648,LOGGER.warn("Unable to write final batch");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,651,LOGGER.trace("WriterThread exiting");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,654,private boolean sendBatch(DatabaseEntry key, final DatabaseEntry data) throws Exception {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,655,boolean errors = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,656,OperationStatus status;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,657,Cursor cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,658,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,659,final BatchEvent batch = new BatchEvent();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,660,for (int retryIndex = 0; retryIndex < lockTimeoutRetryCount; ++retryIndex) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,661,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,662,cursor = database.openCursor(null, CursorConfig.DEFAULT);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,663,status = cursor.getFirst(key, data, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,665,for (int i = 0; status == OperationStatus.SUCCESS && i < batchSize; ++i) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,666,final SimpleEvent event = createEvent(data);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,667,if (event != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,668,batch.addEvent(event);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,670,status = cursor.getNext(key, data, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,672,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,674,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,675,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,676,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,677,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,679,LOGGER.trace("Ignored exception closing cursor during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,685,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,686,manager.send(batch);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,688,LOGGER.error("Error sending events", ioe);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,689,errors = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,691,if (!errors) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,692,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,693,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,694,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,696,Transaction txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,697,Exception exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,698,for (int retryIndex = 0; retryIndex < lockTimeoutRetryCount; ++retryIndex) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,699,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,700,txn = environment.beginTransaction(null, null);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,701,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,702,for (final Event event : batch.getEvents()) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,703,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,704,final Map<String, String> headers = event.getHeaders();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,705,key = new DatabaseEntry(headers.get(FlumeEvent.GUID).getBytes(UTF8));
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,706,database.delete(txn, key);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,708,LOGGER.error("Error deleting key from database", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,711,txn.commit();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,712,long count = dbCounter.get();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,713,while (!dbCounter.compareAndSet(count, count - batch.getEvents().size())) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,714,count = dbCounter.get();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,716,exception = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,717,break;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,719,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,720,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,721,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,722,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,723,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,725,LOGGER.trace("Ignored exception closing cursor during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,728,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,729,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,730,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,731,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,733,LOGGER.trace("Ignored exception aborting transaction during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,737,LOGGER.error("Unable to commit transaction", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,738,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,739,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,743,exception = lce;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,744,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,745,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,746,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,747,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,749,LOGGER.trace("Ignored exception closing cursor during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,752,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,753,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,754,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,755,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,757,LOGGER.trace("Ignored exception aborting transaction during lock conflict.");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,761,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,762,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,763,cursor = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,765,if (txn != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,766,txn.abort();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,767,txn = null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,770,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,771,Thread.sleep(LOCK_TIMEOUT_SLEEP_MILLIS);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,776,if (exception != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,777,LOGGER.error("Unable to delete events from data base", exception);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,781,LOGGER.error("Error reading database", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,782,shutdown = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,783,throw ex;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,785,if (cursor != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,786,cursor.close();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,790,return errors;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,793,private SimpleEvent createEvent(final DatabaseEntry data) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,794,final SimpleEvent event = new SimpleEvent();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,795,try {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,796,byte[] eventData = data.getData();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,797,if (secretKey != null) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,798,final Cipher cipher = Cipher.getInstance("AES");
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,799,cipher.init(Cipher.DECRYPT_MODE, secretKey);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,800,eventData = cipher.doFinal(eventData);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,802,final ByteArrayInputStream bais = new ByteArrayInputStream(eventData);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,803,final DataInputStream dais = new DataInputStream(bais);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,804,int length = dais.readInt();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,805,final byte[] bytes = new byte[length];
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,806,dais.read(bytes, 0, length);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,807,event.setBody(bytes);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,808,length = dais.readInt();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,809,final Map<String, String> map = new HashMap<>(length);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,810,for (int i = 0; i < length; ++i) {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,811,final String headerKey = dais.readUTF();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,812,final String value = dais.readUTF();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,813,map.put(headerKey, value);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,815,event.setHeaders(map);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,816,return event;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,818,LOGGER.error("Error retrieving event", ex);
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,819,return null;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,828,private static class Gate {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,830,private boolean isOpen = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,832,public boolean isOpen() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,833,return isOpen;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,836,public synchronized void open() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,837,isOpen = true;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,838,notifyAll();
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,841,public synchronized void close() {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,842,isOpen = false;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,845,public synchronized void waitForOpen(final long timeout) throws InterruptedException {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,846,wait(timeout);
log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java,97,protected static void loadProviders(final ClassLoader cl) {
log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java,98,final ServiceLoader<Provider> serviceLoader = ServiceLoader.load(Provider.class, cl);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,216,final ThreadFactory threadFactory = new Log4jThreadFactory("AsyncLoggerConfig-", true, Thread.NORM_PRIORITY) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,19,import com.lmax.disruptor.ExceptionHandler;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,25,implements ExceptionHandler<AsyncLoggerConfigDisruptor.Log4jEventWrapper> {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,28,public void handleEventException(final Throwable throwable, final long sequence,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,29,final AsyncLoggerConfigDisruptor.Log4jEventWrapper event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,30,final StringBuilder sb = new StringBuilder(512);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,31,sb.append("AsyncLogger error handling event seq=").append(sequence).append(", value='");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,32,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,33,sb.append(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,35,sb.append("[ERROR calling ").append(event.getClass()).append(".toString(): ");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,36,sb.append(ignored).append("]");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,38,sb.append("':");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,39,System.err.println(sb);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,40,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,44,public void handleOnStartException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,45,System.err.println("AsyncLogger error starting:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,46,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,50,public void handleOnShutdownException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,51,System.err.println("AsyncLogger error shutting down:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,52,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,19,import com.lmax.disruptor.ExceptionHandler;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,24,public class AsyncLoggerDefaultExceptionHandler implements ExceptionHandler<RingBufferLogEvent> {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,27,public void handleEventException(final Throwable throwable, final long sequence, final RingBufferLogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,28,final StringBuilder sb = new StringBuilder(512);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,29,sb.append("AsyncLogger error handling event seq=").append(sequence).append(", value='");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,30,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,31,sb.append(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,33,sb.append("[ERROR calling ").append(event.getClass()).append(".toString(): ");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,34,sb.append(ignored).append("]");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,36,sb.append("':");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,37,System.err.println(sb);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,38,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,42,public void handleOnStartException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,43,System.err.println("AsyncLogger error starting:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,44,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,48,public void handleOnShutdownException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,49,System.err.println("AsyncLogger error shutting down:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,50,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,258,LOGGER.debug("Shutting down RollingFileManager {}" + getName());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,92,populateLazilyInitializedFields(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,94,if (!delegate.tryEnqueue(event, this)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,105,void callAppendersInCurrentThread(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,106,super.callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,109,void callAppendersInBackgroundThread(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,114,void asyncCallAppenders(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,115,super.callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,111,event.loggerConfig.asyncCallAppenders(event.event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/EventRoute.java,46,asyncLoggerConfig.callAppendersInBackgroundThread(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/EventRoute.java,65,asyncLoggerConfig.callAppendersInCurrentThread(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,403,log(logEvent);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,417,processLogEvent(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,431,private void processLogEvent(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,433,callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,434,logParent(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,437,private void logParent(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,439,parent.log(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ReusableLogEventFactory.java,105,((MutableLogEvent) logEvent).reserved = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,492,includeLocation(includeLocation));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,524,includeLocation(includeLocation));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,529,protected static boolean includeLocation(final String includeLocationConfigValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,531,final boolean sync = !AsyncLoggerContextSelector.isSelected();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,532,return sync;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,559,properties, config, includeLocation(includeLocation));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,214,Level level;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,218,LOGGER.error(
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,220,levelName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,202,final String containerPath = urlPath.substring(1,
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,203,urlPath.length() - packageName.length() - 2);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,205,if (containerFile.isDirectory()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,206,loadImplementationsInDirectory(test, packageName, new File(containerFile, packageName));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,208,loadImplementationsInJar(test, packageName, containerFile);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2130,final StringBuilder sb = new StringBuilder(format.length() + 100);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,510,message = new SimpleMessage(message.getFormattedMessage());
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,485,return message != null ? message : new SimpleMessage(String.valueOf(messageText));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,312,return message != null ? message : new SimpleMessage(String.valueOf(messageText));
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,308,return new ParameterizedMessage(messageText.toString(), params);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,201,final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,202,unregisterMBeans(mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,210,public static void unregisterMBeans(final MBeanServer mbs) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,211,unregisterStatusLogger("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,212,unregisterContextSelector("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,213,unregisterContexts(mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,214,unregisterLoggerConfigs("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,215,unregisterAsyncLoggerRingBufferAdmins("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,216,unregisterAsyncLoggerConfigRingBufferAdmins("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,217,unregisterAppenders("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,218,unregisterAsyncAppenders("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,336,if (found.isEmpty()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,341,for (final ObjectName objectName : found) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,342,mbs.unregisterMBean(objectName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,202,private static void disableDtdProcessing(final DocumentBuilderFactory factory) throws ParserConfigurationException {
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableObjectMessage.java,81,return getFormattedMessage();
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableSimpleMessage.java,46,return getFormattedMessage();
log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessage.java,22,import org.apache.logging.log4j.util.StringBuilderFormattable;
log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessage.java,78,return getFormattedMessage();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,236,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,254,return null;
log4j-api/src/main/java/org/apache/logging/log4j/util/Strings.java,219,return Objects.toString(first);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,90,if (randomAccessFile.length() == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java,36,return System.getenv(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RootThrowablePatternConverter.java,71,final String suffix = getSuffix(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RootThrowablePatternConverter.java,72,final String trace = proxy.getCauseStackTraceAsString(options.getIgnorePackages(), suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,210,final List<String> ignorePackages, final TextRenderer textRenderer, final String suffix) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,211,formatThrowableProxy(sb, prefix, CAUSED_BY_LABEL, cause, ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,216,final TextRenderer textRenderer, final String suffix) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,224,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,226,throwableProxy.getStackTrace(), throwableProxy.extendedStackTrace, ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,227,this.formatSuppressed(sb, prefix + TAB, throwableProxy.suppressedProxies, ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,228,this.formatCause(sb, prefix, throwableProxy.causeProxy, ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,241,final List<String> ignorePackages, final TextRenderer textRenderer, final String suffix) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,246,formatThrowableProxy(sb, prefix, SUPPRESSED_LABEL, suppressedProxy, ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,252,final List<String> ignorePackages, final TextRenderer textRenderer, final String suffix) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,255,this.formatEntry(element, sb, prefix, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,262,appendSuppressedCount(sb, prefix, count, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,265,this.formatEntry(extStackTrace[i], sb, prefix, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,271,appendSuppressedCount(sb, prefix, count, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,280,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,292,final TextRenderer textRenderer, final String suffix) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,302,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,306,final String prefix, final TextRenderer textRenderer, final String suffix) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,311,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,346,final TextRenderer textRenderer, final String suffix) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,349,this.formatWrapper(sb, cause.causeProxy, ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,355,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,357,cause.getThrowable().getStackTrace(), cause.extendedStackTrace, ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,371,return this.getCauseStackTraceAsString(null, PlainTextRenderer.getInstance(), suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,382,return getCauseStackTraceAsString(packages, PlainTextRenderer.getInstance(), suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,396,this.formatWrapper(sb, this.causeProxy, ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,402,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,404,ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,434,return this.getExtendedStackTraceAsString(null, PlainTextRenderer.getInstance(), "");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,444,return this.getExtendedStackTraceAsString(null, PlainTextRenderer.getInstance(), suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,455,return getExtendedStackTraceAsString(ignorePackages, PlainTextRenderer.getInstance(), suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,472,textRenderer.render(EOL_STR, sb, "Text");
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,474,this.formatElements(sb, Strings.EMPTY, 0, causedTrace, this.extendedStackTrace, ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,475,this.formatSuppressed(sb, TAB, this.suppressedProxies, ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java,476,this.formatCause(sb, Strings.EMPTY, this.causeProxy, ignorePackages, textRenderer, suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,71,final String suffix = getSuffix(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,72,final String extStackTrace = proxy.getExtendedStackTraceAsString(options.getIgnorePackages(), options.getTextRenderer(), suffix);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,77,if (!options.allLines() || !Strings.LINE_SEPARATOR.equals(options.getSeparator())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,78,final StringBuilder sb = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,79,final String[] array = extStackTrace.split(Strings.LINE_SEPARATOR);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,80,final int limit = options.minLines(array.length) - 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,81,for (int i = 0; i <= limit; ++i) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,82,sb.append(array[i]);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,83,if (i < limit) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,84,sb.append(options.getSeparator());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,87,toAppendTo.append(sb.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,89,toAppendTo.append(extStackTrace);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,65,final List<PatternFormatter> parsedFormatters = parser.parse(this.options.getSuffix());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,67,boolean hasThrowableFormatter = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,68,for (final PatternFormatter formatter : parsedFormatters) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,69,if (formatter.handlesThrowable()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,70,hasThrowableFormatter = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,73,if (!hasThrowableFormatter) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,74,this.formatters = parsedFormatters;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,76,final List<PatternFormatter> formatters = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,77,for (final PatternFormatter formatter : parsedFormatters) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,78,if (!formatter.handlesThrowable()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,79,formatters.add(formatter);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,82,this.formatters = formatters;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,33,addAttribute("onMatch", onMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,31,addAttribute("onMatch", onMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,293,public static class Builder implements org.apache.logging.log4j.core.util.Builder<BurstFilter> {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,305,private Result onMatch = Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,308,private Result onMismatch = Result.DENY;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,338,public Builder setOnMatch(final Result onMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,339,this.onMatch = onMatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,340,return this;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,346,public Builder setOnMismatch(final Result onMismatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,347,this.onMismatch = onMismatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,348,return this;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,359,return new BurstFilter(this.level, this.rate, this.maxBurst, this.onMatch, this.onMismatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java,261,FilterComponentBuilder newFilter(String pluginName, Filter.Result onMatch, Filter.Result onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java,270,FilterComponentBuilder newFilter(String pluginName, String onMatch, String onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,31,final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,34,addAttribute("onMisMatch", onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,432,final Filter.Result onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,433,return new DefaultFilterComponentBuilder(this, type, onMatch.name(), onMisMatch.name());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,437,public FilterComponentBuilder newFilter(final String type, final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,438,return new DefaultFilterComponentBuilder(this, type, onMatch, onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,29,final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,32,addAttribute("onMisMatch", onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,234,final FilterComponentBuilder filterBuilder = builder.newFilter(type, onMatch, onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,232,final String onMatch = (String) properties.remove("onMatch");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,233,final String onMisMatch = (String) properties.remove("onMisMatch");
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,70,loadProvider(bundle.getBundleContext(), bundle.adapt(BundleWiring.class));
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,78,private void loadProvider(final BundleContext context, final BundleWiring bundleWiring) {
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,81,final Collection<ServiceReference<Provider>> serviceReferences = context.getServiceReferences(Provider.class, filter);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,84,final Provider provider = context.getService(serviceReference);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,102,public void start(final BundleContext context) throws Exception {
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,105,final BundleWiring self = context.getBundle().adapt(BundleWiring.class);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,108,loadProvider(context, wire.getProviderWiring());
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,110,context.addBundleListener(this);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,111,final Bundle[] bundles = context.getBundles();
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,126,public void stop(final BundleContext context) throws Exception {
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,127,context.removeBundleListener(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/script/Script.java,43,LOGGER.info("No script language supplied, defaulting to {}", DEFAULT_LANGUAGE);
log4j-core/src/main/java/org/apache/logging/log4j/core/script/Script.java,47,LOGGER.error("No scriptText attribute provided for ScriptFile {}", name);
log4j-api/src/main/java/org/apache/logging/log4j/spi/CopyOnWriteSortedArrayThreadContextMap.java,75,return parentValue != null ? createStringMap(parentValue) : null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,39,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,52,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,66,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,80,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,38,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,50,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,63,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,76,addAttribute("level", level);
log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java,512,private static Object unmarshall(final byte[] data) throws IOException, ClassNotFoundException {
log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java,514,try (ObjectInputStream ois = new ObjectInputStream(bin)) {
log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java,568,values[i] = marshalledObject == null ? null : unmarshall(marshalledObject);
log4j-api/src/main/java/org/apache/logging/log4j/util/ProcessIdUtil.java,21,import java.lang.management.ManagementFactory;
log4j-api/src/main/java/org/apache/logging/log4j/util/ProcessIdUtil.java,32,return ManagementFactory.getRuntimeMXBean().getName().split("@")[0]; // likely works on most platforms
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,384,private String asXml() {
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,385,final StringBuilder sb = new StringBuilder();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,386,final StructuredDataId sdId = getId();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,387,if (sdId == null || sdId.getName() == null || type == null) {
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,388,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,390,sb.append("<StructuredData>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,391,sb.append("<type>").append(type).append("</type>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,392,sb.append("<id>").append(sdId).append("</id>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,393,super.asXml(sb);
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,394,sb.append("</StructuredData>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,395,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,30,import org.apache.logging.log4j.util.StringBuilderFormattable;
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,51,public class MapMessage<M extends MapMessage<M, V>, V> implements MultiformatMessage, StringBuilderFormattable {
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,53,private static final long serialVersionUID = -5031471831131487120L;
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,369,return asString();
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,374,return format(mapFormat, new StringBuilder()).toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,377,return asString();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MessagePatternConverter.java,117,final StringBuilderFormattable stringBuilderFormattable = (StringBuilderFormattable) msg;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MessagePatternConverter.java,119,stringBuilderFormattable.formatTo(workingBuilder);
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,342,.append("</Entry>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,396,StringBuilders.appendDqValue(sb, data.getKeyAt(i)).append(':');
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,397,StringBuilders.appendDqValue(sb, data.getValueAt(i));
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/EncodingPatternConverter.java,142,for (int i = toAppendTo.length() - 1; i >= start; i--) { // backwards: length may change
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/EncodingPatternConverter.java,143,final char c = toAppendTo.charAt(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/EncodingPatternConverter.java,144,if (Character.isISOControl(c)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/EncodingPatternConverter.java,146,toAppendTo.setCharAt(i, '\\');
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/EncodingPatternConverter.java,147,toAppendTo.insert(i + 1, "u0000");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/EncodingPatternConverter.java,148,toAppendTo.setCharAt(i + 4, Chars.getUpperCaseHex((c & 0xF0) >> 4));
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/EncodingPatternConverter.java,149,toAppendTo.setCharAt(i + 5, Chars.getUpperCaseHex(c & 0xF));
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/EncodingPatternConverter.java,152,toAppendTo.insert(i, '\\');
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,203,for (final Map.Entry<String, ?> entry : map.entrySet()) {
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,214,return data.getValue(key);
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,223,final String result = data.getValue(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/LevelMixIn.java,38,public static Level getLevel(@JsonProperty("name") final String name) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,49,PropertiesUtil.getProperties().getBooleanProperty(ShutdownCallbackRegistry.SHUTDOWN_HOOK_ENABLED, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,123,if (SHUTDOWN_HOOK_ENABLED && this.shutdownCallbackRegistry instanceof LifeCycle) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,317,return SHUTDOWN_HOOK_ENABLED ? shutdownCallbackRegistry.addShutdownCallback(callback) : null;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,118,if (Loader.isClassAvailable("javax.servlet.ServletContext")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,260,if (!propsUtil.isOsWindows() || propsUtil.getBooleanProperty("log4j.skipJansi") || direct) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java,538,private boolean disableAnsi;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java,165,this.buffer.add(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,273,LOGGER.warn("Unable to instantiate {}", JANSI_CLASS);
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,110,final
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,111,Throwable thrown = event.getThrown();
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,114,buf.append(thrown.toString());
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,115,buf.append("\r\n");
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,116,for (final StackTraceElement element : thrown.getStackTrace()) {
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,117,Transform.appendEscapingCData(buf, "\tat " + element.toString());
log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java,118,buf.append("\r\n");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,275,final int begin = i++;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,276,int end;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,277,int depth = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,278,do {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,279,end = pattern.indexOf('}', i);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,280,if (end == -1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,281,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,283,final int next = pattern.indexOf("{", i);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,284,if (next != -1 && next < end) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,285,i = end + 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,286,++depth;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,288,--depth;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,292,if (end == -1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,293,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,296,final String r = pattern.substring(begin + 1, end);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,297,options.add(r);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,298,i = end + 1;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,170,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,171,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,172,return prop == null ? defaultValue : Charset.forName(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/LowLevelLogUtil.java,41,if (message != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/LowLevelLogUtil.java,42,writer.println(message);
log4j-api/src/main/java/org/apache/logging/log4j/util/LowLevelLogUtil.java,37,exception.printStackTrace(writer);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,174,LowLevelLogUtil.logException("Unable to get Charset '" + name + "', using default " + defaultValue, e);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2100,tryLogMessage(fqcn, level, marker, msg, throwable);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,166,final EventRoute route = asyncQueueFullPolicy.getRoute(thread.getId(), memento.getLevel());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,167,route.logMessage(this, memento);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,31,import org.apache.logging.log4j.core.ContextDataInjector;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,43,import org.apache.logging.log4j.status.StatusLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,251,disruptor.getRingBuffer().publishEvent(this, this, calcLocationIfRequested(fqcn), fqcn, level, marker, message,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,252,thrown);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DefaultAsyncQueueFullPolicy.java,33,return EventRoute.SYNCHRONOUS;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,205,factory.setFeature("http://xml.org/sax/features/external-general-entities", false);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,206,factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,207,factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,337,if (config != null && config instanceof AbstractConfiguration) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,338,configs.add((AbstractConfiguration) config);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,340,LOGGER.error("Failed to created configuration at {}", sourceLocation);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,341,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,344,return new CompositeConfiguration(configs);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,33,import org.apache.logging.log4j.Level;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,267,InputStream is = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,269,is = url.openStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,271,ConfigurationFactory.LOGGER.catching(Level.DEBUG, ioe);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,272,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,274,if (is == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,275,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,278,if (FileUtils.isFile(url)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,280,return new ConfigurationSource(is, FileUtils.fileFromUri(url.toURI()));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,283,ConfigurationFactory.LOGGER.catching(Level.DEBUG, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,286,return new ConfigurationSource(is, url);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,265,if (currentReadConfiguration instanceof AbstractConfiguration) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,266,configurations.add((AbstractConfiguration) currentReadConfiguration);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,268,LOGGER.error(
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,270,configLocation);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,273,final CompositeConfiguration compositeConfiguration = new CompositeConfiguration(configurations);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,274,LOGGER.debug("Starting LoggerContext[name={}] from configurations at {}", ctx.getName(),
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,275,configLocations);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,276,ctx.start(compositeConfiguration);
log4j-api-java9/src/main/java/org/apache/logging/log4j/util/StackLocator.java,76,return stackWalker.walk(s -> s.skip(depth).findFirst()).get().toStackTraceElement();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,387,private volatile boolean shutdown = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java,62,private volatile long nextCheckNanos = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,64,private volatile boolean renameEmptyFiles = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,65,private volatile boolean initialized = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,122,private static volatile List<ConfigurationFactory> factories = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LockingReliabilityStrategy.java,36,private volatile boolean isStopping = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java,50,private volatile boolean initialized = false;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/ClocksBenchmark.java,155,private volatile short count = 0;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/LoggerConfigBenchmark.java,55,private volatile Filter filter = null;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java,60,volatile long midnightToday = 0;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java,61,volatile long midnightTomorrow = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventTranslator.java,38,private final ContextDataInjector injector = ContextDataInjectorFactory.createInjector();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventTranslator.java,61,injector.injectContextData(null, (StringMap) event.getContextData()), contextStack,
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,122,logger.log(LevelTranslator.toLevel(level), msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,127,logger.log(LevelTranslator.toLevel(level), msg, param1);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,132,logger.log(LevelTranslator.toLevel(level), msg, params);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,137,logger.log(LevelTranslator.toLevel(level), msg, thrown);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,219,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.ERROR, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,224,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.WARN, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,229,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.INFO, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,234,logger.logIfEnabled(FQCN, LevelTranslator.CONFIG, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,239,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.DEBUG, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,244,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.TRACE, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,249,logger.logIfEnabled(FQCN, LevelTranslator.FINEST, null, msg);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,42,private ScheduledExecutorService executorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,196,if (scheduledItems > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,197,LOGGER.debug("{} starting {} threads", name, scheduledItems);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,198,scheduledItems = Math.min(scheduledItems, MAX_SCHEDULED_ITEMS);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,199,final ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(scheduledItems,
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,200,Log4jThreadFactory.createDaemonThreadFactory("Scheduled"));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,201,executor.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,202,executor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,203,this.executorService = executor;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,206,LOGGER.debug("{}: No scheduled items", name);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,54,return addr.getHostName();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,58,while (interfaces.hasMoreElements()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,59,final NetworkInterface nic = interfaces.nextElement();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,60,final Enumeration<InetAddress> addresses = nic.getInetAddresses();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,61,while (addresses.hasMoreElements()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,62,final InetAddress address = addresses.nextElement();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,63,if (!address.isLoopbackAddress()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,64,final String hostname = address.getHostName();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,65,if (hostname != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,66,return hostname;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,67,private final FileExtension fileExtension;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,142,this.fileExtension = FileExtension.lookupForFile(pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,206,return fileExtension;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,601,setTriggeringPolicy(factoryData.getTriggeringPolicy());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,319,setTriggeringPolicy(factoryData.getTriggeringPolicy());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,75,file = new File(path);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,76,if (file.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,77,return file;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,21,import java.io.UnsupportedEncodingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,22,import java.net.MalformedURLException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,25,import java.net.URLDecoder;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,26,import java.nio.charset.StandardCharsets;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,64,if (uri == null || (uri.getScheme() != null
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,65,&& (!PROTOCOL_FILE.equals(uri.getScheme()) && !JBOSS_FILE.equals(uri.getScheme())))) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,68,if (uri.getScheme() == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,69,File file = new File(uri.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,70,if (file.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,71,return file;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,79,uri = new File(path).toURI();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,82,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,85,final String charsetName = StandardCharsets.UTF_8.name();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,86,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,87,String fileName = uri.toURL().getFile();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,88,if (new File(fileName).exists()) { // LOG4J2-466
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,89,return new File(fileName); // allow files with '+' char in name
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,91,fileName = URLDecoder.decode(fileName, charsetName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,92,return new File(fileName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,94,LOGGER.warn("Invalid URL {}", uri, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,96,LOGGER.warn("Invalid encoding: {}", charsetName, uee);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,19,import java.text.ParseException;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,20,import java.text.SimpleDateFormat;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,21,import java.util.Calendar;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,22,import java.util.TimeZone;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,54,private static final long MINUTE_MS = 60000;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,59,private static final long SECOND_MS = 1000;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,64,private final long start;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,68,private final long end;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,74,private long midnightToday;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,75,private long midnightTomorrow;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,79,final Result onMismatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,81,this.start = start;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,82,this.end = end;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,84,initMidnight(start);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,91,void initMidnight(final long now) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,93,calendar.setTimeInMillis(now);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,94,calendar.set(Calendar.HOUR_OF_DAY, 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,95,calendar.set(Calendar.MINUTE, 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,96,calendar.set(Calendar.SECOND, 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,97,calendar.set(Calendar.MILLISECOND, 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,98,midnightToday = calendar.getTimeInMillis();
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,100,calendar.add(Calendar.DATE, 1);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,101,midnightTomorrow = calendar.getTimeInMillis();
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,112,if (currentTimeMillis >= midnightTomorrow || currentTimeMillis < midnightToday) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,113,initMidnight(currentTimeMillis);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,115,return currentTimeMillis >= midnightToday + start && currentTimeMillis <= midnightToday + end //
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,116,? onMatch // within window
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,117,: onMismatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,236,final long s = parseTimestamp(start, 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,237,final long e = parseTimestamp(end, Long.MAX_VALUE);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,244,private static long parseTimestamp(final String timestamp, final long defaultValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,248,final SimpleDateFormat stf = new SimpleDateFormat("HH:mm:ss");
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,249,stf.setTimeZone(TimeZone.getTimeZone("UTC"));
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,251,return stf.parse(timestamp).getTime();
log4j-api/src/main/java/org/apache/logging/log4j/Level.java,287,final Level level = LEVELS.get(toUpperCase(name));
log4j-api/src/main/java/org/apache/logging/log4j/Level.java,315,final String levelName = toUpperCase(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,146,final AtomicReference<WeakReference<LoggerContext>> r = new AtomicReference<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,147,r.set(new WeakReference<>(ctx));
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,148,CONTEXT_MAP.putIfAbsent(name, r);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/AbstractRolloverStrategy.java,124,final Integer index = Integer.parseInt(matcher.group(1));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/AbstractRolloverStrategy.java,125,eligibleFiles.put(index, entry);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/AbstractRolloverStrategy.java,117,final String filePattern = fileName.replace(NotANumber.VALUE, "(\\d+)");
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,47,private static final char PREFIX_SEPARATOR = ':';
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,161,public static final StrMatcher DEFAULT_VALUE_DELIMITER = StrMatcher.stringMatcher(":-");
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,320,this(variableResolver, prefixMatcher, suffixMatcher, escape, DEFAULT_VALUE_DELIMITER);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,333,public StrSubstitutor(
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,334,final StrLookup variableResolver, final StrMatcher prefixMatcher, final StrMatcher suffixMatcher, final char escape, final StrMatcher valueDelimiterMatcher) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,957,if ((valueDelimiterMatchLen = valueDelimiterMatcher.isMatch(varNameExprChars, i)) != 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,958,varName = varNameExpr.substring(0, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,959,varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,960,break;
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,391,sb.append('{');
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,392,for (int i = 0; i < data.size(); i++) {
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,393,if (i > 0) {
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,394,sb.append(", ");
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,399,sb.append('}');
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,419,final boolean writeHeader = !data.append || !file.exists();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,64,if (writeHeader && layout != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,65,final byte[] header = layout.getHeader();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,66,if (header != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,67,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,68,getOutputStream().write(header, 0, header.length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,70,logError("Unable to write header", e);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,92,if (writeHeader && layout != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,93,final byte[] header = layout.getHeader();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,94,if (header != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,95,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,96,getOutputStream().write(header, 0, header.length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,98,logError("Unable to write header for " + streamName, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,173,final byte[] header = layout.getHeader();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,174,if (header != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,175,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,176,os.write(header, 0, header.length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,177,this.outputStream = os; // only update field if os.write() succeeded
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,179,logError("Unable to write header", ioe);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,182,this.outputStream = os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,619,boolean writeHeader = !data.append;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,624,writeHeader = !data.append || !file.exists();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,81,private void writeHeader() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java,139,LOGGER.error("RollingFileAppender '{}': When no file name is provided a DirectFilenameRolloverStrategy must be configured");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,309,if (!hasOutputStream()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java,69,if (patternScript != null && pattern != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,224,final String key = pattern != null ? configuration.getStrSubstitutor().replace(event, pattern) : defaultRoute.getKey();
log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java,139,return getThreadContextClassLoader().loadClass(className);
log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java,141,return Class.forName(className);
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,48,private transient EventDataConverter converter;
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,54,this.converter = createConverter();
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,366,if (eventLogger && marker != null && marker.contains(EVENT_MARKER) && converter != null) {
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,367,msg = converter.convertEvent(message, params, throwable);
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,403,converter = createConverter();
log4j-jul/src/main/java/org/apache/logging/log4j/jul/LogManager.java,89,return loggerAdapter.getLogger(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,45,event.execute(endOfBatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,46,event.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,55,private static final long LEAST;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,66,static {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,117,LEAST = buf.getLong() | rand << SHIFT_6;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,122,private UuidUtil() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,81,System.arraycopy(mac, index, node, index + 2, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/AbstractRolloverStrategy.java,92,return getEligibleFiles(buf.toString(), pattern, isAscending);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/AbstractRolloverStrategy.java,96,return getEligibleFiles(path, pattern, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/AbstractRolloverStrategy.java,99,protected SortedMap<Integer, Path> getEligibleFiles(final String path, final String logfilePattern, final boolean isAscending) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/AbstractRolloverStrategy.java,123,if (matcher.matches()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,199,if (rolloverStrategy instanceof DirectFileRolloverStrategy) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java,122,mergeStrategy.mergConfigurations(rootNode, sourceRoot, getPluginManager());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/MergeStrategy.java,40,void mergConfigurations(Node target, Node source, PluginManager pluginManager);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,17,package org.apache.logging.log4j.core.appender;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,19,import java.io.OutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,20,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,22,import org.apache.logging.log4j.core.Appender;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,23,import org.apache.logging.log4j.core.Core;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,24,import org.apache.logging.log4j.core.Filter;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,25,import org.apache.logging.log4j.core.Layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,29,import org.apache.logging.log4j.core.layout.PatternLayout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,30,import org.apache.logging.log4j.core.util.CloseShieldOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,39,public final class OutputStreamAppender extends AbstractOutputStreamAppender<OutputStreamManager> {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,48,private boolean follow = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,52,private Layout<? extends Serializable> layout = PatternLayout.createDefaultLayout();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,56,private OutputStream target;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,59,public OutputStreamAppender build() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,69,this.follow = shouldFollow;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,89,this.target = aTarget;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,96,private static class FactoryData {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,97,private final Layout<? extends Serializable> layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,98,private final String name;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,99,private final OutputStream os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,111,public FactoryData(final OutputStream os, final String type, final Layout<? extends Serializable> layout) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,112,this.os = os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,113,this.name = type;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,114,this.layout = layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,121,private static class OutputStreamManagerFactory implements ManagerFactory<OutputStreamManager, FactoryData> {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,133,public OutputStreamManager createManager(final String name, final FactoryData data) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,134,return new OutputStreamManager(data.os, data.name, data.layout, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,138,private static OutputStreamManagerFactory factory = new OutputStreamManagerFactory();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,161,public static OutputStreamAppender createAppender(Layout<? extends Serializable> layout, final Filter filter,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,162,final OutputStream target, final String name, final boolean follow, final boolean ignore) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,163,if (name == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,164,LOGGER.error("No name provided for OutputStreamAppender");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,165,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,167,if (layout == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,168,layout = PatternLayout.createDefaultLayout();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,173,private static OutputStreamManager getManager(final OutputStream target, final boolean follow,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,174,final Layout<? extends Serializable> layout) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,175,final OutputStream os = new CloseShieldOutputStream(target);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,176,final String managerName = target.getClass().getName() + "@" + Integer.toHexString(target.hashCode()) + '.'
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,177,+ follow;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,178,return OutputStreamManager.getManager(managerName, new FactoryData(os, managerName, layout), factory);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,182,public static Builder newBuilder() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,183,return new Builder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,186,private OutputStreamAppender(final String name, final Layout<? extends Serializable> layout, final Filter filter,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,415,boolean renameFiles = false;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,20,import java.util.WeakHashMap;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,26,import org.apache.logging.log4j.LogManager;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,27,import org.apache.logging.log4j.util.LoaderUtil;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,35,public abstract class AbstractLoggerAdapter<L> implements LoggerAdapter<L> {
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,40,protected final Map<LoggerContext, ConcurrentMap<String, L>> registry = new WeakHashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,61,implements org.apache.logging.log4j.spi.LoggerContext, AutoCloseable, Terminable, ConfigurationListener {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,46,public class ClassLoaderContextSelector implements ContextSelector {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,149,ctx = CONTEXT_MAP.get(name).get().get();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,150,return ctx;
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,166,ref.compareAndSet(weakRef, new WeakReference<>(ctx));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,29,import org.apache.logging.log4j.core.LoggerContext;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,55,private final org.apache.logging.log4j.core.Logger logger;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,74,private Category(final org.apache.logging.log4j.core.Logger logger) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,120,org.apache.logging.log4j.core.Logger getLogger() {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,125,final org.apache.logging.log4j.core.Logger parent = logger.getParent();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,126,if (parent == null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,129,final ConcurrentMap<String, Logger> loggers = getLoggersMap(logger.getContext());
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,185,case OFF:
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,186,return Level.OFF;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,202,logger.setLevel(org.apache.logging.log4j.Level.toLevel(level.levelStr));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,210,logger.setLevel(org.apache.logging.log4j.Level.toLevel(priority.levelStr));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,357,logger.logMessage(fqcn, lvl, null, msg, t);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,365,return logger.isAdditive();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,369,logger.setAdditive(additivity);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,381,final ConcurrentMap<String, Logger> loggers = getLoggersMap(logger.getContext());
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,382,while ((name = NameUtil.getSubName(name)) != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,383,final Logger subLogger = loggers.get(name);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,384,if (subLogger != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,385,final ResourceBundle rb = subLogger.bundle;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,386,if (rb != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,387,return rb;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,451,if (logger.isEnabled(level, null, message, throwable)) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,452,logger.logMessage(FQCN, level, null, new ObjectMessage(message), throwable);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,460,return new Logger((LoggerContext) context, name);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,476,return (LoggerContext) getContext(FQCN, false);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,485,return logger.isEnabled(level, null, null);
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,26,import org.apache.logging.log4j.core.LoggerContext;
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,99,final LoggerContext ctx = PrivateManager.getContext();
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,100,ctx.reconfigure();
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,215,return (LoggerContext) getContext(FQCN, false);
log4j-1.2-api/src/main/java/org/apache/log4j/Logger.java,21,import org.apache.logging.log4j.core.LoggerContext;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/CronExpression.java,1576,Date start = targetDate;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java,113,LOGGER.error("RollingFileAppender '{}': When no file name is provided a DirectFilenameRolloverStrategy must be configured");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataId.java,98,public StructuredDataId(final String name, final String[] required, final String[] optional,
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataId.java,99,final int maxLength) {
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataId.java,102,if (maxLength > 0 && name.length() > MAX_LENGTH) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,175,loggerDisruptor.enqueueLogMessageInfo(translator);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,346,disruptor.getRingBuffer().publishEvent(translator, logEvent, asyncLoggerConfig);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,205,public boolean tryPublish(final RingBufferLogEventTranslator translator) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,210,LOGGER.warn("[{}] Ignoring log event after log4j was shut down: {} [{}] {}", contextName,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,212,+ (translator.thrown == null ? "" : Throwables.toStringList(translator.thrown)));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,217,void enqueueLogMessageInfo(final RingBufferLogEventTranslator translator) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,223,disruptor.publishEvent(translator);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,225,LOGGER.warn("[{}] Ignoring log event after log4j was shut down: {} [{}] {}", contextName,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java,227,+ (translator.thrown == null ? "" : Throwables.toStringList(translator.thrown)));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,76,if (entry.getValue() < createTime) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,78,if (appendersUsage.remove(entry.getKey(), entry.getValue())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,41,import org.apache.logging.log4j.core.script.AbstractScript;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,42,import org.apache.logging.log4j.core.script.ScriptManager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,225,final AppenderControl control = getControl(key, event);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,227,control.callAppender(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,235,private synchronized AppenderControl getControl(final String key, final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,259,control = new AppenderControl(app, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,299,control.getAppender().stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,77,LOGGER.debug("Removing appender " + entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,136,private final ConcurrentMap<String, AppenderControl> appenders = new ConcurrentHashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,190,appenders.put(key, new AppenderControl(appender, null, null));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,203,final Map<String, Appender> map = configuration.getAppenders();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,204,for (final Map.Entry<String, AppenderControl> entry : appenders.entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,206,if (!map.containsKey(appender.getName())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,230,if (purgePolicy != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,236,AppenderControl control = appenders.get(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,249,control = appenders.get(DEFAULT_KEY);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,260,appenders.put(key, control);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,286,return Collections.unmodifiableMap(appenders);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,295,LOGGER.debug("Deleting route with " + key + " key ");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,296,final AppenderControl control = appenders.remove(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,298,LOGGER.debug("Stopping route with " + key + " key");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,301,LOGGER.debug("Route with " + key + " key already deleted");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,188,final FileOutputStream fos = new FileOutputStream(filename, isAppend);
log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptManager.java,83,String threading = (String) factory.getParameter(KEY_THREADING);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,71,|| DefaultAsyncQueueFullPolicy.class.getName().equals(router)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,76,|| DiscardingAsyncQueueFullPolicy.class.getName().equals(router)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,543,&& method.getName().equals("newInstance")) {
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLoggerFactory.java,37,return new Log4jLogger(context.getLogger(key), name);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,361,return "Reconnector [latch=" + latch + ", shutdown=" + shutdown + ", owner=" + owner + "]";
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,525,private Configuration setConfiguration(final Configuration config) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,148,manager.getPatternProcessor().setPrevFileTime(lastRollDate.getTime());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,149,final Date thisRoll = cronExpression.getPrevFireTime(new Date());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,150,manager.getPatternProcessor().setCurrentFileTime(thisRoll.getTime());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,151,manager.rollover();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,535,final StringBuilder buf = new StringBuilder(255);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,536,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, fileIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java,216,prevFileTime = nextFileTime;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java,269,final long time = useCurrentTime && currentFileTime != 0 ? currentFileTime :
log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java,183,StackTraceElement last = null;
log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java,184,for (int i = stackTrace.length - 1; i > 0; i--) {
log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java,187,return last;
log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java,189,last = stackTrace[i];
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,38,super(new LoggerInputStream(in, charset, logger, fqcn == null ? FQCN : fqcn, level, marker));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,44,super(new LoggerInputStream(in, charset, logger, fqcn == null ? FQCN : fqcn, level, marker), size);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,49,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,54,return super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,59,return super.read(b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,64,return super.read(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,69,return LoggerBufferedInputStream.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,38,super(new LoggerReader(reader, logger, fqcn == null ? FQCN : fqcn, level, marker));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,43,super(new LoggerReader(reader, logger, fqcn == null ? FQCN : fqcn, level, marker), size);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,48,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,53,return super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,58,return super.read(cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,63,return super.read(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,68,final int len = target.remaining();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,69,final char[] cbuf = new char[len];
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,70,final int charsRead = read(cbuf, 0, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,71,if (charsRead > 0) {
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,72,target.put(cbuf, 0, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,74,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,79,return super.readLine();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,40,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,41,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,46,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,47,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,52,this.out.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,53,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,58,this.out.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,63,return LoggerFilterOutputStream.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,68,this.out.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,69,this.logger.put(this.fqcn, b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,74,this.out.write(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,75,this.logger.put(this.fqcn, b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,80,this.out.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,81,this.logger.put(this.fqcn, (byte) (b & 0xFF));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,37,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,38,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,43,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,49,this.out.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,55,this.out.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,60,return LoggerFilterWriter.class.getSimpleName() + "{writer=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,65,this.out.write(cbuf);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,66,this.logger.put(this.fqcn, cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,71,this.out.write(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,72,this.logger.put(this.fqcn, cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,77,this.out.write(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,78,this.logger.put(this.fqcn, (char) c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,83,this.out.write(str);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,84,this.logger.put(this.fqcn, str, 0, str.length());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,89,this.out.write(str, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,90,this.logger.put(this.fqcn, str, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,37,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,38,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,43,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,49,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,50,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,55,final int b = super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,56,this.logger.put(this.fqcn, b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,57,return b;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,62,return read(b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,67,final int bytesRead = super.read(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,68,this.logger.put(this.fqcn, b, off, bytesRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,69,return bytesRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,74,return LoggerInputStream.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,39,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,40,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,44,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,45,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,60,this.logger.put(this.fqcn, b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,65,this.logger.put(this.fqcn, b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,70,this.logger.put(this.fqcn, (byte) (b & 0xFF));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,45,super(new LoggerOutputStream(logger, level, marker, ensureNonNull(charset), fqcn == null ? FQCN : fqcn),
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,46,autoFlush, ensureNonNull(charset).name());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,52,super(new LoggerFilterOutputStream(out, ensureNonNull(charset), logger, fqcn == null ? FQCN : fqcn, level,
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,53,marker), autoFlush, ensureNonNull(charset).name());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,62,super.append(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,68,super.append(csq);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,74,super.append(csq, start, end);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,80,return super.checkError();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,85,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,90,super.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,95,super.format(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,101,super.format(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,107,super.print(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,112,super.print(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,117,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,122,super.print(d);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,127,super.print(f);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,132,super.print(i);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,137,super.print(l);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,142,super.print(obj);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,147,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,152,super.printf(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,158,super.printf(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,164,super.println();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,169,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,174,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,179,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,184,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,189,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,194,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,199,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,204,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,209,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,214,return LoggerPrintStream.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,219,super.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,224,super.write(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,229,super.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,51,super(new LoggerWriter(logger, fqcn == null ? FQCN : fqcn, level, marker), autoFlush);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,56,super(new LoggerFilterWriter(writer, logger, fqcn == null ? FQCN : fqcn, level, marker), autoFlush);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,61,super.append(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,67,super.append(csq);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,73,super.append(csq, start, end);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,79,return super.checkError();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,84,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,89,super.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,94,super.format(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,100,super.format(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,106,super.print(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,111,super.print(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,116,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,121,super.print(d);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,126,super.print(f);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,131,super.print(i);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,136,super.print(l);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,141,super.print(obj);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,146,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,151,super.printf(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,157,super.printf(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,163,super.println();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,168,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,173,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,178,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,183,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,188,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,193,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,198,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,203,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,208,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,213,return LoggerPrintWriter.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,218,super.write(buf);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,223,super.write(buf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,228,super.write(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,233,super.write(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,238,super.write(s, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,37,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,38,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,43,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,49,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,55,final int c = super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,56,this.logger.put(this.fqcn, c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,57,return c;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,62,return read(cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,67,final int charsRead = super.read(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,68,this.logger.put(this.fqcn, cbuf, off, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,69,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,74,final int len = target.remaining();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,75,final char[] cbuf = new char[len];
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,76,final int charsRead = read(cbuf, 0, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,77,if (charsRead > 0) {
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,78,target.put(cbuf, 0, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,80,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,85,return LoggerReader.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,36,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,37,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,40,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,41,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,46,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,56,return this.getClass().getSimpleName() + "[fqcn=" + this.fqcn + ", logger=" + this.logger + "]";
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,61,this.logger.put(this.fqcn, cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,66,this.logger.put(this.fqcn, cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,71,this.logger.put(this.fqcn, (char) c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,76,this.logger.put(this.fqcn, str, 0, str.length());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,81,this.logger.put(this.fqcn, str, off, len);
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,67,JAVA;
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,88,return new String[] {XML.name(), JSON.name(), JAVA.name()};
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,21,import org.apache.logging.log4j.message.StringMapMessage;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,22,import org.apache.logging.log4j.util.IndexedReadOnlyStringMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,43,private MapPatternConverter(final String[] options) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,55,return new MapPatternConverter(options);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,63,StringMapMessage msg;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,64,if (event.getMessage() instanceof StringMapMessage) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,65,msg = (StringMapMessage) event.getMessage();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,69,final IndexedReadOnlyStringMap sortedMap = msg.getIndexedReadOnlyStringMap();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,73,if (sortedMap.isEmpty()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,74,toAppendTo.append("{}");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,75,return;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,77,toAppendTo.append("{");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,78,for (int i = 0; i < sortedMap.size(); i++) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,79,if (i > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,80,toAppendTo.append(", ");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,82,toAppendTo.append(sortedMap.getKeyAt(i)).append('=').append((String)sortedMap.getValueAt(i));
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,84,toAppendTo.append('}');
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,87,final String val = sortedMap.getValue(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,126,if (manager.getFileSize() == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,127,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java,25,import org.apache.logging.log4j.message.StringMapMessage;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java,121,final boolean isMapMessage = event != null && event.getMessage() instanceof StringMapMessage;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java,132,return ((StringMapMessage) event.getMessage()).get(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java,87,private final char[] cachedBuffer = new char[64]; // max length of formatted date-time in any format < 64
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,643,System.currentTimeMillis() : file.lastModified(); // LOG4J2-531 create file first so time has valid value
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,113,aManager.getPatternProcessor().getNextTime(aManager.getFileTime(), interval, modulate);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,116,+ aManager.getPatternProcessor().getNextTime(aManager.getFileTime(), interval, modulate);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DirectWriteRolloverStrategy.java,318,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, true, fileIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java,256,formatFileName(subst, buf, false, obj);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java,266,final Object obj) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java,270,prevFileTime != 0 ? prevFileTime : System.currentTimeMillis();
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,52,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,66,LoaderUtil.loadClass(ExecutorServices.class.getName());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,19,import java.io.FileDescriptor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,20,import java.io.FileOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,21,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,22,import java.io.OutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,23,import java.io.PrintStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,24,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,25,import java.io.UnsupportedEncodingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,26,import java.lang.reflect.Constructor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,27,import java.nio.charset.Charset;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,28,import java.util.concurrent.atomic.AtomicInteger;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,41,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,265,final Class<?> clazz = LoaderUtil.loadClass(JANSI_CLASS);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,22,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,84,final Class<? extends AsyncQueueFullPolicy> cls = LoaderUtil.loadClass(router).asSubclass(AsyncQueueFullPolicy.class);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,26,import com.lmax.disruptor.*;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,31,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,104,(Class<? extends ExceptionHandler<RingBufferLogEvent>>) LoaderUtil.loadClass(cls);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,120,(Class<? extends ExceptionHandler<AsyncLoggerConfigDisruptor.Log4jEventWrapper>>) LoaderUtil.loadClass(cls);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java,176,addFactory(list, LoaderUtil.loadClass(factoryClass).asSubclass(ConfigurationFactory.class));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,49,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,81,final Class<?> clazz = LoaderUtil.loadClass(factory);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ReliabilityStrategyFactory.java,21,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ReliabilityStrategyFactory.java,61,final Class<? extends ReliabilityStrategy> cls = LoaderUtil.loadClass(strategy).asSubclass(
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java,71,mergeStrategy = LoaderUtil.newInstanceOf(mergeStrategyClassName);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ContextDataFactory.java,25,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ContextDataInjectorFactory.java,26,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ContextDataInjectorFactory.java,70,final Class<? extends ContextDataInjector> cls = LoaderUtil.loadClass(className).asSubclass(
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,97,final ContextSelector selector = LoaderUtil.newCheckedInstanceOfProperty(Constants.LOG4J_CONTEXT_SELECTOR,
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,110,final ShutdownCallbackRegistry registry = LoaderUtil.newCheckedInstanceOfProperty(
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,272,throws ClassNotFoundException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,273,IllegalAccessException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,274,InstantiationException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,275,NoSuchMethodException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,276,InvocationTargetException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,277,return LoaderUtil.newInstanceOf(className);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,295,throws ClassNotFoundException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,296,NoSuchMethodException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,297,IllegalAccessException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,298,InvocationTargetException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,299,InstantiationException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,300,return LoaderUtil.newCheckedInstanceOf(className, clazz);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,310,return LoaderUtil.isClassAvailable(className);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/OptionConverter.java,24,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/OptionConverter.java,229,final Class<?> classObj = LoaderUtil.loadClass(className);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,648,return (T) appenders.get(appenderName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,668,appenders.putIfAbsent(appender.getName(), appender);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,784,final Appender app = appenders.remove(appenderName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AwaitCompletionReliabilityStrategy.java,97,return result.getReliabilityStrategy().getActiveLoggerConfig(next);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LockingReliabilityStrategy.java,89,return result.getReliabilityStrategy().getActiveLoggerConfig(next);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,126,public void baseline() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,127,consume(bytes);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,133,public void usAsciiGetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,134,consume(usAsciiGetBytesLayout.toByteArray(logEvent));
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,148,public void iso8859_1GetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,149,consume(iso8859_1GetBytesLayout.toByteArray(logEvent));
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,163,public void utf8GetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,164,consume(utf8GetBytesLayout.toByteArray(logEvent));
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,178,public void utf16GetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,179,consume(utf16GetBytesLayout.toByteArray(logEvent));
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/MDCContextMap.java,74,return MDC.getCopyOfContextMap().containsKey(key);
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/MDCContextMap.java,91,return MDC.getCopyOfContextMap().isEmpty();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,103,final String font, final String fontSize, final String headerSize) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,147,sbuf.append(event.getTimeMillis() - jvmStartTime);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,351,return new HtmlLayout(locationInfo, title, contentType, charset, font, fontSize, headerSize);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,428,fontSize.larger().getFontSize());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,348,LOGGER.trace("{} notifying ReliabilityStrategies that appenders will be stopped.", cls);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,349,for (final LoggerConfig loggerConfig : loggerConfigs.values()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,350,loggerConfig.getReliabilityStrategy().beforeStopAppenders();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,352,root.getReliabilityStrategy().beforeStopAppenders();
log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java,99,for (final Provider provider : serviceLoader) {
log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java,101,PROVIDERS.add(provider);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,26,import org.apache.logging.log4j.core.impl.MutableLogEvent;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,206,return event instanceof MutableLogEvent
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,208,: event;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,47,private final Collection<Cancellable> hooks = new CopyOnWriteArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,72,for (final Runnable hook : hooks) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,73,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,74,hook.run();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,77,LOGGER.error(SHUTDOWN_HOOK_MARKER, "Caught exception executing shutdown hook {}", hook, t1);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,79,System.err.println("Caught exception " + t2.getClass() + " logging exception " + t1.getClass());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,80,t1.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,90,private final Reference<Runnable> hook;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,91,private Collection<Cancellable> registered;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,93,RegisteredCancellable(final Runnable callback, final Collection<Cancellable> registered) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,95,hook = new SoftReference<>(callback);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,100,hook.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,101,registered.remove(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,102,registered = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,107,final Runnable runnableHook = this.hook.get();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,110,this.hook.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,116,return String.valueOf(hook.get());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,124,hooks.add(receipt);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java,458,if (messageProducer == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java,459,throw new AppenderLoggingException(
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java,484,configuration),
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSource.java,32,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSource.java,83,final Class<?> factoryClass = LoaderUtil.loadClass(className);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,165,public synchronized boolean closeOutputStream() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,166,flush();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqManager.java,61,((ShutdownCallbackRegistry) LogManager.getFactory()).addShutdownCallback(new Runnable() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqManager.java,63,public void run() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqManager.java,64,CONTEXT.close();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,268,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java,146,private volatile boolean shutdown = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,196,private volatile long midnightToday = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,197,private volatile long midnightTomorrow = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JacksonFactory.java,221,final Set<String> except = new HashSet<>(2);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java,123,locationInfo, properties, compact),
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,105,this.fileExtension = FileExtension.lookupForFile(pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,121,this.fileExtension = FileExtension.lookupForFile(pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,137,this.triggeringPolicy = triggeringPolicy;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,138,this.rolloverStrategy = rolloverStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,40,final String attributeValue = node.getAttributes().get("value");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,50,rawValue = removeAttributeValue(node.getAttributes(), "value");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,26,import org.apache.logging.log4j.core.config.plugins.Plugin;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,27,import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,28,import org.apache.logging.log4j.core.config.plugins.PluginFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,46,private Filter filter;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,30,import org.apache.logging.log4j.core.util.NameUtil;
log4j-1.2-api/src/main/java/org/apache/log4j/Logger.java,59,return (LoggerContext) getContext(FQCN, false);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,207,if (appender instanceof LifeCycle2) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,208,((LifeCycle2) appender).stop(timeout, timeUnit);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,210,appender.stop();
log4j-api/src/main/java/org/apache/logging/log4j/util/Constants.java,92,final String version = System.getProperty("java.version");
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,129,final String version = System.getProperty("java.version");
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,130,final String[] parts = version.split("\\.");
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,131,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,132,final int major = Integer.parseInt(parts[1]);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,133,return major < 8;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,135,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,244,final FixedFormat type = FixedFormat.lookup(options[0]);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,372,return writeTime(ms, buffer, startPos + dateLength) - startPos;
